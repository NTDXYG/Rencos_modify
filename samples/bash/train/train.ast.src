ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-i) FLAG(-I) ARGUMENT({})<Regex> UTILITY(echo) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT({})<Regex> ARGUMENT({})<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-delete)
ROOT() PIPELINE() UTILITY(df) ARGUMENT(File)<File> UTILITY(grep) FLAG(-q) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(diff) ARGUMENT(File)<File> ARGUMENT(File)<File> UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(sed) ARGUMENT(Program)<Program>
ROOT() UTILITY(pstree) FLAG(-a) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-perm) ARGUMENT(Permission)<Permission> FLAG(-print)
ROOT(root) T(find) T(/usr) T(/home) T(/tmp) T(-name) T(*.jar) T(2>/dev/null)
ROOT(root) T(kill) T(-9) T($(lsof) T(-t) T(-i:8080))
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(-not) FLAG(-path) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(sed) FLAG(-i) ARGUMENT(Program)<Program> ARGUMENT({})<File>
ROOT(root) T(find) T(/) T(-print) T(>) T(masterfilelist.out)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(nano) ARGUMENT({})<File>
ROOT(root) T(mount) T(--make-rprivate) T(/)
ROOT(root) T(alias) T(my_command=$oldalias) T(-option) T(3)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-empty)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(-not) FLAG(-newer) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(!) FLAG(-perm) ARGUMENT(Permission)<Permission> FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT(root) T(find) T(/) NT(<n>) T(-name) T(10_Recommended*) T(-o) T(-name) T(share) T(-prune) T(-o) T(-type) T(f) T(-name) T(java) T(-print) T(2>/dev/null)
ROOT() UTILITY(cd) ARGUMENT(Directory)<Directory>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-user) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(chown) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-iwholename) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(grep) FLAG(-H) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT(root) T(find) T(.) T(-name) T(*.txt) T(-exec) T(ls) T(-la) T({}) T(;) T(-exec) T(./myScript.sh) T({}) T(;)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(sed) FLAG(-i) ARGUMENT(Program)<Program> ARGUMENT({})<File>
ROOT(root) T(read) T(-p) T($() T(pwd) T(-P)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-perm) ARGUMENT(Permission)<Permission>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan>
ROOT() UTILITY(false) ARGUMENT(true)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() UTILITY(basename) OPERATOR(--) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(od) FLAG(-x) FLAG(-c) FLAG(-b) ARGUMENT(File)<File> UTILITY(less)
ROOT() UTILITY(cat) ARGUMENT(File)<File>
ROOT() UTILITY(crontab) ARGUMENT(File)<File>
ROOT(root) T(find) T(-printf) T(%P\n|) T(sort) T(|) T(xargs) T(-I) T({}) T(bash) T(-c) T(echo) T($(uuid)) T({})
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(nl) UTILITY(sed) FLAG(-n) ARGUMENT(Program)<Program> UTILITY(grep) FLAG(-i) FLAG(-n) ARGUMENT(Regex)<Regex> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT(root) T(find) T(/home) T(-size) T(+100000) T(-ls) T(2>/dev/null)
ROOT() UTILITY(rm) FLAG(-r) FLAG(-f) ARGUMENT(File)<File> ARGUMENT(File)<File> ARGUMENT(File)<File> ARGUMENT(File)<File> ARGUMENT(File)<File> ARGUMENT(File)<File> ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(read) FLAG(-e) FLAG(-i) ARGUMENT(Regex)<Regex> FLAG(-p) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-depth) FLAG(-empty) FLAG(-type) ARGUMENT(d)<Type> FLAG(-delete)
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(--only-matching) ARGUMENT(Regex)<Regex> UTILITY(xargs) UTILITY(tr) FLAG(--delete) ARGUMENT(Regex)<Regex>
ROOT(root) T(rsync) T(-a) T(-u) T(-v) T(-e) T(File) T(File) T(File)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(basename) T($() T(pwd)
ROOT() UTILITY(date) FLAG(--date) ARGUMENT(Regex)<Regex> ARGUMENT('+%a')<Format>
ROOT(root) T(cat) T($() T(echo) T(Regex) T(|) T(sort)
ROOT(root) T(sh) T(-c) T(find) T(/) T(-name) T(myfile) T(-type) T(f) T(-print) T(2>) T(/dev/null)
ROOT(root) T(cp) T(-r) T($() T(ls) T(-A) T(|) T(grep) T(-v) T(Regex)
ROOT(root) T(mount) T(--rbind) T(/dev) T(/var/snmp3/dev)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-ls)
ROOT() UTILITY(split) FLAG(-b) ARGUMENT(Size)<Size> ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(df) FLAG(-k) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(mv) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-user) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() PIPELINE() UTILITY(comm) FLAG(-3) ARGUMENT(File)<File> ARGUMENT(File)<File> UTILITY(sed) ARGUMENT(Program)<Program>
ROOT(root) T(find) T(~/.personal/tips) T(-type) T(f) T(-iname) T(*.pdf) T(-exec) T(pdftotext) T({}) T(-) T(;) T(|) T(grep) T(hot)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(-prune) FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() UTILITY(bind) FLAG(-x) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(grep) FLAG(-q) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> FLAG(-exec::;) UTILITY(dirname) ARGUMENT({})<Regex>
"ROOT(root) T(find) T(/) T(-type) T(f) T(-size) T(+20000k) T(-exec) T(ls) T(-lh) T({}) T(;) T(2>) T(/dev/null) T(|) T(awk) T({) T(print) T($NF) T("":) T("") T($5) T(}) T(|) T(sort) T(-nrk) T(2,2)"
ROOT(root) T(find) T(/) T(-path) T(/usr/share) T(-prune) T(-o) NT(<n>) T(-name) T(rsync) T(-o) T(-name) T(bash) T(-print) T(2>/dev/nul)
ROOT(root) T(find) T(-type) T(d) T(>) T(dir-list)
ROOT() UTILITY(groups) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(wc) ARGUMENT({})<File>
ROOT() UTILITY(split) ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(diff) FLAG(-r) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(watch) T(elinks) T(-dump) T(file.html)
ROOT(root) T(find) T(.) T(-type) T(d) T(!) T(-iname) T(*.*) T(|) T(while) T(read) T(d;) T(do) T(mv) T($d/*) T(.;) T(done)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
"ROOT(root) T(find) T(.) T(-type) T(d) T(-name) T(bin) T(|) T(cut) T(-d/) T(-f1,2) T(|) T(sort) T(>) T(b)"
ROOT(root) T(find) T(.) T(-printf) T(%P\n) T(|) T(sort) T(|) T(while) T(IFS=) T(read) T(-r) T(f;) T(do) T(echo) T($(uuid)) T($f;) T(done)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> FLAG(-delete)
"ROOT(root) T(find) T(/path) T(-name) T(*.pdf) T(-exec) T(sh) T(-c) T(pdftotext) T(""{}"") T(-) T(|) T(grep) T(--with-filename) T(--label=""{}"") T(--color) T(""your) T(pattern"") T(;)"
ROOT() UTILITY(tar) FLAG(-c) FLAG(-z) FLAG(-v) FLAG(-f) ARGUMENT(File)<File> COMMANDSUBSTITUTION() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(rev) ARGUMENT(File)<File> UTILITY(uniq) FLAG(-f) ARGUMENT(Quantity)<Quantity> UTILITY(rev)
ROOT() UTILITY(basename) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(.) T(-maxdepth) T(1) T(-type) T(d) T(-print0) T(|) T(xargs) T(-0) T(-I) T({}) T(sh) T(-c) T(echo) T($(find) T({}) T(|) T(wc) T(-l)) T({}) T(|) T(sort) T(-n)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(cp) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT(root) T(watch) T(--color) T(tput) T(setaf) T(1;) T(echo) T(foo)
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(awk) ARGUMENT(Program)<Program> UTILITY(sort) FLAG(-n) FLAG(-r) UTILITY(head) FLAG(-) ARGUMENT(Quantity)<Quantity>
ROOT(root) T(git) T(status) T(--branch) T(--porcelain) T(|) T(grep) T(##) T(|) T(cut) T(-c) T(4-) T(|) T(cut) T(-d.) T(-f1)
ROOT() UTILITY(hostname)
ROOT() UTILITY(shopt) FLAG(-u) ARGUMENT(extglob)<Option>
ROOT(root) T(find) T(/) T(-maxdepth) T(2) NT(<n>) T(-fstype) T(vfat) T(-or) T(-fstype) T(ntfs) T(2>) T(/dev/null)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(!) ARGUMENT(Path)<Path>
ROOT() UTILITY(watch) UTILITY(ls) FLAG(-l)
ROOT() PIPELINE() UTILITY(yes) UTILITY(tr) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> UTILITY(head) FLAG(-c) ARGUMENT(Quantity)<Quantity> UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(dig) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT(a)<Type>
ROOT(root) T(find) T(.) T(-type) T(f) T(-exec) T(stat) T({}) T(;) T(>) T(/dev/null)
ROOT(root) T(sed) T(s/^/.+/) T(infile) T(|) T(bc) T(|) T(tail) T(-1)
ROOT(root) T(comm) T(-2) T(-3) T(<() T(sort) T(File)
ROOT() PIPELINE() UTILITY(grep) FLAG(-F) FLAG(--include) ARGUMENT(Regex)<Regex> FLAG(-r) FLAG(-l) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-L) ARGUMENT(Quantity)<Quantity> FLAG(-I) ARGUMENT({})<Regex> UTILITY(dirname) ARGUMENT({})<Regex>
ROOT(root) T(find) T(.) T(-type) T(d) T(-exec) T(/path/to/script.sh) T({}) T(;)
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> UTILITY(tee) FLAG(-a) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(mount) UTILITY(tail) FLAG(-) ARGUMENT(Quantity)<Quantity> UTILITY(sed) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-execdir::;) UTILITY(mv) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print) BINARYLOGICOP(-or) FLAG(-type) ARGUMENT(d)<Type> UNARYLOGICOP(-prune)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(!) FLAG(-path) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-and) UNARYLOGICOP(!) FLAG(-path) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(mktemp) COMMANDSUBSTITUTION() UTILITY(basename) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-depth) FLAG(-path) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-print)
ROOT(root) T(find) T(.) T(-name) T(*.mp3) T(-print0) T(|) T(xargs) T(-0) T(mplayer)
ROOT() PIPELINE() UTILITY(fold) FLAG(-w) ARGUMENT(Quantity)<Quantity> ARGUMENT(File)<File> UTILITY(sort) UTILITY(uniq) FLAG(-c) UTILITY(sort) FLAG(-k) ARGUMENT(Number)<Number> FLAG(-k) ARGUMENT(Number)<Number>
ROOT() UTILITY(mount) FLAG(-t) ARGUMENT(proc)<Option> ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(md5sum) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(shopt) FLAG(-p) ARGUMENT(dotglob)<Option>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT(root) T(find) T(relative/path/to/dir) T(-type) T(f) T(-exec) T(md5sum) T({}) T(+) T(>) T(sums.md5)
ROOT() UTILITY(ln) FLAG(-s) ARGUMENT(File)<File> COMMANDSUBSTITUTION() UTILITY(echo) FLAG(-e) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(.) T(-type) T(d) T(-mtime) T(14) T(-printf) T(%P\n) T(>) T(deploy.txt)
ROOT(root) T(|) T(grep) T(Regex) T(|) T(grep) T(-o) T(Regex)
ROOT() UTILITY(comm) FLAG(-2) FLAG(-3) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(fold) FLAG(-w) ARGUMENT(Quantity)<Quantity>
ROOT(root) T(ruby) T(-e) T($(curl) T(-fsSL) T(https://raw.github.com/Homebrew/homebrew/go/install))
"ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-printf) ARGUMENT(""\n%AD %AT %p"")<Format> UTILITY(head) FLAG(-n) ARGUMENT(Quantity)<Quantity>"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(ping) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(tar) FLAG(-c) FLAG(-v) FLAG(-f) ARGUMENT(File)<File> ARGUMENT({})<File>
ROOT() UTILITY(mv) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(set) FLAG(-v)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(Permission)<Permission> UTILITY(head)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(f)<Type> FLAG(-printf) ARGUMENT('%T@ %p\0')<Format> UTILITY(sort) FLAG(-r) FLAG(-z) FLAG(-n) UTILITY(awk) ARGUMENT(Program)<Program> UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) FLAG(-f) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(cal) ARGUMENT(DateTime)<DateTime> ARGUMENT(DateTime)<DateTime> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(shopt) FLAG(-s) ARGUMENT(nullglob)<Option> ARGUMENT(extglob)<Option>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(f)<Type>
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(sort) FLAG(-r) FLAG(-h)
ROOT() UTILITY(chown) FLAG(-R) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-printf) ARGUMENT('%h\n')<Format> UTILITY(sort) FLAG(--unique)
ROOT() UTILITY(rsync) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(cat) COMMANDSUBSTITUTION() UTILITY(which) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-exec::;) UTILITY(rm) FLAG(-i) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-atime) ARGUMENT(+Timespan)<Timespan> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(mv) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(sed) FLAG(-e) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path>
ROOT() PIPELINE() UTILITY(crontab) FLAG(-l) UTILITY(sed) ARGUMENT(Program)<Program> UTILITY(crontab) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(ln) FLAG(-s) ARGUMENT({})<File> ARGUMENT(Regex)<Regex>
ROOT(root) T(pdfunite) T(`find) T(.) T(-name) T(*.pdf) T(|) T(sort`) T(all.pdf)
ROOT() UTILITY(ln) FLAG(-s) ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
"ROOT(root) T(find) T(PDFs/) T(-name) T(*.pdf) T(-exec) T(sh) T(-c) T(pdftotext) T(""{}"") T(-) T(|) T(grep) T(-i) T(--with-filename) T(--label=""{}"") T(--color) T(""perry) T(sound"") T(;)"
ROOT() UTILITY(basename) COMMANDSUBSTITUTION() UTILITY(pwd)
ROOT(root) T(finger) T(`id) T(-un`) T(|) T(head) T(-1) T(|) T(cut) T(-d:) T(-f3-)
ROOT() UTILITY(nohup) UTILITY(rm) FLAG(-r) FLAG(-f) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(ls) FLAG(-l) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(ls) FLAG(-m) FLAG(-R) ARGUMENT(File)<File> UTILITY(sed) FLAG(-n) ARGUMENT(Program)<Program>
ROOT() UTILITY(cd) ARGUMENT(Directory)<Directory>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-delete)
ROOT(root) T(du) T(--summary) T(--human-readable) T(*)
ROOT(root) T(mount) T(--rbind) T(/something) T(/new_something)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type> FLAG(-empty) FLAG(-delete)
ROOT() UTILITY(mount) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(<directory>) T(-type) T(f) T(-size) T(+1M) T(-delete)
ROOT(root) T(find) T(.) T(-type) T(f) NT(<n>) T(-exec) T(command1) T(;) T(-false) T(-o) T(-exec) T(command2) T(;)
ROOT() PIPELINE() UTILITY(sed) ARGUMENT(Program)<Program> ARGUMENT(File)<File> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(mkdir) FLAG(-p) ARGUMENT({})<Directory>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() UTILITY(rm) FLAG(-r) FLAG(-f) COMMANDSUBSTITUTION() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(column) FLAG(-t)
ROOT() PIPELINE() UTILITY(finger) FLAG(-s) UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(more) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-E) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(tac) ARGUMENT(File)<File> UTILITY(sort) FLAG(-t) ARGUMENT(Regex)<Regex> FLAG(-k) ARGUMENT(Number)<Number> FLAG(-n)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(wc) FLAG(-l) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(ls) FLAG(-a) FLAG(-l) FLAG(-R) FLAG(-I) ARGUMENT(File)<File> FLAG(-I) ARGUMENT(File)<File> FLAG(-I) ARGUMENT(File)<File> FLAG(-I) ARGUMENT(File)<File> FLAG(-I) ARGUMENT(File)<File> ARGUMENT(File)<File> UTILITY(md5sum) FLAG(-c) ARGUMENT(File)<File>
ROOT(root) T(exit) T(-1)
ROOT(root) T(find) T(/dir) NT(<n>) T(-name) T(node_modules) T(-prune) T(-o) T(-name) T(*.sh) T(-exec) T(grep) T(--color) T(-Hn) T(your) T(text) T(to) T(find) T({}) T(2>/dev/null) T(;)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> FLAG(-f) FLAG(-amin) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(df) FLAG(-k) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(history) ARGUMENT(Quantity)<Quantity> UTILITY(cut) FLAG(-c) ARGUMENT(Number)<Number>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan> FLAG(-ls)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UTILITY(sed) ARGUMENT(Program)<Program> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(ls) ARGUMENT(File)<File> ARGUMENT({})<File> UTILITY(awk) ARGUMENT(Program)<Program> UTILITY(sort) UTILITY(tail) FLAG(-) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-exec::;) UTILITY(echo) ARGUMENT({})<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(echo) ARGUMENT({})<Regex>
ROOT() UTILITY(echo) FLAG(-e) COMMANDSUBSTITUTION() PIPELINE() UTILITY(echo) FLAG(-n) FLAG(-e) ARGUMENT(Regex)<Regex> UTILITY(wc) FLAG(-m)
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(read) FLAG(-r) FLAG(-d) ARGUMENT(Regex)<Regex>
"ROOT(root) T(ssh) T(askapache) T(sh) T(-c) T(""() NT(<n>) T(nohup) T(chown) T(-R) T(ask:ask) T(/www/askapache.com) T(&>/dev/null) T(&) T()"")"
ROOT() UTILITY(ln) ARGUMENT(File)<File> FLAG(-s)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-printf) ARGUMENT('%h\n')<Format> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(ls) FLAG(-l) ARGUMENT({})<File>
ROOT(root) T(find) T(data/) T(-name) T(filepattern-*2009*) T(|) T(cpio) T(-ov) T(--format=ustar) T(>) T(2009.tar)
ROOT(root) T(find) T(.) T(-name) T(‘*.mp4’) T(>>) T(/tmp/$$)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-ls)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(mv) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT(root) T(seq) T(Number) T(Number) T(|) T(sort) T(-R) T(|) T(tee) T(File) T(|) T(cat) T(<() T(cat) T(File)
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(tee) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) FLAG(-f) ARGUMENT({})<File>
ROOT(root) T(find) T(.) T(-type) T(f) T(!) T(-iregex) T(.\|./.git) T(-exec) T(perl) T(-i) T(-pe) T(s/$1/$upper2/gi) T({}) T(+)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UNARYLOGICOP(-prune) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
"ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-printf) ARGUMENT(""%y %p\n"")<Format>"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-group) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-user) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-atime) ARGUMENT(-Timespan)<Timespan> FLAG(-user) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(split) FLAG(-d) FLAG(-l) ARGUMENT(Quantity)<Quantity> ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
"ROOT() UTILITY(join) FLAG(-t) ARGUMENT(Regex)<Regex> FLAG(-o) ARGUMENT(1.1,1.2,2.3)<Format> FLAG(-a) ARGUMENT(Quantity)<Quantity> ARGUMENT(File)<File> ARGUMENT(File)<File>"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-inum) ARGUMENT(Quantity)<Quantity> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT(root) T(find) T(Path) T($() T(echo) T(Regex)
"ROOT(root) T(ps) T(-e) T(-orss=,args=) T(|) T(sort) T(-b) T(-k1,1n) T(|) T(pr) T(-TW$COLUMNS)"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune)
ROOT() UTILITY(mkdir) FLAG(-p) COMMANDSUBSTITUTION() PIPELINE() UTILITY(file) FLAG(-b) FLAG(--mime-type) ARGUMENT(File)<File> UTILITY(uniq)
ROOT(root) T(ln) T(-s) T(-f) T($() T(readlink) T(-f) T(File)
ROOT() PIPELINE() UTILITY(cal) FLAG(-h) UTILITY(cut) FLAG(-c) ARGUMENT(Number)<Number> UTILITY(tail) FLAG(-n) ARGUMENT(+Quantity)<Quantity> UTILITY(wc) FLAG(-w)
ROOT(root) T(IFS=$\n) T(read) T(-d) T(-ra) T(files) T(<) T(<(find) T(/foo) T(-name) T(*.txt))
ROOT(root) T(seq) T(10) T(|) T(xargs) T(-i) T(--max-procs=4) T(bash) T(-c) T(echo) T(start) T({};) T(sleep) T(3;) T(echo) T(done) T({})
ROOT() UTILITY(uname) FLAG(-i)
ROOT() UTILITY(mktemp) FLAG(--dry-run) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(jobs) FLAG(-l) UTILITY(tr) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(/var/www/vhosts/*/httpdocs) T(-type) T(f) NT(<n>) T(-iwholename) T(*/libraries/joomla/version.php) T(-o) T(-iwholename) T(*/libraries/cms/version.php) T(-o) T(-iwholename) T(*/libraries/cms/version/version.php) T(-print0) T(-exec) T(perl) T(-e) T(while) T((<>)) T({) T($release) T(=) T($1) T(if) T(m/) T(\$RELEASE\s+=) T(.([\d.]+).;/;) T($dev) T(=) T($1) T(if) T(m/) T(\$DEV_LEVEL\s+=) T(.(\d+).;/;) T(}) T(print) T(qq() T(=) T($release.$dev\n);) T({}) T(;)
ROOT(root) T(su) T(-) T(jetty) T(cp) T(file1) T(file2)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(sed) FLAG(-i) ARGUMENT(Program)<Program> ARGUMENT(File)<File>
ROOT() UTILITY(sed) FLAG(-i) ARGUMENT(Regex)<Program> ARGUMENT(Program)<File> ARGUMENT(File)<File>
ROOT(root) T(ionice) T(-c) T(3) T(find) T(.) T(-type) T(f) T(-amin) T(-1440) T(-mmin) T(+1441) T(-not) T(-path) T(custom/) T(-print0)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-exec::;) UTILITY(ls) FLAG(-l) FLAG(-h) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print)
ROOT() PIPELINE() UTILITY(yes) ARGUMENT(Regex)<Regex> UTILITY(head) FLAG(-n) ARGUMENT(Quantity)<Quantity> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(echo) ARGUMENT({})<Regex>
ROOT() PIPELINE() UTILITY(yes) ARGUMENT(Regex)<Regex> UTILITY(head) FLAG(-) ARGUMENT(Quantity)<Quantity> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-exec::;) UTILITY(du) FLAG(-s) FLAG(-h) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) BRACKET() FLAG(-type) ARGUMENT(f)<Type> FLAG(-mtime) ARGUMENT(Timespan)<Timespan> FLAG(-print0)
ROOT() UTILITY(rename) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(ls) FLAG(-l) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(od) FLAG(-c)
ROOT() UTILITY(grep) ARGUMENT(Regex)<Regex> COMMANDSUBSTITUTION() UTILITY(uname) FLAG(-r)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-print) UTILITY(wc) FLAG(-l)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-printf) ARGUMENT('%T@ %p\n')<Format> UTILITY(sort) FLAG(-n) UTILITY(tail) FLAG(-) ARGUMENT(Quantity)<Quantity> UTILITY(cut) FLAG(-f) ARGUMENT(Number)<Number> FLAG(-d) ARGUMENT(Regex)<Regex> UTILITY(sed) ARGUMENT(Program)<Program> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(ls) FLAG(-l) ARGUMENT({})<File>
ROOT() UTILITY(set) COMMANDSUBSTITUTION() UTILITY(od) FLAG(-j) ARGUMENT(Size)<Size> FLAG(-N) ARGUMENT(File)<File> FLAG(-t) ARGUMENT(u1)<Type> ARGUMENT(File)<File>
ROOT() UTILITY(sort) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> BRACKET() FLAG(-perm) ARGUMENT(-Permission)<Permission> BINARYLOGICOP(-or) FLAG(-perm) ARGUMENT(-Permission)<Permission> BRACKET() UNARYLOGICOP(!) FLAG(-type) ARGUMENT(-l)<Type> FLAG(-ls)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iregex) ARGUMENT(Regex)<Regex> FLAG(-iregex) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(zcat) ARGUMENT(Regex)<Regex> UTILITY(sed) FLAG(-n) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-ctime) ARGUMENT(+Timespan)<Timespan> FLAG(-print)
ROOT(root) T(find) T(.) T(-type) T(f) T(-printf) T(%s) T(+) T(|) T(dc) T(-e0) T(-f-) T(-ep)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::+) UTILITY(grep) FLAG(-H) FLAG(-n) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> UTILITY(wc) FLAG(-l)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iregex) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iregex) ARGUMENT(Regex)<Regex> UTILITY(head)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(diff) ARGUMENT(File)<File> UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(basename) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
"ROOT() UTILITY(rsync) FLAG(-r) FLAG(-c) FLAG(-n) FLAG(--out-format) ARGUMENT(""%n"")<Format> ARGUMENT(File)<File> ARGUMENT(File)<File>"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(sed) FLAG(-i) ARGUMENT(Program)<Program> ARGUMENT({})<File>
ROOT(root) T(rm) T($(<xaa))
ROOT(root) T(tempfile=XXX-$(od) T(-N4) T(-tu) T(/dev/random) T(|) T(awk) T(NR==1) T({print) T($2}) T({}))
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(ls) FLAG(-l) FLAG(-r) FLAG(-t) ARGUMENT({})<File> UTILITY(awk) FLAG(-F) ARGUMENT(Regex)<Regex> ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> ARGUMENT(File)<File> UTILITY(sort) FLAG(-t) ARGUMENT(Regex)<Regex> FLAG(-k) ARGUMENT(Number)<Number>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(chown) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(d)<Type>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(mv) FLAG(-v) ARGUMENT({})<File> ARGUMENT(File)<File>
"ROOT(root) T(find) T(.) T(-type) T(f) T(-exec) T(sh) T(-c) T(cp) T(""$@"") T(/tmp) T({}) T(+)"
ROOT(root) T(find) T(/path/to/file) T(-type) T(f) T(-size) T(+51200c) T(2>/dev/null)
ROOT(root) T(ssh) T(-N) T(-i) T(<() T(echo) T(Regex)
ROOT(root) T(screen) T(-list)
ROOT(root) T(find) T(/students) T(-type) T(l) T(-print) T(2>) T(/dev/null)
ROOT(root) T(comm) T(-1) T(-2) T(<() T(find) T(Path) T(-maxdepth) T(Quantity)
ROOT(root) T(find) T(-name) T(*.flac) T(-exec) T(ffmpeg) T(-i) T({}) T(-acodec) T(libmp3lame) T(-ab) T(128k) T({}.mp3) T(;)
ROOT() PIPELINE() UTILITY(du) FLAG(-s) ARGUMENT(File)<File> UTILITY(read) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-type) ARGUMENT(d)<Type> FLAG(-printf) ARGUMENT(':%p')<Format>
ROOT(root) T(ssh) T(-n) T(-f) T(user@host) T(sh) T(-c) T('cd) T(/whereever;) T(nohup) T(./whatever) T(>) T(/dev/null) T(2>&1) T(&')
ROOT(root) T(find) T(.) T(2>/dev/null) T(>) T(some_file)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-printf) ARGUMENT('%h\n')<Format>
ROOT() UTILITY(comm) FLAG(-2) FLAG(-3) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(file) ARGUMENT(File)<File>
ROOT(root) T(find) T(.) T(-name) T(*.txt) T(-exec) T(process) T({}) T(;)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(cp) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT(root) T(ssh) T($USER@$SERVER) T(cd) T(${REMOTE_PATH};) T(mkdir) T(-p) T($i) T(<) T(/dev/null)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-r) FLAG(-I) ARGUMENT({})<Regex> UTILITY(ls) FLAG(-t) FLAG(-c) ARGUMENT({})<File> UTILITY(head) FLAG(-n) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-regex) ARGUMENT(Regex)<Regex>
ROOT(root) T(for) T(D) T(in) T(`find) T(.) T(-iname) T(*.php~`;) T(do) T(mv) T(${D}) T(/mydir;) T(done)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(!) FLAG(-type) ARGUMENT(d)<Type> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(wc) FLAG(-c) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::+) UTILITY(sed) FLAG(-n) ARGUMENT(Program)<Program> ARGUMENT(File)<File>
ROOT() UTILITY(scp) FLAG(-P) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> ARGUMENT(File)<File> ARGUMENT(File)<File> ARGUMENT(File)<File> ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(+Size)<Size>
ROOT(root) T(find) T(.) T(-exec) T(grep) T(-l) T(-e) T(myregex) T({}) T(;) T(>>) T(outfile.txt)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-H) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-gid) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(mkdir) ARGUMENT(Directory)<Directory> UTILITY(sed) FLAG(-e) ARGUMENT(Program)<Program>
ROOT(root) T(shift) T(`expr) T($#) T(-) T(1`)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT(root) T(rpm2cpio) T(libstdc++-4.9.2-1.fc21.x86_64.rpm) T(|cpio) T(-idmv)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(sort) FLAG(-t) ARGUMENT(Regex)<Regex> FLAG(-V) FLAG(-k) ARGUMENT(Number)<Number>
ROOT(root) T(watch) T(--interval=10) T(lynx) T(-dump) T(http://dslrouter/stats.html)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-atime) ARGUMENT(+Timespan)<Timespan> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(hostname) FLAG(-f)
"ROOT(root) T(find) T(PDFs/) T(-name) T(*.pdf) T(-exec) T(sh) T(-c) T(pdftotext) T(""{}"") T(-) T(|) T(grep) T(-l) T(-i) T(--with-filename) T(--label=""{}"") T(--color) T(""perry) T(sound"") T(;)"
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(dig) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-v) ARGUMENT(Regex)<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-daystart) FLAG(-ctime) ARGUMENT(-Timespan)<Timespan>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-exec::;) UTILITY(echo) ARGUMENT({})<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> ARGUMENT(Path)<Path>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(-Size)<Size>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-newermt) ARGUMENT(Regex)<Regex> UNARYLOGICOP(!) FLAG(-newermt) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(chmod) FLAG(-R) ARGUMENT(+Permission)<Permission> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-delete)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(gzip) FLAG(-d) FLAG(--stdout) ARGUMENT(Regex)<Regex> UTILITY(bash) FLAG(-s) OPERATOR(--) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> ARGUMENT(Path)<Path> UNARYLOGICOP(!) FLAG(-size) ARGUMENT(Size)<Size> FLAG(-exec::;) UTILITY(sed) FLAG(-n) ARGUMENT(Program)<Program> ARGUMENT({})<File> FLAG(-print)
ROOT(root) T(ssh) T(-o) T(ConnectTimeout=10) T(<hostName>)
ROOT(root) T(comm) T(-1) T(-2) T(<() T(sort) T(File)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rename) ARGUMENT(Regex)<Regex> ARGUMENT({})<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) FLAG(-regex) ARGUMENT(Regex)<Regex>
ROOT(root) T(sudo) T(find) T(-name) T(*[!0-9][1-9].txt) T(-exec) T(chmod) T(744) T(*) T({}) T(;) T(-a) T(-exec) T(ls) T(-l) T({}) T(;) T(|) T(sort) T(|) T(parallel) T(ls) T(-l)
ROOT() UTILITY(ssh) FLAG(-i) ARGUMENT(File)<File> FLAG(-T) FLAG(-N) FLAG(-L) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-newermt) ARGUMENT(Regex)<Regex> UNARYLOGICOP(!) FLAG(-newermt) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-path) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(ln) FLAG(-s) FLAG(-f) FLAG(-v) FLAG(-n) ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(gzip) FLAG(-k) FLAG(-r) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-iwholename) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(grep) FLAG(-H) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(mv) FLAG(-t) ARGUMENT(Directory)<Directory> ARGUMENT(File)<File> ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-empty) FLAG(-exec::;) UTILITY(rmdir) ARGUMENT({})<Directory>
ROOT(root) T(find) T(.) T(-print|xargs) T(command)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-E) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(top) FLAG(-b) FLAG(-d) ARGUMENT(Timespan)<Timespan> UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(tee) ARGUMENT(File)<File>
ROOT(root) T(paste) T(-d) T(Regex) T(<() T(sed) T(-n) T(Program) T(File)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(+Size)<Size>
ROOT() UTILITY(read) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(.) T(-name) T(*.jar) T(-exec) T(jar) T(-tf) T({}) T(;|grep) T(message_track.properties)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> BRACKET() UNARYLOGICOP(!) FLAG(-wholename) ARGUMENT(Regex)<Regex> UNARYLOGICOP(!) FLAG(-wholename) ARGUMENT(Regex)<Regex>
ROOT(root) T(mount) T(--bind) T(olddir) T(newdir)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(chsh) T(-s) T($(which) T(zsh))
ROOT(root) T(find) T(./) T(-type) T(f) T(-exec) T(wc) T(-l) T({}) T(;) T(|) T(cut) T(-d) T(-f1) T(|) T(paste) T(-sd+) T(|) T(bc)
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(wc) FLAG(-l)
ROOT(root) T(mount) T(|) T(grep) T($(blkid) T(-U) T(09b8f1ab-8d4b-4c5f-b395-40be09c090b0))
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rsync) FLAG(-a) FLAG(-v) FLAG(-R) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT(root) T(diff) T(-r) T(dir1) T(dir2) T(|) T(grep) T(Only) T(in) T(|) T(grep) T(dir1) T(|) T(awk) T({print) T($4}) T(>) T(difference1.txt)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-group) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(${START_DIR})<Path> FLAG(-mtime) ARGUMENT(-${DAYS})<Timespan> UTILITY(xargs) FLAG(-I) ARGUMENT({})<ReservedWord> UTILITY(stat) FLAG(-c) ARGUMENT(%s)<Regex> ARGUMENT({})<ReservedWord> UTILITY(awk) ARGUMENT({sum)<Program> ARGUMENT(+=)<Program> ARGUMENT($1}END{print)<Program> ARGUMENT(sum})<Program>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() UTILITY(ls) FLAG(-d) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-xdev) FLAG(-samefile) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-lname) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(-prune) FLAG(-cmin) ARGUMENT(+Quantity)<Quantity> FLAG(-print) UTILITY(grep) FLAG(-q) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
"ROOT(root) T(su) T(-s) T(/bin/bash) T(-c) T(bash) T(--rcfile) T(<(echo) T(""source) T(~/.bashrc;) T(source) T(myfile""))"
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(cat) ARGUMENT(File)<File> ARGUMENT(File)<File> UTILITY(tee) ARGUMENT(File)<File>
"ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-printf) ARGUMENT(""\n%Ab %p"")<Format> UTILITY(head) FLAG(-n) ARGUMENT(Quantity)<Quantity>"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(.)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(*.html)<Regex> UTILITY(zip) FLAG(-j) ARGUMENT(all-html-files)<File> FLAG(-@)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-group) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT(root) T(sudo) T(su) T(-c) T(ls) T(-hal) T(/root/) T(>) T(/root/test.out)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-exec::+) UTILITY(rm) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-empty) FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rmdir) ARGUMENT({})<Directory>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(grep) FLAG(-H) FLAG(-F) FLAG(-f) ARGUMENT(Regex)<File> ARGUMENT({})<Regex>
ROOT(root) T(curl) T(-v) T(--get) T(--data-urlencode) T(access_token=$(cat) T(.fb_access_token)) T(https://graph.facebook.com/me/feed)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type> FLAG(-print0)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(!) FLAG(-path) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-atime) ARGUMENT(-Timespan)<Timespan> FLAG(-print)
ROOT() UTILITY(printf) ARGUMENT(%02d)<Format> COMMANDSUBSTITUTION() UTILITY(seq) ARGUMENT(1)<Number> ARGUMENT(30)<Number>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iregex) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(d)<Type> FLAG(-exec::;) UTILITY(rm) FLAG(-r) FLAG(-f) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(basename) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(yes) UTILITY(rm)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(grep) FLAG(-H) FLAG(-i) FLAG(-n) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT(root) T(cd) T(/nfs//office/) T(&&) T(find) T(.) T(-name) T(.user.log)
ROOT() PIPELINE() UTILITY(ping) FLAG(-c) ARGUMENT(Quantity)<Quantity> FLAG(-q) ARGUMENT(Regex)<Regex> UTILITY(tail) FLAG(-n) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(chown) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(watch) FLAG(-n) ARGUMENT(Quantity)<Quantity> FLAG(-t) COMMANDSUBSTITUTION() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UTILITY(grep) FLAG(-E) FLAG(-i) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-type) ARGUMENT(f)<Type> FLAG(-print)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT(root) T(seq) T(Number) T(Number) T(|) T(sort) T(-R) T(|) T(tee) T(File) T(|) T(cat) T(<() T(cat) T(File)
ROOT() PIPELINE() UTILITY(seq) ARGUMENT(Number)<Number> ARGUMENT(Number)<Number> UTILITY(head) FLAG(-) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-type) ARGUMENT(f)<Type> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-delete)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-atime) ARGUMENT(+Timespan)<Timespan> FLAG(-print)
ROOT() UTILITY(rsync) FLAG(-a) FLAG(-v) FLAG(--files-from) ARGUMENT(File)<File> FLAG(--rsync-path) ARGUMENT(Program)<Program> ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print) FLAG(-exec::;) UTILITY(awk) ARGUMENT(Program)<Program> ARGUMENT({})<Program>
ROOT(root) T(find) T(.) T(-name) T(*.py) T(-exec) T(grep) T(something) T({}) T(;) T(>) T(output.txt)
ROOT(root) T(curl) T(http://www.multitran.ru/c/m.exe?CL=1&s=hello&l1=1) T(|) T(iconv) T(-f) T(windows-1251) T(|) T(tr) T(-dc) T([:print:])
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(ping) FLAG(-c) ARGUMENT(Quantity)<Quantity> FLAG(-q) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-o) FLAG(-P) ARGUMENT(Regex)<Regex>
ROOT(root) T(export) T(git=$(which) T(git))
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) FLAG(-f) ARGUMENT({})<File>
ROOT(root) T(find) T($DIR_TO_CLEAN) T(-type) T(-f) T(-mtime) T(+$DAYS_TO_SAVE) T(-exec) T(rm) T({}) T(;) T(-exec) T(printf) T(.) T(;) T(|) T(wc) T(-c)
ROOT() UTILITY(chown) FLAG(-R) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> ARGUMENT(File)<File> ARGUMENT(File)<File> ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-print)
ROOT() UTILITY(ln) FLAG(-s) ARGUMENT(File)<File> FLAG(-t) ARGUMENT(Directory)<Directory>
ROOT() PIPELINE() UTILITY(ls) FLAG(-d) FLAG(-1) ARGUMENT(File)<File> UTILITY(cat) FLAG(-n)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(echo) ARGUMENT({})<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-empty)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-print0) UTILITY(cpio) FLAG(-d) FLAG(-u) FLAG(-m) FLAG(-p) FLAG(-l) FLAG(-0) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-v) ARGUMENT(Regex)<Regex> UTILITY(tr) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(tar) FLAG(-c) FLAG(-f) ARGUMENT(File)<File> ARGUMENT({})<File>
ROOT(root) T(alias) T(cd-=cd) T(${${(z)$(fc) T(-l) T(-1)}[3]})
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(nl)
"ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-newermt) ARGUMENT(Regex)<Regex> UNARYLOGICOP(!) FLAG(-newermt) ARGUMENT(Regex)<Regex> FLAG(-printf) ARGUMENT(""%T+\t%p\n"")<Format> UTILITY(sort)"
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-q) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type> FLAG(-execdir::;) UTILITY(tar) FLAG(-z) FLAG(-c) FLAG(-p) FLAG(-v) FLAG(-f) ARGUMENT(File)<File> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rmdir) ARGUMENT({})<Directory>
ROOT() PIPELINE() UTILITY(grep) FLAG(-o) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> UTILITY(sort) FLAG(-f) UTILITY(uniq) FLAG(-i) FLAG(-c)
ROOT(root) T($) T(find) T(.) T(-name) T(*mp3) T(-print0) T(|) T(xargs) T(-0) T(mid3iconv) T(-e) T(EUR-KR) T(-d)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> BRACKET() FLAG(-perm) ARGUMENT(-Permission)<Permission> BINARYLOGICOP(-or) FLAG(-perm) ARGUMENT(-Permission)<Permission> FLAG(-ls)
ROOT() UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT(File)<File>
ROOT() UTILITY(mkdir) ARGUMENT(Directory)<Directory>
ROOT(root) T(find) T(Path) T(-name) T(Regex) T(|) T(grep) T(-f) T(<() T(sed) T(Program) T(File)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(wc) FLAG(-w) ARGUMENT({})<File> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(readlink) FLAG(--canonicalize) FLAG(--no-newline) ARGUMENT(File)<File>
"ROOT() UTILITY(mkdir) FLAG(-p) COMMANDSUBSTITUTION() UTILITY(seq) FLAG(-f) ARGUMENT(""weekly.%.0f"")<Format> ARGUMENT(Number)<Number> ARGUMENT(Number)<Number>"
"ROOT(root) T(find) T(../<dirname>) T(-name) T(*.jpg) T(-exec) T(sh) T(-c) T(mv) T(""$0"") T(""$(basename) T($(dirname) T($0))-${0%.JPG}$.jpg"") T({}) T(;)"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-exec::;) UTILITY(basename) ARGUMENT({})<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path>
ROOT() PIPELINE() UTILITY(set) UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(sed) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-path) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::+) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File> BINARYLOGICOP(-or) FLAG(-type) ARGUMENT(d)<Type> FLAG(-exec::+) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(mv) FLAG(-t) ARGUMENT(Directory)<Directory> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) FLAG(-r) FLAG(-f) ARGUMENT({})<File>
ROOT(root) T(fold) T(-w) T(76) T(-s) T(file.txt) T(|) T(pr) T(-T) T(--indent=4)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) FLAG(-r) FLAG(-f) ARGUMENT({})<File>
ROOT() UTILITY(ssh) FLAG(-p) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(.) T(-name) T(*.txt) T(-not) T(-name) T(all.txt) T(|) T(xargs) T(cat) T(>) T(all.txt)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(grep) FLAG(-E) FLAG(-l) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(split) FLAG(-b) ARGUMENT(Size)<Size> ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(kill) COMMANDSUBSTITUTION() UTILITY(jobs) FLAG(-l) FLAG(-p)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> ARGUMENT(Path)<Path>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-amin) ARGUMENT(-Quantity)<Quantity>
ROOT() UTILITY(tee)
ROOT(root) T(find) T(.) T(-maxdepth) T(1) T(-type) T(d) T(-print) T(|) T(parallel) T(-X) T(echo) T(Directories:)
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number>
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(env) ARGUMENT(Program)<Program> ARGUMENT(Program)<Program> ARGUMENT(Program)<Program> ARGUMENT(Program)<Program> UTILITY(head) FLAG(-c) ARGUMENT(Quantity)<Quantity>
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(mv) FLAG(-t) ARGUMENT(Directory)<Directory> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-ignore_readdir_race) FLAG(-lname) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(touch) FLAG(-c) ARGUMENT({})<File>
ROOT(root) T(find) T(/) T(-uid) T(1005) T(2>/dev/null)
ROOT() UTILITY(df) FLAG(-k) ARGUMENT(File)<File>
ROOT() UTILITY(mktemp) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(s)<Type>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-xdev) FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(grep) FLAG(-l) FLAG(-i) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-delete)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-print)
"ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-printf) ARGUMENT(""%h/%f : dernier accès le %Ac\n"")<Format>"
ROOT() UTILITY(sort) FLAG(-u) FLAG(-t) ARGUMENT(Regex)<Regex> FLAG(-k) ARGUMENT(Number)<Number> FLAG(-k) ARGUMENT(Number)<Number> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(diff) FLAG(-r) FLAG(-q) FLAG(-x) ARGUMENT(File)<Regex> FLAG(-x) ARGUMENT(Regex)<Regex> FLAG(-x) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> ARGUMENT(File)<File> UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(diff) FLAG(--brief) FLAG(-r) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT(root) T(alias) T(-p) T(|) T(cut) T(-d=) T(-f1) T(|) T(cut) T(-d) T(-f2)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(grep) FLAG(-I) FLAG(-q) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> BINARYLOGICOP(-and) FLAG(-print)
ROOT(root) T(yes) T(>) T(backingfile) T(&)
ROOT() UTILITY(ssh) ARGUMENT(Regex)<Regex> FLAG(-L) ARGUMENT(Regex)<Regex> FLAG(-N)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number>
ROOT() UTILITY(chown) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> UTILITY(sed) FLAG(-e) ARGUMENT(Program)<Program> UTILITY(awk) ARGUMENT(Program)<Program> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(chgrp) ARGUMENT({})<Regex>
ROOT(root) T(find) T(/path/to/files) T(-iname) T(*.jpg) T(-exec) T(mogrify) T(-format) T(pdf) T({}) T(+)
ROOT() UTILITY(chown) ARGUMENT(Regex)<Regex> FLAG(-R) ARGUMENT(File)<File>
"ROOT(root) T(cal) T($() T(date) T(+""%m) T(%Y"")"
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(sed) FLAG(-i) ARGUMENT(Program)<Program> ARGUMENT({})<File>
ROOT() UTILITY(od) FLAG(-c) FLAG(-A) ARGUMENT(n)<Option>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-daystart) FLAG(-mtime) ARGUMENT(-Timespan)<Timespan> FLAG(-ls)
ROOT() PIPELINE() UTILITY(tac) ARGUMENT(File)<File> UTILITY(awk) ARGUMENT(Program)<Program> UTILITY(tac)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) FLAG(-f) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-mtime) ARGUMENT(Timespan)<Timespan> FLAG(-ls)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(.) T(-mtime) T(-1.5) T(|) T(xargs) T(tar) T(--no-recursion) T(-czf) T(myfile.tgz)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UNARYLOGICOP(-not) FLAG(-path) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-not) FLAG(-path) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(.) T(-iname) T(.*) T(-exec) T(bash) T(-c) T(fgrep) T({}) T(/tmp/list_files) T(>/dev/null) T(||) T(rm) T(-i) T({}) T(;)
ROOT() PIPELINE() UTILITY(env) UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(head) FLAG(-) ARGUMENT(Quantity)<Quantity> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-cmin) ARGUMENT(-Quantity)<Quantity>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT(root) T(yum) T(-v) T(repolist) T(enabled)
ROOT() UTILITY(tee) ARGUMENT(File)<File>
ROOT() UTILITY(shopt) FLAG(-s) ARGUMENT(nocasematch)<Option>
ROOT() PIPELINE() UTILITY(echo) FLAG(-n) ARGUMENT(Regex)<Regex> UTILITY(tr) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(tree) FLAG(-d)
ROOT() PIPELINE() UTILITY(file) ARGUMENT(File)<File> UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-wholename) ARGUMENT(Regex)<Regex> UTILITY(awk) ARGUMENT(Program)<Program>
"ROOT() UTILITY(mount) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT(Directory)<Directory> FLAG(-o) ARGUMENT(rw,uid=test,gid=test)<Option>"
ROOT(root) T(ipcs) T(-mb) T(|) T(awk) T(NR) T(>) T(3) T({) T(print) T($7) T(}) T(|) T(paste) T(-sd+) T(|) T(bc)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(d)<Type> FLAG(-delete)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(ls) FLAG(-s) ARGUMENT({})<File> UTILITY(sort) FLAG(-n) FLAG(-r)
ROOT() UTILITY(bzip2) FLAG(-k) FLAG(-v) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(cat) FLAG(-v) FLAG(-e) FLAG(-t) ARGUMENT(File)<File> UTILITY(less)
ROOT() PIPELINE() UTILITY(nl) FLAG(-s) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> UTILITY(cut) FLAG(-c) ARGUMENT(Number)<Number>
ROOT() PIPELINE() UTILITY(man) ARGUMENT(Regex)<Regex> UTILITY(less) FLAG(-I) FLAG(-p) ARGUMENT(File)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan>
ROOT() UTILITY(dig) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT(o-o.myaddr.l.google.com)<Type> ARGUMENT(@ns1.google.com)<Option>
ROOT() PIPELINE() UTILITY(crontab) FLAG(-u) ARGUMENT(Regex)<Regex> FLAG(-l) UTILITY(sed) ARGUMENT(Program)<Program> UTILITY(crontab) FLAG(-u) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT(root) T(yum) T(list) T(zsh)
"ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-printf) ARGUMENT(""%T+ %p\n"")<Format>"
ROOT() PIPELINE() UTILITY(env) UTILITY(awk) FLAG(-F) ARGUMENT(Regex)<Regex> ARGUMENT(Program)<Program> UTILITY(sort) UTILITY(uniq)
ROOT() PIPELINE() UTILITY(sort) FLAG(-n) FLAG(-k) ARGUMENT(File)<Number> ARGUMENT(File)<File> UTILITY(tac)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(df) T(-h) T(-B) T(1M) T(|) T(grep) T(dev/sda) T(|) T(tr) T(-s) T(|) T(cut) T(-d) T(-f3) T(|python) T(-c) T(import) T(sys;) T(print) T(sum([int(num)) T(for) T(num) T(in) T(sys.stdin.readlines()]))
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-print) UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(-exec) T(<script>) T({};)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-user) ARGUMENT(Regex)<Regex> FLAG(-perm) ARGUMENT(-Permission)<Permission> FLAG(-exec::;) UTILITY(ls) FLAG(-l) ARGUMENT({})<File>
ROOT() UTILITY(cal)
ROOT(root) T(yum) T(install) T(mysql)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UTILITY(wc) FLAG(-l)
ROOT(root) T(comm) T(-3) T(<(printf) T(%s\n) T(*/) T(|) T(sed) T(s|/.*||) T(|) T(sort)) T(<(find) T(*/) T(-type) T(d) T(-name) T(bin) T(|) T(cut) T(-d/) T(-f1) T(|) T(uniq))
ROOT() UTILITY(find) ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(pv) T(data.gz) T(|) T(gunzip) T(-c) T(|) T(./complicated-perl-script-that-reads-stdin)
ROOT(root) T(yum) T(provides) T(zsh)
"ROOT(root) T(find) T(PDFs/) T(-name) T(*.pdf) T(-exec) T(sh) T(-c) T(pdftotext) T(""{}"") T(-) T(|) T(grep) T(-l) T(-Z) T(-i) T(--with-filename) T(--label=""{}"") T(--color) T(""perry) T(sound"") T(|) T(xargs) T(-0) T(-I{}) T(cp) T(-v) T({}) T(Found/) T(;)"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> ARGUMENT(Path)<Path>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-n) ARGUMENT(Quantity)<Quantity> FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-H) FLAG(-n) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> BRACKET() FLAG(-type) ARGUMENT(d)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-print0)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan>
ROOT() PIPELINE() UTILITY(more) ARGUMENT(File)<File> UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(mktemp)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-print)
ROOT() UTILITY(chown) OPERATOR(--) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT() UTILITY(tr) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> UNARYLOGICOP(-prune) FLAG(-empty)
ROOT(root) T(yes) T(Hidden) T(|) T(tr) T(\n) T(\0) T(|) T(dd) T(of=/dev/sdb)
ROOT() PIPELINE() UTILITY(set) UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type>
ROOT() PIPELINE() UTILITY(tail) FLAG(-f) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(--line-buffered) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(file) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
ROOT(root) T(sort) T(<(cd) T($CURR_DIR) T(&&) T(find) T(.) T(-type) T(f) T(-ctime) T($FTIME)) T(<(cd) T($CURR_DIR) T(&&) T(find) T(.) T(-type) T(f) T(-atime) T($FTIME)) T(<(cd) T($CURR_DIR) T(&&) T(find) T(.) T(-type) T(f) T(-mtime) T($FTIME)) T(|) T(uniq)
ROOT() UTILITY(gzip) FLAG(-l) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-regex) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(d)<Type>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-links) ARGUMENT(+Quantity)<Quantity>
ROOT(root) T(find) T(.) T(-name) T(“*.jpg”) T(|) T(xargs) T(gimp)
ROOT() UTILITY(mount) FLAG(-o) ARGUMENT(loop)<Option> ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(zcat) ARGUMENT(Regex)<Regex> UTILITY(tar) ARGUMENT(-File)<File>
ROOT(root) T(cat) T(file.txt) T(|) T(xargs) T(|) T(sed) T(-e) T(s/\) T(/+/g) T(|) T(bc)
ROOT() PIPELINE() UTILITY(sed) FLAG(-e) ARGUMENT(Program)<Program> ARGUMENT(Program)<Program> UTILITY(column) FLAG(-t) FLAG(-s) ARGUMENT(Regex)<Regex> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(comm) FLAG(-1) FLAG(-2) ARGUMENT(File)<File> ARGUMENT(File)<File> UTILITY(wc) FLAG(-l)
ROOT() UTILITY(ssh-keygen) FLAG(-p) FLAG(-f) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-exec::;) UTILITY(grep) FLAG(-l) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-newer) ARGUMENT(File)<File> FLAG(-print)
ROOT(root) T(find) T(.) T(-type) T(f) T(|) T(egrep) T((sdw|sdc|sdd)$) T(>) T(list_1)
ROOT() PIPELINE() UTILITY(zcat) ARGUMENT(Regex)<Regex> UTILITY(sed) FLAG(-e) ARGUMENT(Program)<Program>
ROOT(root) T(rsync) T(-e) T(ssh) T(file) T(host:/directory/.)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::+) UTILITY(ln) FLAG(-s) ARGUMENT({})<File> ARGUMENT(Regex)<Regex> ARGUMENT(Path)<Path>
ROOT() PIPELINE() UTILITY(od) FLAG(-t) ARGUMENT(x2)<Type> FLAG(--skip-bytes) ARGUMENT(Size)<Size> FLAG(--read-bytes) ARGUMENT(Size)<Size> ARGUMENT(File)<File> UTILITY(head) FLAG(-) ARGUMENT(Quantity)<Quantity> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT(root) T(find) T(.) T(-maxdepth) T(1) T(-type) T(d) T(-print) T(|) T(parallel) T(echo) T(Directory:) T({})
ROOT() PIPELINE() UTILITY(paste) ARGUMENT(File)<File> ARGUMENT(File)<File> UTILITY(column) FLAG(-s) ARGUMENT(Regex)<Regex> FLAG(-t)
ROOT(root) T(find) T(.) T(-name) T(*.sql) T(-exec) T(scriptname) T({}) T(+)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-printf) ARGUMENT('%h\0')<Format> UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(find) ARGUMENT({})<Path> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-printf) ARGUMENT('%h\n')<Format> UTILITY(sort) FLAG(-u)
ROOT() PIPELINE() UTILITY(md5sum) ARGUMENT(File)<File> UTILITY(sort) UTILITY(uniq) FLAG(-d)
ROOT() PIPELINE() UTILITY(which) FLAG(-a) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(file) FLAG(-L) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(yes) UTILITY(head) FLAG(-n) ARGUMENT(Quantity)<Quantity> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(d)<Type>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(!) BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-exec::;) UTILITY(rm) FLAG(-f) ARGUMENT({})<File>
ROOT(root) T(find) T(trunk) T(-type) T(f) T(-exec) T(curl) T(--user) T(user:pass) T(--ftp-create-dirs) T(-T) T({}) T(https://PATH_TO_NEXUS/{}) T(;)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> UTILITY(tee) ARGUMENT(File)<File> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(compress) ARGUMENT({})<File>
ROOT(root) T(echo) T($() T(date)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> UTILITY(sort) UTILITY(head) FLAG(-n) ARGUMENT(Quantity)<Quantity>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(ls) FLAG(-l) ARGUMENT({})<File>
ROOT() UTILITY(bind) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(chmod) FLAG(-R) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
"ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-printf) ARGUMENT(""%i \n"")<Format>"
ROOT() PIPELINE() UTILITY(sort) UTILITY(uniq) FLAG(-u) UTILITY(xargs) FLAG(-r) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
ROOT(root) T(command) T(|) T(wc) T(-l)
ROOT() UTILITY(pushd) COMMANDSUBSTITUTION() UTILITY(pwd)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-delete)
ROOT() PIPELINE() UTILITY(yes) UTILITY(nl) FLAG(-b) ARGUMENT(a)<Option> UTILITY(tr) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> UTILITY(sed) ARGUMENT(Program)<Program> UTILITY(cut) FLAG(-b) ARGUMENT(Number)<Number>
ROOT() UTILITY(tar) FLAG(-x) FLAG(-v) FLAG(-f) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT(root) T(ps) T(aux) T(|) T(grep) T(postgres)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(set) FLAG(-e) FLAG(-u)
ROOT() UTILITY(find) FLAG(-type) ARGUMENT(d)<Type> ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> ARGUMENT({})<Path> ARGUMENT(+)<Path>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(!) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(tar) FLAG(-r) FLAG(-v) FLAG(-f) ARGUMENT(File)<File> ARGUMENT({})<File>
ROOT(root) T(export) T(JAVA_HOME=$(readlink) T(-f) T(/usr/bin/javac) T(|) T(sed) T(s:/bin/javac::))
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-perm) ARGUMENT(Permission)<Permission> FLAG(-exec::;) UTILITY(echo) ARGUMENT(Regex)<Regex> ARGUMENT({})<Regex> FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT(root) T(unset) T(-v) T(latest)
ROOT(root) T(zcat) T(archive.tgz) T(|) T(tar) T(-x) T(--wildcards) T(apri/fls/filename)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-newerct) ARGUMENT(Regex)<Regex> UNARYLOGICOP(!) FLAG(-newerct) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(read) FLAG(-e) FLAG(-p) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(ls) FLAG(-h) FLAG(-a) FLAG(-l) ARGUMENT(File)<File> UTILITY(tee) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT(root) T(mate) T(`which) T(rails`)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mmin) ARGUMENT(-Quantity)<Quantity> BRACKET() UNARYLOGICOP(!) FLAG(-regex) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(wc) FLAG(-l)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-exec::+) UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-ls)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type> FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-delete)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-r) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-F) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(rev) ARGUMENT(File)<File> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-ls)
ROOT() UTILITY(fold) FLAG(-w) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(hostname) FLAG(-I)
ROOT() PIPELINE() UTILITY(tac) ARGUMENT(File)<File> UTILITY(awk) ARGUMENT(Program)<Program> UTILITY(tac)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-perm) ARGUMENT(Permission)<Permission> FLAG(-exec::;) UTILITY(echo) ARGUMENT(Regex)<Regex> ARGUMENT({})<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(!) FLAG(-wholename) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(.) T(|) T(xargs) T(-I{}) T(printf) T(%s%s\n) T({}) T({})
ROOT(root) T(chown) T($() T(whoami)
"ROOT(root) T([) T(`md5sum) T($(which) T(c++)) T(|) T(cut) T(-d) T(-f1`) T(==) T(`md5sum) T($(which) T(g++)) T(|) T(cut) T(-d) T(-f1`) T(]) T(&&) T(echo) T(Yes,) T(equal) T(content) T(||) T(echo) T(No,) T(unequal) T(content)"
ROOT(root) T(find) T(${INPUT}/) T(-name) T(*.pdf) T(-exec) T(test) T(-e) T({}.marker) T(;) T(-exec) T(mv) T({}) T({}.marker) T(${OUTPUT}) T(;)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-n) ARGUMENT(Quantity)<Quantity> FLAG(-I) ARGUMENT({})<Regex> UTILITY(ls) FLAG(-l) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(sed) FLAG(-i) ARGUMENT(Program)<Program> ARGUMENT({})<File>
ROOT(root) T(ssh) T(-tt) T(foo) T(./script.py)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(read) FLAG(-t) ARGUMENT(Quantity)<Quantity> FLAG(-p) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(Path) T($() T(echo) T(Regex)
ROOT(root) T(env) T(-i) T(bash) T(--norc)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> ARGUMENT(Path)<Path> UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(history) UTILITY(grep) FLAG(-A) ARGUMENT(Quantity)<Quantity> FLAG(-B) ARGUMENT(Quantity)<Quantity> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(+Size)<Size>
ROOT() UTILITY(ln) FLAG(-s) FLAG(-f) FLAG(-n) ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::+) UTILITY(bzip2) ARGUMENT({})<File>
ROOT() UTILITY(watch) UTILITY(ls) FLAG(-l)
ROOT() UTILITY(nl) FLAG(-n) ARGUMENT(rz)<Format> FLAG(-w) ARGUMENT(Quantity)<Quantity> ARGUMENT(File)<File>
ROOT(root) T(cat) T(blah.gz) T(|) T(gunzip) T(|) T(some_command)
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(sed) ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(sed) FLAG(-i) ARGUMENT(Program)<Program> ARGUMENT(File)<File> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(ls) FLAG(-l) ARGUMENT({})<File>
ROOT() UTILITY(split) FLAG(-n) ARGUMENT(Quantity)<Quantity> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(Permission)<Permission>
ROOT() UTILITY(read) FLAG(-t) ARGUMENT(Quantity)<Quantity> FLAG(-n) ARGUMENT(Quantity)<Quantity> FLAG(-r) FLAG(-p) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(pstree) FLAG(-p) FLAG(-s) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-c) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(mkdir) FLAG(-p) ARGUMENT(Directory)<Directory>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-empty)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-newer) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
"ROOT(root) T(ps) T(-o) T(pid,bsdtime) T(--no-header) T(-p) T($(pgrep) T(renoise)) T(|) T(awk) T(function) T(mmss2s(s)) T({if) T((s) T(!~) T(/^[0-9][0-9][0-9]:[0-9][0-9]$/)) T(return) T(-1;) T(return) T(((60*substr(s,1,2))+substr(s,4,2))}) T({) T(if) T((mmss2s($2)) T(>) T(100)) T({) T(print) T($1;) T(}})"
ROOT() UTILITY(hostname)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(scp) FLAG(-o) ARGUMENT(StrictHostKeyChecking=no)<Option> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-size) ARGUMENT(Size)<Size> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
"ROOT(root) T(find) T(/PROD) T(-type) T(d) T(-execdir) T(sh) T(-c) T(for) T(f) T(in) T(*.json;) T(do) T(/tmp/test.py) T(""$f"";) T(done) T(;)"
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> UNARYLOGICOP(-not) FLAG(-path) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(cp) FLAG(-t) ARGUMENT(Directory)<Directory> ARGUMENT({})<File>
ROOT() UTILITY(cd) COMMANDSUBSTITUTION() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(sed) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-empty) FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-i) FLAG(-l) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-path) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT(root) T(ln) T(-s) T(-f) T($() T(readlink) T(-f) T(File)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan> FLAG(-exec::;) UTILITY(compress) ARGUMENT(File)<File> ARGUMENT({})<File>
ROOT() UTILITY(mount) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> FLAG(-o) ARGUMENT(bind)<Option>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> UTILITY(cpio) FLAG(-p) FLAG(-d) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(scp) FLAG(-P) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(df) ARGUMENT(File)<File> FLAG(-B) ARGUMENT(Size)<Size> UTILITY(tail) FLAG(-) ARGUMENT(Quantity)<Quantity> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT(root) T(echo) T(ee) T(|) T(tee) T(/dev/stderr) T(|) T(foo)
"ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-printf) ARGUMENT(""%s\n"")<Format> UTILITY(awk) ARGUMENT(Program)<Program>"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-exec::+) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() UTILITY(chown) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
"ROOT(root) T(find) T(~/container) T(-mindepth) T(3) T(-type) T(f) T(|) T(xargs) T(-i) T(bash) T(-c) T(mv) T(""{}"") T($(dirname) T(""{}"")/..)"
"ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-printf) ARGUMENT(""%h\n"")<Format> UTILITY(sort) UTILITY(uniq)"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) FLAG(-v) FLAG(-f) ARGUMENT({})<File>
"ROOT(root) T(ps) T(h) T(-o) T(pid,user) T(-C) T(ssh,sshd) T(|) T(tr) T(-s)"
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(Timespan)<Timespan> UNARYLOGICOP(-not) BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-path) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-path) ARGUMENT(Regex)<Regex>
ROOT(root) T(kill) T($(pgrep) T(python) T(csp_build.py))
ROOT() PIPELINE() UTILITY(yes) ARGUMENT(Regex)<Regex> UTILITY(sed) FLAG(-e) ARGUMENT(Program)<Program> FLAG(-e) ARGUMENT(Program)<Program>
"ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-printf) ARGUMENT(""%p\n"")<Format> UTILITY(sort) FLAG(-r) FLAG(-n) UTILITY(head) FLAG(-n) ARGUMENT(Quantity)<Quantity> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(cp) ARGUMENT({})<File> ARGUMENT(File)<File>"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() PIPELINE() UTILITY(mount) UTILITY(tail) FLAG(-) ARGUMENT(Quantity)<Quantity> UTILITY(sed) ARGUMENT(Program)<Program>
ROOT(root) T(find) T(.) T(-not) NT(<n>) T(-name) T(*.jpg) T(-prune) T(-o) T(-name) T(*.png) T(-prune) T(-o) T(-name) T(*.ttf) T(-prune) T(--type) T(f) T(-print0) T(|) T(xargs) T(-0) T(sed) T(-i) T(-E) T(s/[[:blank:]]+$//)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> BRACKET() FLAG(-type) ARGUMENT(f)<Type> BINARYLOGICOP(-or) FLAG(-type) ARGUMENT(d)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
"ROOT(root) T(octave) T(-q) T(--eval) T(printf) T((""%f\n"",) T(sin([0:0.1:pi/2]))|nl|tee) T(y.txt)"
ROOT() UTILITY(read) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> BRACKET() FLAG(-newer) ARGUMENT(File)<File> BINARYLOGICOP(-or) FLAG(-user) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() UTILITY(kill) FLAG(-) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(set) ARGUMENT(Regex)<Regex>
"ROOT(root) T(find) T(/) T(-type) T(f) T(-size) T(+20M) T(-exec) T(ls) T(-lh) T({}) T(;) T(2>) T(/dev/null) T(|) T(awk) T({) T(print) T($NF) T("":) T("") T($5) T(})"
ROOT(root) T(find) T(.) T(-name) T(*.ext) T(|) T(parallel) T(echo) T({}) T(`dirname) T({}`)
ROOT(root) T(find) T(.) T(-name) T($i) T(-type) T(f) T(-print) T(|) T(xargs) T(egrep) T(-n) T($SrchStr) T(>/dev/null)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mmin) ARGUMENT(-Quantity)<Quantity>
ROOT() UTILITY(ssh) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(comm) FLAG(-2) FLAG(-3) ARGUMENT(File)<File> ARGUMENT(File)<File> UTILITY(comm) FLAG(-2) FLAG(-3) ARGUMENT(File)<File> ARGUMENT(File)<File> UTILITY(comm) FLAG(-2) FLAG(-3) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(Permission)<Permission>
ROOT() PIPELINE() UTILITY(awk) FLAG(-f) ARGUMENT(File)<File> ARGUMENT(Program)<Program> ARGUMENT(Program)<Program> UTILITY(rev) UTILITY(column) FLAG(-t) UTILITY(rev)
ROOT(root) T(tmux) T(set-environment) T(-u) T(RBENV_VERSION)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(cat) ARGUMENT({})<File>
ROOT(root) T(tail) T(-n) T(100) T(file1) T(|) T(pv) T(|) T(wc) T(-l)
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-depth) FLAG(-type) ARGUMENT(d)<Type> FLAG(-empty) FLAG(-delete)
"ROOT() UTILITY(basename) ARGUMENT(Regex)<Regex> ARGUMENT(date)<Regex> ARGUMENT(""+%Y%m%d_%H%M"")<Regex>"
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> UTILITY(grep) FLAG(-v) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-path) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-l) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> UNARYLOGICOP(!) FLAG(-path) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(mv) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) FLAG(-f) ARGUMENT({})<File>
ROOT(root) T(yum) T(install) T(ffmpeg-2.6.4-1.fc22.x86_64.rpm)
ROOT() COMMANDSUBSTITUTION() UTILITY(date) FLAG(-d) ARGUMENT(Regex)<Regex> ARGUMENT(+%s)<Format>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(screen) T(-X) T(quit)
ROOT(root) T(tmux) T(attach) T(-t) T(test1)
ROOT(root) T(comm) T(-2) T(-3) T(<() T(ls)
ROOT(root) T(fold) T(-s) T($2) T(|) T(mailx) T(-s) T($SUBJECT) T(-b) T(abc@abc.com) T($EMAIL) T(-r) T($MAILBCC)
ROOT() UTILITY(ln) FLAG(-n) FLAG(-s) FLAG(-f) ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(l)<Type> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(ls) FLAG(-l) ARGUMENT({})<File> UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(history) FLAG(-d) ARGUMENT(Quantity)<Quantity>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(bash)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-iname) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-iname) ARGUMENT(Regex)<Regex> UNARYLOGICOP(!) FLAG(-path) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(awk) ARGUMENT(Program)<Program> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(wc) FLAG(-l) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-not) FLAG(-path) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(wc) FLAG(-l) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(-Size)<Size>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-newermt) ARGUMENT(Regex)<Regex> UNARYLOGICOP(!) FLAG(-newermt) ARGUMENT(Regex)<Regex> FLAG(-delete)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0)
ROOT(root) T(find) T(.) T(-iname) T(*.pdf) T(-exec) T(tar) T(--append) T(--file=somefile.tar) T({}) T(;)
ROOT(root) T(find) T(/) T(-name) T(*.txt) T(-xdev) T(2>) T(/dev/null)
ROOT() PIPELINE() UTILITY(wc) FLAG(-l) ARGUMENT(File)<File> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rmdir) ARGUMENT({})<Directory>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(ls) FLAG(-1) FLAG(-S) FLAG(-s) FLAG(-h) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(f)<Type>
ROOT() PIPELINE() UTILITY(pstree) FLAG(-p) UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT(root) T(find) T(.) T(-iname) T(dl-aster-full-20131102*) T(-exec) T(grep) T(Processed) T(Files) T({}) T(;)) T(|) T(cut) T(-d:) T(-f2)
ROOT() PIPELINE() UTILITY(md5sum) ARGUMENT(File)<File> UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UTILITY(grep) FLAG(-E) FLAG(-v) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(bzip2) FLAG(-9) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(touch) ARGUMENT(File)<File>
ROOT(root) T(comm) T(-1) T(-2) T(<() T(zcat) T(Regex)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(wc) FLAG(-l) ARGUMENT({})<File>
ROOT(root) T(IFS=$\n;for) T(f) T(in) T(`find) T(.`;) T(do) T(file=$(echo) T($f) T(|) T(tr) T([:blank:]) T(_);) T([) T(-e) T($f) T(]) T(&&) T([) T(!) T(-e) T($file) T(]) T(&&) T(mv) T($f) T($file;done;unset) T(IFS)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(!) FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
ROOT(root) T(find) T(/home/vmail/) T(-type) T(d) T(-path) T(*/*/Maildir/.LearnAsHam/new) T(-exec) T(sh) T(-c) T((cd) T({}) T(&&) T(mv) T(./*) T(../../.Inbox/new)) T(;)
ROOT() UTILITY(pwd)
ROOT(root) T(find) T(-execdir) T(ipython) T(nbconvert) T({}) T(;)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-empty) FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rmdir) FLAG(-v) ARGUMENT({})<Directory>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(Timespan)<Timespan> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan> FLAG(-print)
ROOT(root) T(seq) T(10) T(|) T(jq) T(-s) T(add)
ROOT() PIPELINE() UTILITY(ls) FLAG(-t) FLAG(-r) UTILITY(head) FLAG(-n) ARGUMENT(-Quantity)<Quantity> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() UTILITY(set) FLAG(-o) ARGUMENT(history)<Option>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(+Size)<Size>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(ifconfig) UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT(root) T(ssh) T(`vagrant) T(ssh-config) T(|) T(tail) T(-8) T(|) T(perl) T(-pe) T(s/^\s+/-o@/;) T(s/\s/\=/;s/@/) T(/;s/\n/) T(/`) T(vagrant@localhost)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(!) FLAG(-path) ARGUMENT(Regex)<Regex> UNARYLOGICOP(!) FLAG(-path) ARGUMENT(Regex)<Regex> UNARYLOGICOP(!) FLAG(-path) ARGUMENT(Regex)<Regex> FLAG(-ls)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-mmin) ARGUMENT(+Quantity)<Quantity> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(!) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-delete)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan> FLAG(-print) UTILITY(xargs) FLAG(-i) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT(File)<File> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print) UTILITY(wc) FLAG(-l)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> BRACKET() FLAG(-path) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune)
ROOT() UTILITY(find) FLAG(-L) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(l)<Type> FLAG(-exec::+) UTILITY(rm) OPERATOR(--) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-newer) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UTILITY(sed) ARGUMENT(Program)<Program> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(pwd)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-xtype) ARGUMENT(l)<Type>
ROOT() UTILITY(ls) FLAG(-l) COMMANDSUBSTITUTION() UTILITY(which) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> UNARYLOGICOP(-prune) FLAG(-empty)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(+Size)<Size>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-newer) ARGUMENT(File)<File> FLAG(-ls)
ROOT() UTILITY(ping) ARGUMENT(Regex)<Regex> FLAG(-n) ARGUMENT(Regex)<Regex> FLAG(-i) ARGUMENT(Quantity)<Quantity> FLAG(-W) ARGUMENT(Quantity)<Quantity> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(ls) FLAG(-d) FLAG(-1) ARGUMENT(File)<File>
ROOT() UTILITY(mount) FLAG(-t) ARGUMENT(smbfs)<Option> FLAG(-o) ARGUMENT(soft)<Option> ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(file) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mmin) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type>
ROOT(root) T(du) T(-csxb) T(/path) T(|) T(md5sum) T(>) T(file)
ROOT(root) T(proc1) T(|) T(tee) T(>(proc2)) T(...) T(>(procN-1)) T(|) T(procN)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-size) ARGUMENT(-Size)<Size>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-ctime) ARGUMENT(+Timespan)<Timespan> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(rm) FLAG(-f) ARGUMENT({})<File>
ROOT() UTILITY(shopt) FLAG(-s) ARGUMENT(expand_aliases)<Option> ARGUMENT(extglob)<Option> ARGUMENT(xpg_echo)<Option>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan>
ROOT() UTILITY(rsync) FLAG(-u) FLAG(-r) FLAG(--delete) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-size) ARGUMENT(-Size)<Size>
ROOT(root) T(find) T(temp/medium) T(-iname) T(*.jpg) T(-printf) T(mv) T(%p) T(%p\n) T(|) T(sed) T(s/\.jpg$/_MED\.jpg/) T(|) T(while) T(read) T(l;) T(do) T(eval) T($l;) T(done)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(ls) FLAG(-l) UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT(root) T(vi) T(`which) T(yum`)
ROOT() UTILITY(zcat) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-size) ARGUMENT(-Size)<Size>
"ROOT() UTILITY(mount) FLAG(-o) ARGUMENT(rw,remount)<Option> FLAG(-t) ARGUMENT(rfs)<Option> ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(echo) ARGUMENT(Regex)<Regex> ARGUMENT({})<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-path) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(cpio) FLAG(-p) FLAG(--owner) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-empty)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(jcho) T(-name) T(*.data) T(|) T(while) T(read) T(-r) T(f;) T(do) T(cp) T($f) T($(echo) T($f) T(|) T(sed) T('s~\([^)]*\)/\([^()]*\)$~\1_\2~');) T(done)
ROOT(root) T(find) T(.) T(-name) T(VPN_CALLRECORD_20140409*) T(-type) T(f|) T(xargs) T(ls) T(-lhrt) T(|awk) T({print) T($9}) T(>) T(log.txt)
ROOT(root) T(find) T(/var/log/) T(-type) T(f) T(-exec) T(grep) T(-H) T(‘19:26′) T({}) T(;)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-exec::;) UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-delete)
ROOT(root) T(read) T(-a) T(to_sort) T(<<<) T($1)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UNARYLOGICOP(!) FLAG(-perm) ARGUMENT(Permission)<Permission>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
ROOT(root) T(tree) T(-ivL) T(1) T(/data/) T(|) T(perl) T(-nlE) T(say) T(if) T(/\Acommand-[0-9][0-9a-z.]*-setup\z/)
ROOT() UTILITY(fold) FLAG(-w) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(tee) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(hostname) FLAG(-I) UTILITY(awk) ARGUMENT(Program)<Program>
ROOT(root) T(find) T(-newer) T(timestamp-file) T(-type) T(f) T(>) T(list-of-files)
ROOT() UTILITY(join) FLAG(-j) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT(root) T(find) T(backup/) T(-type) T(d) T(|) T(tar) T(cf) T(directory-structure.tar) T(-T) T(-) T(--no-recursion)
ROOT() UTILITY(bind) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-exec::+) UTILITY(mv) FLAG(--target-directory) ARGUMENT(Directory)<Directory> ARGUMENT({})<File>
ROOT(root) T(comm) T(-2) T(-3) T(<() T(sort) T(File)
ROOT(root) T(find) T(Path) T($() T(pwd)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-mmin) ARGUMENT(-Quantity)<Quantity> UTILITY(xargs) FLAG(-r) FLAG(-I) ARGUMENT({})<Regex> UTILITY(ls) FLAG(-l) ARGUMENT({})<File>
ROOT() UTILITY(shred) FLAG(-v) FLAG(-n) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(tail) FLAG(-f) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(--line-buffered) ARGUMENT(Regex)<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type>
ROOT(root) T({) T(read) T(-r) T(-d) T(time) T(&&) T(IFS=) T(read) T(-r) T(-d) T(filename;) T(}) T(<) T(<(find) T(.) T(-type) T(d) T(-printf) T(%A@) T(%p\0) T(|) T(sort) T(-z) T(-r) T(-n))
"ROOT() UTILITY(source) PROCESSSUBSTITUTION(<) UTILITY(date) ARGUMENT(+""CDATE='%Y-%m-%d %H:%M:%S' EPOCH='%s'"")<Format>"
"ROOT(root) T(ssh) T(-i) T(keyFile) T(user@host) T(bash) T(-c) T(""nohup) T(./script) T(arg1) T(arg2) T(>) T(output.txt) T(2>&1) T(&"")"
ROOT() UTILITY(rsync) FLAG(-a) FLAG(-v) FLAG(--exclude) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT(root) T(find) T(.) T(-name) T(...) T(2>/dev/null)
ROOT(root) T(find) T(Path) T($() T(pwd)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-newermt) ARGUMENT(Regex)<Regex> UNARYLOGICOP(!) FLAG(-newermt) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT(root)
ROOT() PIPELINE() UTILITY(fold) ARGUMENT(File)<File> ARGUMENT(File)<File> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT(root) T(find) T(|) T(perl) T(-lne) T(print) T(quotemeta) T(|) T(xargs) T(ls) T(-d)
ROOT(root) T(find) T(.) T(-type) T(f) T(-mtime) T(-14) T(-printf) T(%f\n) T(>) T(deploy.txt)
ROOT() UTILITY(history) FLAG(-r) ARGUMENT(Quantity)<Quantity>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(chown) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(sed) FLAG(-r) ARGUMENT(Program)<Program> ARGUMENT(File)<File> UTILITY(column) FLAG(-t)
ROOT(root) T(find) T(.) T(-name) T(AssemblyInfo.cs) T(|) T(xargs) T(git) T(diff) T(--name-status) T(--)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-atime) ARGUMENT(+Timespan)<Timespan> FLAG(-delete)
ROOT() PIPELINE() UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number> ARGUMENT(File)<File> UTILITY(xargs) FLAG(-n) ARGUMENT(Quantity)<Quantity> FLAG(-I) ARGUMENT({})<Regex> UTILITY(dirname) ARGUMENT({})<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(df) FLAG(-P) ARGUMENT(File)<File> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(groups) UTILITY(tr) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-exec::+) UTILITY(echo) ARGUMENT({})<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) FLAG(-f) ARGUMENT({})<File>
ROOT(root) T(find) T(.) T(-maxdepth) T(1) T(-type) T(f) T(-name) T(image*png) T(`)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(cat) ARGUMENT(File)<File> ARGUMENT(File)<File> UTILITY(sort) UTILITY(uniq) FLAG(-u)
ROOT(root) T(curl) T(https://s3.amazonaws.com/sampletest/sample.tar.gz) T(|) T(gunzip) T(|) T(pax) T(-r) T(-s) T(/old/new/)
"ROOT(root) T(find) T(.) T(-type) T(f) T(-name) T(*.txt) T(-exec) T(sh) T(-c) T(for) T(i;do) T(sed) T(s/[[:space:]]*$//) T(""$i"">/tmp/.$$) T(&&) T(cat) T(/tmp/.$$) T(>) T(""$i"";done) T(arg0) T({}) T(+)"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(awk) ARGUMENT(Program)<Program> ARGUMENT(Program)<Program> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(dig) ARGUMENT(Regex)<Regex> ARGUMENT({})<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(echo) ARGUMENT({})<Regex> UTILITY(wc) FLAG(-l)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(grep) FLAG(-i) FLAG(-l) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT(root) T(find) T(Path) T($() T(pwd)
ROOT() UTILITY(readlink) ARGUMENT(File)<File>
ROOT() UTILITY(pstree) FLAG(-s) FLAG(-p) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-path) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-print)
ROOT() UTILITY(grep) FLAG(-r) FLAG(--include) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::+) UTILITY(du) FLAG(-h) FLAG(-c) ARGUMENT({})<File> UTILITY(tail) FLAG(-n) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(.) T(-name) T(*.ini) T(-exec) T(sh) T(-c) T(grep) T(-q) T(PROJECT_A) T({}) T(&&) T(grep) T(-q) T(CONFIG_A) T({}) T(&&) T(echo) T({}) T(;)
ROOT(root) T(find) T(.) T(-type) T(f) T(-maxdepth) T(1) T(-exec) T(sh) T(-c) T(cat) T(/dev/null) T(>) T({}) T(;)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(grep) FLAG(-c) FLAG(-z) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(yes) UTILITY(rm) FLAG(-r) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(md5sum) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(seq) ARGUMENT(Number)<Number> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(echo) ARGUMENT({})<Regex>
ROOT(root) T(sudo) T(lsusb) T(-t|less)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-exec::;) UTILITY(env) ARGUMENT(Program)<Program> ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UTILITY(sed) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-not) FLAG(-type) ARGUMENT(d)<Type> UNARYLOGICOP(-not) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(ln) FLAG(-s) ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT(root) T(hostname) T(--all-ip-address|cut) T(-d) T(-f1)
ROOT(root) T(yes) T(|) T(command-that-asks-for-input)
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(sed) ARGUMENT(Program)<Program> UTILITY(wc) FLAG(-l)
ROOT(root) T(alias) T(killaf=kill) T(-9) T(`psu|grep) T(MF1pp|grep) T(-v) T(grep|awk) T('{print) T($2}'`)
ROOT(root) T(echo) T($() T(date)
ROOT() UTILITY(dirname) COMMANDSUBSTITUTION() UTILITY(which) ARGUMENT(Regex)<Regex>
ROOT(root) T(source) T(<(metaflac) T(--show-tag) T(ARTIST) T(myfile.flac))
ROOT() UTILITY(zless) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::+) UTILITY(wc) FLAG(-l) ARGUMENT({})<File>
ROOT(root) T(find) T(/) T(-type) T(f) T(-name) T(dummy) T(2>/dev/null) T(-exec) T(cat) T({}) T(;)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-empty) FLAG(-ok::;) UTILITY(rm) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UTILITY(grep) FLAG(-E) FLAG(-o) ARGUMENT(Regex)<Regex> UTILITY(cut) FLAG(-c) ARGUMENT(Number)<Number>
ROOT(root) T(diff) T(<() T(fold) T(-w) T(Quantity) T(<() T(sed) T(Program) T(File)
ROOT() UTILITY(date) FLAG(-u) FLAG(-d) ARGUMENT(@1267619929)<Regex>
ROOT() PIPELINE() UTILITY(who) UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number> UTILITY(sort) UTILITY(uniq)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-user) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-exec::+) UTILITY(rm) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UTILITY(grep) FLAG(-E) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(crontab) FLAG(-l) FLAG(-u) ARGUMENT(Regex)<Regex> UTILITY(cat) ARGUMENT(File)<File> ARGUMENT(File)<File> UTILITY(crontab) FLAG(-u) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(tr) FLAG(-d) ARGUMENT(Regex)<Regex> UTILITY(fold) FLAG(-w) ARGUMENT(Quantity)<Quantity> UTILITY(head) FLAG(-n) ARGUMENT(Quantity)<Quantity>
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(xargs) FLAG(-n) ARGUMENT(Quantity)<Quantity> FLAG(-I) ARGUMENT({})<Regex> FLAG(-P) ARGUMENT(Quantity)<Quantity> UTILITY(ping) ARGUMENT({})<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) FLAG(-f) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(!) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() UTILITY(wc) COMMANDSUBSTITUTION() UTILITY(find)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-depth) FLAG(-wholename) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-print)
ROOT(root) T(env) T(Program) T($() T(cat) T(File)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(tail)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(sed) FLAG(-i) ARGUMENT(Program)<Program> ARGUMENT({})<File>
ROOT(root) T(find) T(/tmp/a1) T(-print0) T(|) T(tar) T(--null) T(-T-) T(-cvf) T(dirall.tar)
ROOT() UTILITY(paste) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-s) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> UTILITY(tee) ARGUMENT(File)<File> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iregex) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-type) ARGUMENT(d)<Type> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(ln) FLAG(-n) FLAG(-s) FLAG(-f) ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-perm) ARGUMENT(Permission)<Permission> FLAG(-print) ARGUMENT(Path)<Path>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UNARYLOGICOP(-not) FLAG(-iwholename) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(sed) FLAG(-i) ARGUMENT(Program)<Program> ARGUMENT(File)<File> ARGUMENT(File)<File> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-size) ARGUMENT(Size)<Size> FLAG(-print)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UTILITY(grep) FLAG(-E) FLAG(-v) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(bzip2) FLAG(-9) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-path) ARGUMENT(Regex)<Regex>
ROOT(root) T(cat) T(file) T(|) T(clipboard)
ROOT(root) T(find) T(.) T(-type) T(f) T(|) T(while) T(read) T(f;) T(do) T(g=`md5sum) T($f`) T(>) T($f.md5;) T(done)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mount) FLAG(-depth) BRACKET() FLAG(-type) ARGUMENT(f)<Type> BINARYLOGICOP(-or) FLAG(-type) ARGUMENT(l)<Type> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-ctime) ARGUMENT(+Timespan)<Timespan> FLAG(-exec::;) UTILITY(bzip2) FLAG(-z) FLAG(-v) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) FLAG(-f) ARGUMENT({})<File>
ROOT(root) T(ln) T(-s) T($() T(pwd)
ROOT(root) T(top) T(-p) T($(pgrep) T(--newest) T(ProgramName))
ROOT(root) T(read) T(-r) T(-p) T($() T(echo) T(Regex)
ROOT() UTILITY(mktemp) FLAG(-d)
ROOT(root) T(find) T(/volume1/uploads) T(-name) T(*.mkv) T(-exec) T(/tmp/rename.sh) T({}) T(;)
ROOT() UTILITY(find) ARGUMENT(Path)<Path>
ROOT(root) T(su) T(-c) T(source) T(myfile;) T(bash)
ROOT() PIPELINE() UTILITY(w) UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number>
ROOT() PIPELINE() UTILITY(ping) ARGUMENT(Regex)<Regex> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(f)<Type> FLAG(-perm) ARGUMENT(-Permission)<Permission>
ROOT(root) T(comm) T(-3) T(<() T(sort) T(-u) T(-n) T(File)
ROOT(root) T(|) T(tr) T(Regex) T(Regex)
ROOT() UTILITY(split) FLAG(-l) ARGUMENT(Quantity)<Quantity>
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(tr) FLAG(-d) ARGUMENT(Regex)<Regex> UTILITY(fold) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> UTILITY(xargs)
ROOT(root) T(join) T(<() T(sort) T(File)
ROOT() UTILITY(shopt) FLAG(-s) ARGUMENT(globstar)<Option>
ROOT() PIPELINE() UTILITY(df) FLAG(-P) ARGUMENT(File)<File> UTILITY(tail) FLAG(-) ARGUMENT(Quantity)<Quantity> UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number>
ROOT() PIPELINE() UTILITY(grep) FLAG(-o) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> UTILITY(tr) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(bzip2) FLAG(-k) FLAG(-v) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(cal) UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(chown) FLAG(-R) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT() UTILITY(ln) ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT(root) T(who) T(|) T(awk) T({print) T($1}) T(|) T(xargs) T(-n) T(1) T(id)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(!) ARGUMENT(Path)<Path> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-print)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-print) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) FLAG(-r) FLAG(-f) ARGUMENT({})<File>
ROOT(root) T(ls) T($() T(which) T(Regex)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-lname) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(rm) ARGUMENT(File)<File>
ROOT(root) T(echo) NT(<n>) T(`date) T(-d) T($B) T(+%s`) T(-) T(`date) T(-d) T($A) T(+%s`)) T(/) T((24*3600)) T(|) T(bc) T(-l)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print) FLAG(-exec::;) UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(Permission)<Permission>
ROOT(root) T(w) T(|) T(awk) T({print) T($1}) T(|) T(xargs) T(-I) T({}) T(id) T({})
ROOT() UTILITY(mv) FLAG(-f) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT(root) T(find) T($x) T(-type) T(d) T(-wholename) T(*) T(!) T(-wholename) T(*/@eaDir*) T(>) T(/tmp/mediaindex/$nn.dir)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-exec::+) UTILITY(mv) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(grep) FLAG(-o) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> UTILITY(sort) UTILITY(uniq) FLAG(-c) UTILITY(sort) FLAG(-n) FLAG(-r)
ROOT() UTILITY(history) FLAG(-r) ARGUMENT(Quantity)<Quantity>
ROOT(root) T(su) T(--session-command=${OBJECTDB_HOME}/bin/objectdb.sh) T(start) T($JAVA_USER)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(-Permission)<Permission>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT(root) T(cp) T(--remove-destination) T($() T(readlink) T(File)
ROOT(root) T(read) T(-p) T($() T(echo) T(-e) T(Regex)
ROOT() UTILITY(read) FLAG(-e) FLAG(-p) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(dirname) OPERATOR(--) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT(root) T(for) T(h) T(in) T($(seq) T(1006) T(1008) T(|) T(tac);) T(do) T(history) T(-d) T($h;) T(done)
ROOT() UTILITY(ssh) FLAG(-S) ARGUMENT(Path)<Path> FLAG(-O) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-ctime) ARGUMENT(-Timespan)<Timespan>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-size) ARGUMENT(+Size)<Size> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(du) FLAG(-s) FLAG(-h) ARGUMENT({})<File>
ROOT() UTILITY(dig) ARGUMENT(Regex)<Regex>
ROOT(root) T(head) T(-16482) T(<) T(file.in) T(|) T(tail) T(-259) T(>) T(file.out)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-L) FLAG(-type) ARGUMENT(l)<Type>
ROOT() UTILITY(rsync) FLAG(-n) FLAG(-v) FLAG(-r) FLAG(-a) FLAG(-L) ARGUMENT(File)<File> ARGUMENT(File)<File> FLAG(--exclude) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(mkdir) ARGUMENT(Directory)<Directory> ARGUMENT(Directory)<Directory>
"ROOT(root) T(/sbin/ifconfig) T(|) T(sed) T(-ne) T($/127.0.0.1/) T(!) T({) T(s/^[) T(\t]*inet[) T(\t]\\{1,99\\}\\(addr:\\)\\{0,1\\}\\([0-9.]*\\)[) T(\t\/].*$/\\2/p;) T(})"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::+) UTILITY(sed) FLAG(-i) ARGUMENT(Program)<Program> ARGUMENT({})<File>
ROOT(root) T(find) T(data/) T(-print0) T(|) T(tar) T(--null) T(-T) T(-) T(--create) T(-f) T(archive.tar)
ROOT(root) T(alias) T(-g) T(X2=|) T(cut) T(-d') T(') T(-f2)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::+) UTILITY(grep) FLAG(-l) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(shopt) UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(ifconfig)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(mount) UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(sed) ARGUMENT(Program)<Program> ARGUMENT(File)<File>
ROOT() UTILITY(cd) COMMANDSUBSTITUTION() UTILITY(cat) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> BRACKET() FLAG(-perm) ARGUMENT(-Permission)<Permission> BINARYLOGICOP(-or) FLAG(-perm) ARGUMENT(-Permission)<Permission> FLAG(-exec::;) UTILITY(ls) FLAG(-l) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-nouser) FLAG(-ls)
ROOT() UTILITY(df) FLAG(-P)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(echo) ARGUMENT({})<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(!) FLAG(-group) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(grep) FLAG(-E) FLAG(-m) ARGUMENT(Quantity)<Quantity> FLAG(-n) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> UTILITY(sed) ARGUMENT(Program)<Program> ARGUMENT(File)<File> UTILITY(sed) ARGUMENT(Program)<Program> ARGUMENT(File)<File> UTILITY(sed) FLAG(-f) ARGUMENT(File)<File> ARGUMENT(Program)<Program>
ROOT() UTILITY(tar) FLAG(-x) FLAG(-v) FLAG(-z) FLAG(-f) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(grep) FLAG(-H) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(grep) FLAG(-o) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> UTILITY(head) FLAG(-n) ARGUMENT(Quantity)<Quantity>
ROOT(root) T(screen) T(-d) T(-m) T(-L) T(python) T(test.py)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-xdev) FLAG(-samefile) ARGUMENT(Regex)<Regex>
ROOT(root) T(unset) T(z)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(ls) ARGUMENT({})<File>
ROOT(root) T(alias) T(|) T(grep) T(my_previous_alias)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> UNARYLOGICOP(!) FLAG(-size) ARGUMENT(+Size)<Size>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-not) BRACKET() FLAG(-path) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-path) ARGUMENT(Regex)<Regex>
ROOT(root) T(xmllint) T(example.xml) T(--xpath) T(/config/*/@*) T(|) T(sed) T(s|) T(key|\nkey|g) T(|) T(nl)
ROOT(root) T(find) T(`pwd`) T(-perm) T(111) T(-type) T(f) T(|) T(sort) T(-r) T(|) T(xargs) T(-n1) T(-I{}) T(sh) T(-c) T(dirname) T({};basename) T({}) T(|) T(awk) T(/^\//) T({dir=$0) T(;) T(if) T((dir) T(!=) T(lastdir)) T({print;lastdir=dir}}) T(!/^\//) T({print})
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-ls)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-group) ARGUMENT(Regex)<Regex> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print) ARGUMENT(Path)<Path>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(nano) ARGUMENT({})<File>
ROOT(root) T(cat) T(file.txt) T(|) T(perl) T(-ne) T(s/foo/bar/g;) T(|) T(less)
ROOT(root) T(tr) T(-s) T(<) T(file) T(|) T(cut) T(-d) T(-f4)
ROOT() UTILITY(mv) ARGUMENT(File)<File> ARGUMENT(File)<File> FLAG(-b) FLAG(-S) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(df) FLAG(-H)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(!) FLAG(-perm) ARGUMENT(Permission)<Permission>
ROOT() PIPELINE() UTILITY(grep) FLAG(-r) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> UTILITY(tee) PROCESSSUBSTITUTION(>) UTILITY(wc) FLAG(-l)
ROOT(root) T(ps) T(aux) T(|) T(grep) T(python) T(csp_build.py) T(|) T(head) T(-1) T(|) T(tr) T(-s) T(|) T(cut) T(-d) T(-f2) T(|) T(xargs) T(kill)
ROOT(root) T(find) T(.) T(-type) T(f) T(-name) T(*.txt) T(-exec) T(cat) T({}) T(;>) T(all.txt)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(wc) FLAG(-l) ARGUMENT({})<File> UTILITY(sort) FLAG(-r)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-regex) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-ok::;) UTILITY(mv) ARGUMENT({})<File> ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT(root) T(yum) T(-h)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(tar) FLAG(-c) FLAG(-z) FLAG(-f) ARGUMENT(File)<File> ARGUMENT(File)<File> UTILITY(split) FLAG(-b) ARGUMENT(Size)<Size> ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
"ROOT(root) T(find) T(.) T(-name) T(*FooBar*) T(-exec) T(sh) T(-c) T(cp) T(--) T(""$@"") T(~/foo/bar) T(sh) T({}) T(+)"
"ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type> FLAG(-printf) ARGUMENT(""%P\n"")<Format> FLAG(-exec::;) UTILITY(tar) FLAG(-z) FLAG(-c) FLAG(-p) FLAG(-v) FLAG(-f) ARGUMENT(File)<File> ARGUMENT({})<File>"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(!) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(d)<Type> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type>
ROOT() PIPELINE() UTILITY(set) UTILITY(awk) FLAG(-F) ARGUMENT(Regex)<Regex> ARGUMENT(Program)<Program> UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(df) FLAG(-h) ARGUMENT(File)<File> UTILITY(cut) FLAG(-f) ARGUMENT(Number)<Number> FLAG(-d) ARGUMENT(Regex)<Regex> UTILITY(tail) FLAG(-) ARGUMENT(Quantity)<Quantity>
ROOT() PIPELINE() UTILITY(du) FLAG(-k) FLAG(-s) ARGUMENT(File)<File> UTILITY(sort) FLAG(-n) FLAG(-r)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() PIPELINE() UTILITY(ifconfig) UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-v) ARGUMENT(Regex)<Regex> UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(column) FLAG(-t) UTILITY(fold) UTILITY(column) FLAG(-t)
ROOT(root) T(node) T(-pe) T(JSON.parse(process.argv[1]).foo) T($(cat) T(foobar.json))
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(grep) FLAG(-n) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> FLAG(-print)
"ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-printf) ARGUMENT(""%s %p\n"")<Format> UTILITY(sort) FLAG(-n) FLAG(-r) UTILITY(head) FLAG(-n) ARGUMENT(Quantity)<Quantity>"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(+Permission)<Permission>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(tail) FLAG(-n) ARGUMENT(+Quantity)<Quantity> ARGUMENT(File)<File> UTILITY(split) FLAG(-l) ARGUMENT(Quantity)<Quantity> ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(tar) FLAG(-x) FLAG(-z)
ROOT() PIPELINE() UTILITY(file) ARGUMENT(File)<File> UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path>
ROOT(root) T(getent) T(group) T(|) T(cut) T(-d:) T(-f1)
ROOT() PIPELINE() UTILITY(hostname) UTILITY(cut) FLAG(-b) ARGUMENT(Number)<Number>
ROOT(root) T(ssh) T(example.com) T(ps) T(-elfc;) T(ls)
ROOT() PIPELINE() UTILITY(tar) FLAG(-c) FLAG(-f) ARGUMENT(File)<File> ARGUMENT(File)<File> UTILITY(tar) ARGUMENT(-File)<File> ARGUMENT(File)<File> UTILITY(awk) ARGUMENT(Program)<Program> UTILITY(grep) FLAG(-v) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(sed) ARGUMENT(Program)<Program>
ROOT() UTILITY(dirname) COMMANDSUBSTITUTION() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT(root) T(unalias) T(sudo)
ROOT(root) T(make) T(||) T(exit) T($?)
ROOT() UTILITY(read) FLAG(-p) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(rsync) FLAG(-c) FLAG(-h) FLAG(-a) FLAG(-v) FLAG(-z) FLAG(-P) FLAG(--stats) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT(root) T(alias) T(foo=$echo) T(A) T(\*') T(is) T(born) T(at) T($(date))
ROOT(root) T(find) T(.) T(-name) T(*.py) T(-print0) T(|) T(xargs) T(-0) T(grep) T(something) T(>) T(output.txt)
ROOT(root) T(find) T(.) T(-name) T(*.txt) T(|) T(parallel) T(-Xj1) T(--tty) T(vim)
ROOT() UTILITY(who) FLAG(-b)
ROOT() UTILITY(chown) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(f)<Type> UNARYLOGICOP(-not) FLAG(-path) ARGUMENT(Regex)<Regex> UTILITY(wc) FLAG(-l)
ROOT(root) T(ps) T(-u) T($() T(whoami)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(tr) FLAG(-s) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT(root) T(/sbin/ifconfig) T($(netstat) T(-nr) T(|) T(tail) T(-1) T(|) T(awk) T({print) T($NF})) T(|) T(awk) T(-F:) T(/inet) T(/{print) T($2}) T(|) T(cut) T(-f1) T(-d)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print)
ROOT() PIPELINE() UTILITY(w) UTILITY(head) FLAG(-) ARGUMENT(Quantity)<Quantity> UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number> UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number> UTILITY(tr) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) FLAG(-L) ARGUMENT(Path)<Path> UNARYLOGICOP(!) FLAG(-type) ARGUMENT(l)<Type>
ROOT(root) T(find) T(.) T(-name) T(*.html) T(-print0) T(|) T(xargs) T(-0) T(perl) T(-pi) T(-e) T(s/oldstring/newstring/g)
ROOT(root) T(alias) T(unix=date) T(+%s)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(!) FLAG(-type) ARGUMENT(d)<Type> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(wc) FLAG(-c) ARGUMENT({})<File> UTILITY(tail) FLAG(-) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(uname) FLAG(-m)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-ls) UTILITY(sort) ARGUMENT(File)<File> UTILITY(head) FLAG(-) ARGUMENT(Quantity)<Quantity>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-printf) ARGUMENT('%s %p\n')<Format> UTILITY(sort) FLAG(-r) FLAG(-n)
ROOT() UTILITY(tree) ARGUMENT(Directory)<Directory>
ROOT(root) T(git) T(symbolic-ref) T(HEAD) T(2>/dev/null) T(|) T(cut) T(-d/) T(-f) T(3)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) FLAG(-f) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan>
ROOT() PIPELINE() UTILITY(who) UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number> UTILITY(sort) FLAG(-u)
ROOT() PIPELINE() UTILITY(hostname) FLAG(-I) UTILITY(awk) ARGUMENT(Program)<Program> UTILITY(cut) FLAG(-f) ARGUMENT(Number)<Number> FLAG(-d) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(.) T(-type) T(f) T(-print0) T(|) T(xargs) T(-0) T(cat) T(>) T(out.txt)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(dirname) ARGUMENT({})<Regex>
ROOT() UTILITY(readlink) FLAG(-f) ARGUMENT(File)<File>
ROOT() UTILITY(uname) FLAG(-s) FLAG(-r) FLAG(-v) FLAG(-m)
ROOT(root) T(paste) T(<() T(uniq) T(-f) T(Quantity) T(File) T(|) T(cut) T(-f) T(Number)
ROOT() UTILITY(chown) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> FLAG(-R)
ROOT() PIPELINE() UTILITY(crontab) FLAG(-l) UTILITY(sed) FLAG(-r) FLAG(-e) ARGUMENT(Program)<Program> UTILITY(crontab) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-atime) ARGUMENT(+Timespan)<Timespan>
ROOT(root) T(find) T(${backuppath}) T(-mtime) T(-10) T(>) T(file.list)
"ROOT(root) T(mpv) T(--no-audio) T(`ls) T(~/Down/other/*.{mp4,flv}) T(--color=never`)"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-links) ARGUMENT(Quantity)<Quantity> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(cp) ARGUMENT(File)<File> COMMANDSUBSTITUTION() UTILITY(mktemp) ARGUMENT(Regex)<Regex>
ROOT() COMMANDSUBSTITUTION() UTILITY(dirname) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(env) UTILITY(sed) FLAG(-n) ARGUMENT(Program)<Program>
"ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-printf) ARGUMENT(""%T@ %p\n"")<Format> UTILITY(sort) FLAG(-n) UTILITY(head) FLAG(-) ARGUMENT(Quantity)<Quantity> UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(ls) FLAG(-a) FLAG(-l) ARGUMENT({})<File>"
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-type) ARGUMENT(f)<Type> UTILITY(xargs) FLAG(-r) FLAG(-I) ARGUMENT({})<Regex> UTILITY(ls) FLAG(-S) FLAG(-s) FLAG(-h) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-empty) FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT(root) T(watch) T(-n) T(1) T(--color) T(python) T(-m) T(unittest) T(discover) T(2>&1) T(|) T(pyrg)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(Permission)<Permission> FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(pwd) FLAG(-P)
ROOT(root) T(diff) T(<(ssh) T(server1) T(rpm) T(-qa) T(|) T(sort)) T(<(ssh) T(server2) T(rpm) T(-qa) T(|) T(sort))
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(!) FLAG(-perm) ARGUMENT(Permission)<Permission>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> BINARYLOGICOP(-and) FLAG(-mtime) ARGUMENT(-Timespan)<Timespan> FLAG(-print0)
ROOT() PIPELINE() UTILITY(ping) FLAG(-n) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> UTILITY(find) ARGUMENT(Path)<Path>
ROOT() UTILITY(cat) FLAG(-v) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(who) FLAG(--ips) ARGUMENT(File)<File> UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(Path) T(-mindepth) T(Quantity) T(-type) T(f) T(-execdir) T(mv) T({}) T($() T(dirname) T({})
"ROOT(root) T(screen) T(-L) T(bash) T(-c) T((while) T(:;) T(do) T(tail) T(~/screenlog.0) T(|) T(grep) T(-o) T(""[0-9]*%"") T(|) T(tail) T(-1;) T(done) T(|) T(zenity) T(--progress) T(--auto-close) T(&);) T(7z) T(a) T(""output.zip"") T(""/path/to/input"")"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(-not) FLAG(-user) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-ctime) ARGUMENT(-Timespan)<Timespan>
ROOT(root) T(find) T(/path/to/directory) T(-type) T(d) T(!) T(-name) T(.) T(-prune) T(-exec) T(printf) T(x) T(;) T(|) T(wc) T(-c)
ROOT(root) T(uname) T(-a) T(date)
ROOT() PIPELINE() UTILITY(md5sum) ARGUMENT(File)<File> UTILITY(cut) FLAG(-f) ARGUMENT(Number)<Number> FLAG(-d) ARGUMENT(Regex)<Regex>
ROOT(root) T($) T(join) T(-j) T(2) T(-o) T(1.1) T(1.2) T(2.1) T(<(sort) T(1)) T(<(sort) T(-k2) T(2))
ROOT() UTILITY(ln) FLAG(-s) ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(grep) FLAG(--include) ARGUMENT(Regex)<Regex> FLAG(-n) FLAG(-R) FLAG(-H) FLAG(-I) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-n) FLAG(-H) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-ok::;) UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(grep) FLAG(-i) FLAG(-l) ARGUMENT(Regex)<Regex>
ROOT(root) T(uname) T(-n) T(date) T(+%F)
ROOT() PIPELINE() UTILITY(gzip) FLAG(-c) FLAG(-d) ARGUMENT(Regex)<Regex> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(wc) FLAG(-l)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(ln) FLAG(-s) ARGUMENT({})<File> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(ping) FLAG(-c) ARGUMENT(Quantity)<Quantity> ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UTILITY(awk) FLAG(-F) ARGUMENT(Regex)<Regex> ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT(root) T(tmux) T(attach) T(-t) T($(echo) T(stuff))
ROOT() PIPELINE() UTILITY(env) UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-user) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(cd) COMMANDSUBSTITUTION() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-printf) ARGUMENT(%h)<Format>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(tar) FLAG(-c) FLAG(-v) FLAG(-f) ARGUMENT(File)<File> ARGUMENT(File)<File> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-size) ARGUMENT(-Size)<Size> FLAG(-exec::+) UTILITY(rm) ARGUMENT({})<File>
"ROOT(root) T(find) T(-maxdepth) T(1) T(-name) T(*.sql) T(-exec) T(cat) T({}) T(;) T(|) T(sed) T(-e) T(s/) T(,) T();/1,1);/g) T(|) T(mysql) T(-D) T(ootp)"
ROOT() PIPELINE() UTILITY(echo) FLAG(-e) ARGUMENT(Regex)<Regex> UTILITY(sort) FLAG(-t) ARGUMENT(Regex)<Regex> FLAG(-g) UTILITY(tail) FLAG(-n) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(shred) FLAG(-u) ARGUMENT(File)<File>
"ROOT(root) T(find) T(.) T(-name) T(*) T(-exec) T(sh) T(-c) T(chgrp) T(-v) T(new_group) T(""$0"") T(;) T(chmod) T(-v) T(770) T(""$0"") T({}) T(;)"
ROOT() PIPELINE() UTILITY(gzip) FLAG(-d) FLAG(-c) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(cut) FLAG(-c) ARGUMENT(Number)<Number> UTILITY(md5sum)
ROOT() UTILITY(mkdir) ARGUMENT(Directory)<Directory>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(sed) FLAG(-i) ARGUMENT(Program)<Program> ARGUMENT({})<File>
"ROOT() UTILITY(mount) ARGUMENT(Regex)<Regex> FLAG(-o) ARGUMENT(remount,ro)<Option>"
ROOT() PIPELINE() UTILITY(echo) FLAG(-e) ARGUMENT(Regex)<Regex> UTILITY(tr) FLAG(-d) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(.) T(-type) T(f) T(-printf) T(%P\n) T(>) T(outputfile)
ROOT() UTILITY(chmod) ARGUMENT(+Permission)<Permission> COMMANDSUBSTITUTION() UTILITY(which) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(sort)
ROOT() UTILITY(uniq)
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(rev) UTILITY(cut) FLAG(-b) ARGUMENT(Number)<Number> UTILITY(rev)
ROOT() UTILITY(find) ARGUMENT($directory)<Path> FLAG(-type) ARGUMENT(-f)<Type> FLAG(-execdir::;) UTILITY(zip) FLAG(-j) ARGUMENT($ZipFileName)<File> ARGUMENT({})<File>
"ROOT(root) T(find) T(/the/path) T(-depth) T(-name) T(*.abc) T(-exec) T(sh) T(-c) T(mv) T(""$1"") T(""${1%.abc}.edefg"") T(_) T({}) T(;)"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-regex) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-depth) FLAG(-print) UTILITY(cpio) FLAG(-o) FLAG(-O) ARGUMENT(Regex)<Regex>
ROOT(root) T(your_command) T(|) T(less)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(Timespan)<Timespan>
ROOT(root) T(ps) T(-p) T(24297) T(-o) T(comm) T(--no-heading)
ROOT() PIPELINE() UTILITY(cat) FLAG(-e) ARGUMENT(File)<File> UTILITY(less)
ROOT(root) T(echo) T(Regex) T(|) T(tee) T(>() T(tr) T(Regex) T(Regex)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) FLAG(-v) FLAG(-f) ARGUMENT({})<File>
ROOT() UTILITY(mkdir) ARGUMENT(Directory)<Directory>
ROOT() UTILITY(set) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> COMMANDSUBSTITUTION() UTILITY(pwd)
ROOT(root) T(find) T(.) T(-iname) T(*.mov) T(-printf) T(%p) T(%f\n) T(|) T(xargs) T(-l) T(bash) T(-c) T(echo) T(ffmpeg) T(-i) T($0) T(-f) T(flv) T($1) T(|) T(xargs)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(file) ARGUMENT({})<File>
ROOT(root) T(mysqldump) T(--all-databases) T(|) T(ssh) T(user@yourserver.com) T(mysql)
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(tr) FLAG(-s) ARGUMENT(Regex)<Regex> UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number>
ROOT(root) T(cat) T(/tmp/nums) T(|) T(addnums)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-i) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-cmin) ARGUMENT(-Quantity)<Quantity> FLAG(-exec::;) UTILITY(cp) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT(root) T(find) T(-maxdepth) T(0) T(-name) T(*.sh) T(-exec) T(./lastline.sh) T({}) T(;)
ROOT() UTILITY(find) ARGUMENT(.)<Path> FLAG(-iname) ARGUMENT(*.pdf)<Regex> FLAG(-exec::+) UTILITY(pdfgrep) FLAG(-i) ARGUMENT(keyword)<Regex> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(grep) FLAG(-l) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> FLAG(-exec::;) UTILITY(file) ARGUMENT({})<File> UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT(root) T(command) T($(zcat) T(input1.txt.gz)) T($(zcat) T(input2.txt))
ROOT(root) T(diff) T(<() T(ls) T(File)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-ls)
ROOT() UTILITY(rm) FLAG(-f) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT(root) T(yum) T(--enablerepo=remi) T(install) T(php-mbstring)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-daystart) FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-i) FLAG(-l) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(-Permission)<Permission> FLAG(-print) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-exec::+) UTILITY(ls) FLAG(-l) FLAG(-s) ARGUMENT({})<File> UTILITY(sort) FLAG(-n) UTILITY(tail) FLAG(-) ARGUMENT(Quantity)<Quantity>
ROOT(root) T(diff) T(<() T(curl) T(Regex) T(Regex)
ROOT() PIPELINE() UTILITY(grep) FLAG(-v) ARGUMENT(Regex)<Regex> UTILITY(paste) FLAG(-s) FLAG(-d) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0)
ROOT(root) T(screen) T(-r) T(foo)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-l) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> UTILITY(wc) FLAG(-l)
ROOT() UTILITY(ssh) FLAG(-f) FLAG(-N) FLAG(-T) FLAG(-L) ARGUMENT(Regex)<Regex> FLAG(-L) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(true) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(false) ARGUMENT({})<Regex>
ROOT() PIPELINE() UTILITY(head) FLAG(-c) ARGUMENT(Quantity)<Quantity> ARGUMENT(File)<File> UTILITY(tr) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-mmin) ARGUMENT(-Quantity)<Quantity> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(ls) FLAG(-l) ARGUMENT({})<File>
ROOT() UTILITY(shopt) FLAG(-o) ARGUMENT(extglob)<Option>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(-Size)<Size> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-user) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(chgrp) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(date) ARGUMENT('+%Y')<Format> FLAG(--date) ARGUMENT(Regex)<Regex>
"ROOT(root) T(find) T(PDFs/) T(-name) T(*.pdf) T(-exec) T(sh) T(-c) T(pdftotext) T(""{}"") T(-) T(|) T(grep) T(-C) T(2) T(-i) T(--with-filename) T(--label=""{}"") T(--color) T(""perry) T(sound"") T(;)"
ROOT() UTILITY(sort) FLAG(-o) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> BRACKET() UNARYLOGICOP(!) FLAG(-regex) ARGUMENT(Regex)<Regex> UTILITY(sed) ARGUMENT(Program)<Program>
ROOT() UTILITY(sort) FLAG(-n)
"ROOT(root) T(cal) T(02) T(2012|perl) T(-lnE$.==1||eof||do{$,=""\t&"";$\=""\t\\\\\n"";$l=$_;print) T(map{substr($l,$_*3,3)}(1..5)})"
ROOT(root) T(find) T(.) T(-maxdepth) T(1) T(-type) T(d) T(|) T(while) T(read) T(-r) T(dir;) T(do) T(printf) T(%s:\t) T($dir;) T(find) T($dir) T(-type) T(f) T(|) T(wc) T(-l;) T(done)
ROOT() UTILITY(rsync) FLAG(-a) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-p) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(diff) FLAG(-q) FLAG(-r) ARGUMENT(File)<File> ARGUMENT(File)<File> UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(dirname) ARGUMENT({})<Regex> UTILITY(uniq)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-f) PROCESSSUBSTITUTION(<) UTILITY(sed) ARGUMENT(Program)<Program> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-n) FLAG(-i) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
"ROOT(root) T(find) T(-maxdepth) T(1) T(-name) T(*.sql) T(-exec) T(sed) T(-e) T(s/) T(,) T();/1,1);/g) T({}) T(+) T(|) T(mysql) T(-D) T(ootp)"
ROOT() PIPELINE() UTILITY(ping) FLAG(-c) ARGUMENT(Quantity)<Quantity> ARGUMENT(Regex)<Regex> UTILITY(awk) FLAG(-F) ARGUMENT(Regex)<Regex> ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(+Permission)<Permission> FLAG(-type) ARGUMENT(f)<Type>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UNARYLOGICOP(!) FLAG(-size) ARGUMENT(Size)<Size> FLAG(-exec::;) UTILITY(ls) FLAG(-l) ARGUMENT({})<File>
ROOT(root) T(some_command) T(|) T(less) T(-p) T(regex)
ROOT(root) T(git) T(branch) T(|) T(grep) T(*) T(|) T(cut) T(-d) T(-f) T(2)
ROOT() PIPELINE() UTILITY(tar) FLAG(-c) FLAG(-z) ARGUMENT(File)<File> ARGUMENT(File)<File> UTILITY(split) FLAG(-b) ARGUMENT(Size)<Size> ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(-Permission)<Permission> FLAG(-type) ARGUMENT(f)<Type> UTILITY(sort) FLAG(-r)
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(column)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-cmin) ARGUMENT(+Quantity)<Quantity> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() UTILITY(chown) FLAG(-R) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(!) FLAG(-path) ARGUMENT(Regex)<Regex> UNARYLOGICOP(!) FLAG(-path) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type>
ROOT(root) T(echo) T(error) T(|) T(tee) T(-a) T(log) T(1>&2)
ROOT() PIPELINE() UTILITY(ls) FLAG(-t) FLAG(-p) UTILITY(grep) FLAG(-v) ARGUMENT(Regex)<Regex> UTILITY(tail) FLAG(-n) ARGUMENT(+Quantity)<Quantity> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) OPERATOR(--) ARGUMENT({})<File>
ROOT(root) T(diff) T(<(./a)) T(<(./b))
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(wc) FLAG(-l) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-inum) ARGUMENT(Quantity)<Quantity>
"ROOT(root) T(find) T(.) T(-name) T(*.txt) T(|) T(xargs) T(-I{}) T(sh) T(-c) T(base=$(basename) T($1)) T(;) T(name=${base%.*}) T(;) T(ext=${base##*.}) T(;) T(mv) T(""$1"") T(""foo/${name}.bar.${ext}"") T(--) T({})"
ROOT() UTILITY(kill) FLAG(-) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> BRACKET() FLAG(-path) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-and) UNARYLOGICOP(-not) FLAG(-path) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-path) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-type) ARGUMENT(f)<Type> FLAG(-print)
ROOT(root) T(curl) T(--socks5) T(125.119.175.48:8909) T(http://example.com/)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(strace) T(-o) T(/tmp/output.txt) T(ln) T(-s) T(-f) T(.bash_aliases) T(test)
ROOT(root) T(find) T(-maxdepth) T(1) T(-type) T(d) T(|) T(sort) T(|) T(while) T(read) T(-r) T(dir;) T(do) T(n=$(find) T($dir) T(-type) T(d) T(|) T(wc) T(-l);) T(let) T(n--;) T(if) T([) T($n) T(-gt) T(0) T(];) T(then) T(printf) T(%4d) T(:) T(%s\n) T($n) T($dir;) T(fi;) T(done)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() UTILITY(paste) FLAG(-s) FLAG(-d) ARGUMENT(File)<Regex> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UNARYLOGICOP(!) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(cp) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT(root) T(cd) T($() T(dirname) T($() T(which) T(Regex)
ROOT() PIPELINE() UTILITY(pwd) UTILITY(grep) FLAG(-o) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(grep) FLAG(-r) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT(root) T(alias) T(subs=du) T(-sch) T(`find) T(./) T(-maxdepth) T(1) T(-type) T(d`)
ROOT() PIPELINE() UTILITY(cal) ARGUMENT(DateTime)<DateTime> ARGUMENT(DateTime)<DateTime> UTILITY(tr) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-v) ARGUMENT(Regex)<Regex> UTILITY(tail) FLAG(-n) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(tree) FLAG(-L) ARGUMENT(Number)<Number>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-regextype) ARGUMENT(sed)<Type> FLAG(-regex) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(ln) FLAG(-r) FLAG(-s) ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(<dir>) T(-mtime) T(+7)
ROOT(root) T(find) T(.) T(-name) T(*2011*) T(-print0) T(>) T(/tmp/allfiles)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-empty)
ROOT() PIPELINE() UTILITY(diff) FLAG(-U) ARGUMENT(Quantity)<Quantity> ARGUMENT(File)<File> ARGUMENT(File)<File> UTILITY(grep) FLAG(-v) ARGUMENT(Regex)<Regex> UTILITY(wc) FLAG(-l)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::+) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
"ROOT(root) T(zcat) T(a.csv.gz) T(|) T(gawk) T($2>5) T(FPAT=[^""|]+)"
ROOT(root) T(ping) T(www.google.fr) T(|) T(while) T(read) T(pong;) T(do) T(echo) T($(date):) T($pong;) T(done)
ROOT(root) T($() T(dirname) T($() T(readlink) T(-f) T(File)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(ls) FLAG(-l) ARGUMENT({})<File>
ROOT() UTILITY(diff) FLAG(-q) FLAG(-r) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(grep) FLAG(-o)
ROOT() UTILITY(diff) ARGUMENT(File)<File> ARGUMENT(File)<File> FLAG(-r) FLAG(-q) FLAG(-X) ARGUMENT(File)<File>
ROOT(root) T(find) T($INPUT_LOCATION) T(-name) T(*.pdf.marker) T(-exec) T(bash) T(-c) T(mv) T(${0%.marker}) T($0) T($1) T({}) T($OUTPUT_LOCATION) T(;)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(!) FLAG(-perm) ARGUMENT(Permission)<Permission>
ROOT() UTILITY(shopt) FLAG(-u) ARGUMENT(compat31)<Option>
ROOT() UTILITY(whoami)
ROOT() PIPELINE() UTILITY(grep) FLAG(-o) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> UTILITY(sort) UTILITY(uniq) FLAG(-c)
ROOT() PIPELINE() UTILITY(ls) UTILITY(split) FLAG(-l) ARGUMENT(Quantity)<Quantity> ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-wholename) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-and) FLAG(-print)
ROOT() PIPELINE() UTILITY(groups) ARGUMENT(Regex)<Regex> UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(-Permission)<Permission>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(sed) FLAG(-i) ARGUMENT(Program)<Program> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-daystart) FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(!) FLAG(-path) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(!) FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(!) FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(+Size)<Size>
ROOT(root) T(find) T(/mnt/msdos) T(-name) T(*.txt) T(2>) T(/dev/null)
ROOT(root) T(find) T(.) T(-type) T(f) T(|) T(xargs) T(cat) T(|) T(wordfrequency) T(|) T(grep) T(yourword)
ROOT() UTILITY(du) FLAG(-s) FLAG(-b)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-iname) ARGUMENT(Regex)<Regex> UTILITY(wc) FLAG(-l)
ROOT(root) T(shift) T($(($#-1)))
"ROOT() COMMANDSUBSTITUTION() UTILITY(date) FLAG(--date) ARGUMENT(Regex)<Regex> ARGUMENT(+""%d"")<Format>"
"ROOT(root) T(find) T(/home/family/Music) T(-name) T(*.m4a) T(-exec) T(sh) T(-c) T(ffmpeg) T(-i) T(""$0"") T(-acodec) T(libvorbis) T(-aq) T(6) T(-vn) T(-ac) T(2) T(""${0%.m4a}.ogg"") T({}) T(;)"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex>
"ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-printf) ARGUMENT(""%s %p\n"")<Format> UTILITY(sort) FLAG(-n) FLAG(-r) UTILITY(head) FLAG(-n) ARGUMENT(Quantity)<Quantity> UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number>"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-exec::;) UTILITY(ls) ARGUMENT({})<File>
ROOT() UTILITY(ln) FLAG(-n) FLAG(-s) FLAG(-f) ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan> FLAG(-type) ARGUMENT(f)<Type>
ROOT() UTILITY(comm) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(env) UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-perm) ARGUMENT(Permission)<Permission>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-execdir::;) UTILITY(grep) FLAG(-i) FLAG(-H) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> UTILITY(tee) ARGUMENT(File)<File>
ROOT(root) T(echo) T($() T(basename) T($() T(dirname) T(Regex)
ROOT() UTILITY(cd)
ROOT(root) T(for) T(filename) T(in) T(*.jpg;) T(do) T(mv) T($filename) T(prefix_$filename;) T(done;)
"ROOT(root) T(find) T(./) T(-type) T(f) T(-exec) T(bash) T(-c) T(mv) T(""$1"") T(""$(echo) T(""$1"") T(|) T(sed) T(-re) T('s/^([^-]*)-\s*([^\.]*)/\L\1\E-\2/') T(-e) T('s/) T(/_/g') T(-e) T('s/_-/-/g')"") T(-) T({}) T(;)"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type> FLAG(-exec::;) UTILITY(ls) FLAG(-l) FLAG(-d) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-group) ARGUMENT(Regex)<Regex>
"ROOT(root) T(echo) T(hey) T(hey,) T(we're) T(the) T(monkees) T(|) T(tee) T(/dev/tty) T(|) T(gzip) T(--stdout) T(>) T(my_log.gz)"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(-Size)<Size>
ROOT() PIPELINE() UTILITY(jobs) FLAG(-p) FLAG(-r) UTILITY(tr) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-i) FLAG(-I) ARGUMENT({})<Regex> UTILITY(cp) ARGUMENT({})<File> ARGUMENT(File)<File> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> ARGUMENT({})<Path> ARGUMENT(Path)<Path>
ROOT() UTILITY(ssh) FLAG(-R) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(rev) ARGUMENT(File)<File> UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number> UTILITY(rev)
ROOT(root) T(find) T(.) T(-maxdepth) T(1) T(-cmin) T(+60) T(-name) T(file) T(>/tmp.$$)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(-maxdepth) T(1) T(-type) T(d) T(-exec) T(sh) T(-c) T(cd) T({}) T(&&) T([) T(-d) T(test) T(]) T(&&) T([) T(-d) T(live) T(]) T(&&) T(rm) T(-rvf) T(test) T({}) T(;)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-daystart) FLAG(-mtime) ARGUMENT(Timespan)<Timespan> FLAG(-exec::;) UTILITY(cp) ARGUMENT({})<File> ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT(root) T(comm) T(-12) T(<(sort) T(<) T(a)) T(<(sort) T(<) T(b))
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(sed) ARGUMENT(Program)<Program> UTILITY(sort) FLAG(-u) UTILITY(xargs) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-I) ARGUMENT({})<Regex> UTILITY(mkdir) FLAG(-p) ARGUMENT({})<Directory>
ROOT() UTILITY(df) FLAG(--total)
ROOT() UTILITY(dirname) COMMANDSUBSTITUTION() UTILITY(mktemp) FLAG(-u) FLAG(-t) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-exec::;) UTILITY(mv) ARGUMENT({})<File> ARGUMENT(File)<File> FLAG(-exec::;) UTILITY(mkdir) ARGUMENT(Directory)<Directory>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-ls) UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(ls) FLAG(-1) UTILITY(grep) FLAG(-v) FLAG(-e) ARGUMENT(Regex)<Regex> FLAG(-e) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) FLAG(-r) FLAG(-f) ARGUMENT({})<File>
ROOT(root) T(comm) T(-1) T(-2) T(<() T(ls) T(File) T(|) T(sort)
ROOT() PIPELINE() UTILITY(who) FLAG(-m) UTILITY(awk) ARGUMENT(Program)<Program>
ROOT(root) T(ls) T(-l) T($FILENAME) T(|) T(grep) T(-q) T(^l) T(&&) T(SOURCE_DIR=$(ls) T(-l) T($FILENAME) T(|) T(awk) T({print) T($NF});)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-cmin) ARGUMENT(+Quantity)<Quantity> FLAG(-exec::;) UTILITY(basename) ARGUMENT({})<Regex>
ROOT() UTILITY(ln) FLAG(-f) FLAG(-s) ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT(root) T(git) T(log) T(--pretty=format:%h|%an|%s) T(-10) T(|) T(column) T(-t) T(-s) T(|)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan> FLAG(-daystart)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-ls)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(+Size)<Size>
ROOT() UTILITY(chown) FLAG(-R) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT() UTILITY(mount) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> FLAG(-t) ARGUMENT(ext4)<Option>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(ping) ARGUMENT(Regex)<Regex> UTILITY(awk) FLAG(-F) ARGUMENT(Regex)<Regex> ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File> FLAG(-exec::;) UTILITY(echo) ARGUMENT({})<Regex> UTILITY(wc) FLAG(-l)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::+) UTILITY(awk) ARGUMENT(Program)<Program> ARGUMENT({})<Program>
"ROOT(root) T(find) T(.) T(-name) T(*.pdf) T(-exec) T(sh) T(-c) T(pdftotext) T(""{}"") T(-) T(|) T(grep) T(--with-filename) T(--label=""{}"") T(--color) T(""$1"") T(--) T($1) T(;)"
ROOT() UTILITY(bzip2) FLAG(-k) FLAG(-v) ARGUMENT(File)<File>
ROOT() UTILITY(mkdir) FLAG(-p) ARGUMENT(Directory)<Directory>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-nogroup) FLAG(-print)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> ARGUMENT(Path)<Path> UTILITY(sort) FLAG(-r)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> FLAG(-0) UTILITY(grep) FLAG(-l) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-l) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(zcat) ARGUMENT(Regex)<Regex> UTILITY(wc) FLAG(-l)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(gunzip) ARGUMENT({})<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-user) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(chmod) ARGUMENT(Permission)<Permission> COMMANDSUBSTITUTION() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-amin) ARGUMENT(-Quantity)<Quantity>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-newerat) ARGUMENT(Regex)<Regex> UNARYLOGICOP(!) FLAG(-newerat) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(ln) FLAG(-s) ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(hostname)
ROOT(root) T(ls) T(folder/*.html) T(|) T(xargs) T(-I) T({}) T(sh) T(-c) T(mv) T($1) T(folder/`basename) T($1) T(.html`.txt) T(-) T({})
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(cp) FLAG(-t) ARGUMENT(Directory)<Directory> ARGUMENT({})<File>
ROOT() UTILITY(watch) UTILITY(ls) FLAG(-l) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-n) ARGUMENT(Quantity)<Quantity> FLAG(-I) ARGUMENT({})<Regex> UTILITY(echo) ARGUMENT({})<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T($DIR) T(-type) T(f) T(-exec) T(stat) T(--format) T(%Y) T(:%y) T(%n) T({}) T(;) T(|) T(sort) T(-nr) T(|) T(cut) T(-d:) T(-f2-) T(|) T(head) T(-n) T(1)
ROOT() COMMANDSUBSTITUTION() PIPELINE() UTILITY(md5sum) ARGUMENT(File)<File> UTILITY(cut) FLAG(-b) ARGUMENT(-Number)<Number>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-empty) FLAG(-delete) FLAG(-print)
"ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(!) FLAG(-type) ARGUMENT(d)<Type> FLAG(-printf) ARGUMENT(""%s\n"")<Format> UTILITY(awk) ARGUMENT(Program)<Program>"
ROOT() UTILITY(diff) FLAG(-y) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) UTILITY(head)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-not) FLAG(-path) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(sort) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-ok::;) UTILITY(chown) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) FLAG(-E) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-iregex) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::+) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(grep) FLAG(-l) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(mv) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT($sourcePath)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-mtime) ARGUMENT(+10)<Timespan> FLAG(-name) ARGUMENT(*.log)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<ReservedWord> UTILITY(zip) FLAG(-m) FLAG(-T) ARGUMENT($zipFile)<File> FLAG(-@) ARGUMENT({})<ReservedWord>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(ls) COMMANDSUBSTITUTION() UTILITY(readlink) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(tac) ARGUMENT(File)<File> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT(root) T(find) T(.) T(-type) T(d) T(-print0) T(|) T(xargs) T(-0) T(-n1) T(du) T(-sk) T(|) T(sort) T(-rn) T(>) T(dir-sizes.txt&)
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(tr) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-c) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(Timespan)<Timespan> FLAG(-daystart) FLAG(-exec::;) UTILITY(cp) FLAG(-a) ARGUMENT({})<File> ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT(root) T(paste) T(<() T(head) T(-) T(Quantity) T(File)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(ls) ARGUMENT({})<File>
"ROOT(root) T(tmux) T(new) T(-d) T(bash) T(-c) T(""$CMD"")"
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-E) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(zcat) ARGUMENT({})<Regex> UTILITY(wc) FLAG(-l)
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(head) FLAG(-) ARGUMENT(Quantity)<Quantity> UTILITY(tail) FLAG(-) ARGUMENT(Quantity)<Quantity>
ROOT() PIPELINE() UTILITY(dig) FLAG(-x) ARGUMENT(Regex)<Regex> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(chown) FLAG(--reference) ARGUMENT(File)<File> OPERATOR(--) ARGUMENT(Regex)<Regex>
ROOT(root) T(seq) T(1) T(10) T(|) T(perl) T(-e@x=<>;print@x[0..$#x-3])
ROOT(root) T(mount) T(--bind) T(point) T(mnt)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(sed) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(md5sum) ARGUMENT(File)<File> UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number> UTILITY(sort) FLAG(-u)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mmin) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-user) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(command) T(|) T(tee) T(-a) T(/path/to/logfile)
ROOT() UTILITY(chown) ARGUMENT(Regex)<Regex> FLAG(-R) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(finger) FLAG(-l) UTILITY(awk) ARGUMENT(Program)<Program> UTILITY(sed) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mmin) ARGUMENT(Quantity)<Quantity> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(ls) FLAG(-l) ARGUMENT({})<File>
ROOT() UTILITY(echo) ARGUMENT(Regex)<Regex> COMMANDSUBSTITUTION() PIPELINE() UTILITY(ls) FLAG(-1) ARGUMENT(File)<File> UTILITY(wc) FLAG(-l)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) FLAG(-r) FLAG(-f) ARGUMENT({})<File>
"ROOT(root) T(watch) T(-n) T(1) T(--color) T(bash) T(-c) T(""python) T(-m) T(unittest) T(discover) T(|&) T(pyrg"")"
ROOT() PIPELINE() UTILITY(ping) FLAG(-c) ARGUMENT(Quantity)<Quantity> ARGUMENT(Regex)<Regex> UTILITY(awk) ARGUMENT(Program)<Program> UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number>
ROOT() UTILITY(cat) COMMANDSUBSTITUTION() UTILITY(which) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(grep) FLAG(-H) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) FLAG(-r) FLAG(-f) ARGUMENT({})<File>
ROOT(root) T(find) T(/path/to/files) T(-iname) T(*.jpg) T(-newer) T(timestamp) T(-exec) T(mogrify) T(-format) T(pdf) T({}) T(+;) T(touch) T(timestamp)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(+Permission)<Permission>
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(sort) UTILITY(uniq)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-execdir::;) UTILITY(echo) ARGUMENT(Regex)<Regex> ARGUMENT({})<Regex> ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(finger) UTILITY(sed) ARGUMENT(Program)<Program> UTILITY(sed) ARGUMENT(Program)<Program> UTILITY(awk) ARGUMENT(Program)<Program> UTILITY(sort) UTILITY(uniq)
ROOT() UTILITY(ssh) ARGUMENT(Regex)<Regex> FLAG(-S) ARGUMENT(Path)<Path>
ROOT() UTILITY(chown) FLAG(-R) FLAG(-f) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT(root) T(find) T(temp/medium/*) T(-maxdepth) T(2) T(-iname) T(*.jpg) T(-print0) T(|) T(xargs) T(-0) T(mogrify) T(-resize) T(428x270^) T(-quality) T(80) T(-compress) T(JPEG) T(-monitor) T(-strip)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(read) FLAG(-t) ARGUMENT(Quantity)<Quantity>
"ROOT(root) T(find) T(./) T(-type) T(f) T(-exec) T(bash) T(-c) T(echo) T(""mv) T(\""$1\"") T(\""$(echo) T(""$1"") T(|) T(sed) T(-re) T('s/^([^-]*)-\s*([^\.]*)/\L\1\E-\2/') T(-e) T('s/) T(/_/g') T(-e) T('s/_-/-/g')\"""") T(-) T({}) T(;)"
ROOT() UTILITY(apropos)
ROOT(root) T(find) T(temp/large) T(-iname) T(*.jpg) T(-printf) T(mv) T(%p) T(%p\n) T(|) T(sed) T(s/\.jpg$/_LRG\.jpg/) T(|) T(while) T(read) T(l;) T(do) T(eval) T($l;) T(done)
ROOT() UTILITY(find) FLAG(-L) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(l)<Type> FLAG(-exec::+) UTILITY(rm) OPERATOR(--) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type>
ROOT() UTILITY(grep) ARGUMENT(Regex)<Regex> COMMANDSUBSTITUTION() UTILITY(uname) FLAG(-r)
ROOT(root) T(find) T(Path) T(-type) T(f) T(-mtime) T(+Timespan) T(-mtime) T(-Timespan) T(|) T(xargs) T(-I) T({}) T(tar) T(-c) T(-v) T(-f) T($() T(date) T('+%d%m%Y'_archive.tar)
ROOT() PIPELINE() UTILITY(rev) ARGUMENT(File)<File> UTILITY(sort) FLAG(-k) ARGUMENT(Number)<Number> UTILITY(rev)
"ROOT(root) T(echo) T(-n) T(teststring) T(|) T(gzip) T(-1) T(|) T(tail) T(-c) T(8) T(|) T(head) T(-c) T(4) T(|) T(hexdump) T(-e) T(1/4) T(""%08x"") T(""\n"")"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-d) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mmin) ARGUMENT(-Quantity)<Quantity> FLAG(-type) ARGUMENT(f)<Type> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(ls) FLAG(-l) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(od) FLAG(-t) ARGUMENT(x1)<Type> FLAG(-A) ARGUMENT(n)<Option> ARGUMENT(File)<File> UTILITY(tr) FLAG(-d) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(date) ARGUMENT(+%s)<Format>
ROOT() UTILITY(ssh) FLAG(-M) FLAG(-S) ARGUMENT(Path)<Path> FLAG(-f) FLAG(-n) FLAG(-N) FLAG(-T) FLAG(-L) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) FLAG(-f) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(ping) ARGUMENT(Regex)<Regex> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(!) ARGUMENT(Path)<Path> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-ls)
ROOT(root) T(find) T(repository_dir/$f) T(-type) T(d) T(-name) T(needed_dir) T(|) T(xargs) T(-r) T(svn) T(checkout)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT(root) T(screen) T(-S) T(23536) T(-X) T(quit)
ROOT() UTILITY(whoami)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UNARYLOGICOP(!) FLAG(-newer) ARGUMENT(File)<File> FLAG(-exec::+) UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-inum) ARGUMENT(Quantity)<Quantity> FLAG(-delete)
"ROOT() UTILITY(date) FLAG(-d) ARGUMENT(Regex)<Regex> ARGUMENT(+""%Y-%m-%d %H:%M:%S"")<Format>"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(Permission)<Permission>
ROOT() UTILITY(rsync) FLAG(-a) FLAG(-v) FLAG(-R) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT(root) T(var=$(hg) T(st) T(-R) T($path) T(|) T(sed) T(s/(^) T(*|) T(*$)//g))
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(!) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() UTILITY(rsync) FLAG(-a) FLAG(-v) FLAG(--progress) ARGUMENT(File)<File> ARGUMENT(File)<File> FLAG(--exclude) ARGUMENT(Regex)<Regex>
ROOT(root) T(echo) T(-n) T(Regex) T(Regex) T(Regex) T($() T(hostname)
ROOT() UTILITY(cp) FLAG(-r) ARGUMENT(File)<File> ARGUMENT(File)<File>
"ROOT(root) T(find) T(.) T(-name) T(.svn) T(-type) T(d) T(|) T(while) T(read) T(ss;) T(do) T(dir=$(dirname) T($ss);) T(test) T($(ls) T(-a) T($dir) T(|) T(wc) T(-l)) T(==) T(3) T(&&) T(echo) T(svn) T(rm) T(""$dir"";) T(done)"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(chmod) ARGUMENT(Permission)<Permission> COMMANDSUBSTITUTION() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(echo) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT({})<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-l) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(tr) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> UTILITY(nl) UTILITY(sort) FLAG(-u) FLAG(-k) ARGUMENT(Number)<Number> UTILITY(sort) FLAG(-n) UTILITY(cut) FLAG(-f) ARGUMENT(Number)<Number>
ROOT() PIPELINE() UTILITY(du) FLAG(-h) FLAG(-D) FLAG(-a) FLAG(-x) FLAG(-d) ARGUMENT(Quantity)<Quantity> ARGUMENT(File)<File> UTILITY(sort) FLAG(-h) UTILITY(tail) FLAG(-n) ARGUMENT(Quantity)<Quantity>
ROOT() PIPELINE() UTILITY(seq) ARGUMENT(Number)<Number> UTILITY(xargs)
ROOT() PIPELINE() UTILITY(history) UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(Path) T(-type) T(f) T(-maxdepth) T(Quantity) T(-name) T(Regex) T(-print0) T(|) T(sort) T(-z) T(|) T(xargs) T(-0) T(-I) T({}) T(bash) T(File) T({})
ROOT() UTILITY(cd) COMMANDSUBSTITUTION() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-print0) UTILITY(sort) FLAG(-z) UTILITY(tr) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> UTILITY(tail) FLAG(-) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-exec::;) UTILITY(chgrp) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT(root) T(find) T(/home/<user>) T(-type) T(f) T(-exec) T(file) T({}) T(+) T(|) T(grep) T(-E) T(MPEG) T(v4|EBML|Microsoft) T(ASF|Macromedia) T(Flash) T(Video|WebM|Apple) T(QuickTime) T(movie|AVI)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(-Size)<Size>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-E) FLAG(-o) ARGUMENT(Regex)<Regex> UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number>
ROOT(root) T(cal) T(-h) T(|) T(sed) T(s/$(date) T(+%d)/$\033\[94m&\033\[0m/g)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-size) ARGUMENT(Size)<Size>
ROOT(root) T(cd) T(bar1) T(find) T(.) T(-maxdepth) T(1) T(-name) T(*foo*) T(-not) T(-name) T(*.cc) T(-exec) T(echo) T(ln) T(-s) T($PWD/{}) T(../bar2)
ROOT(root) T(find) T(.) T(-type) T(f) T(-name) T(*.java) T(|) T(xargs>) T(tar) T(rvf) T(myfile.tar)
ROOT(root) T(find) T(.) T(-type) T(f) T(!) T(-name) T($OUTPUT) T(-exec) T(md5sum) T($MD5SUM_OPTIONS) T({}) T(+) T(>) T($OUTPUT)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::+) UTILITY(rm) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(fold)
"ROOT(root) T(find) T(.) T(-mtime) T(+2) T(|) T(perl) T(-pe) T(s{^}{\""};s{$}{\""}) T(>) T(~/output.file)"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(!) BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) FLAG(-type) ARGUMENT(f)<Type> FLAG(-mtime) ARGUMENT(Timespan)<Timespan> FLAG(-print0)
ROOT(root) T(sudo) T(ls) T(-hal) T(/root/) T(|) T(sudo) T(bash) T(-c) T(cat) T(>) T(/root/test.out)
ROOT() PIPELINE() UTILITY(head) FLAG(-) ARGUMENT(Quantity)<Quantity> ARGUMENT(File)<File> UTILITY(tail) FLAG(-) ARGUMENT(Quantity)<Quantity> UTILITY(cut) FLAG(-c) ARGUMENT(Number)<Number>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-and) FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(basename) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-newer) ARGUMENT(File)<File> UNARYLOGICOP(!) FLAG(-newer) ARGUMENT(File)<File> ARGUMENT(Path)<Path> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(zcat) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-E) ARGUMENT(Regex)<Regex> FLAG(-c)
ROOT(root) T(/bin/sh) T(-c) T(/bin/true) T($(seq) T(1) T(99999))
ROOT(root) T(find) T(Mainfolder) T(>) T(outputfile)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(d)<Type> FLAG(-print) FLAG(-exec::;) UTILITY(rm) FLAG(-r) FLAG(-f) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan>
ROOT(root) T(find) T(.) T(-depth) T(-name) T(*) T(*) T(|) T(while) T(IFS=) T(read) T(-r) T(f) T(;) T(do) T(mv) T(-i) T($f) T($(dirname) T($f)/$(basename) T($f|tr) T(') T(') T(_)) T(;) T(done)
ROOT() UTILITY(chown) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UNARYLOGICOP(-prune) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-r) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(sed) FLAG(-i) ARGUMENT(Program)<Program> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-depth) FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(Timespan)<Timespan>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(-Size)<Size>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-wholename) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-print)
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-E) FLAG(-o) ARGUMENT(Regex)<Regex> UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number>
ROOT(root) T(cd) T($() T(dirname) T($() T(which) T(Regex)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(grep) FLAG(-E) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
"ROOT(root) T(seq) T(1) T(10) T(|) T(perl) T(-ne) T(push) T(@l,) T($_;) T(print) T(shift) T(@l) T(if) T(@l) T(>) T(3)"
ROOT() UTILITY(ls) FLAG(-a) FLAG(-l) FLAG(-r) FLAG(-t) COMMANDSUBSTITUTION() UTILITY(pwd)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(Permission)<Permission>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-xdev) FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(grep) FLAG(-i) ARGUMENT(Regex)<Regex> FLAG(-l) ARGUMENT({})<File> FLAG(-exec::;) UTILITY(sed) FLAG(-i) ARGUMENT(Program)<Program> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) FLAG(-r) FLAG(-f) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-user) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(paste) FLAG(-d) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT(root) T(find) T(.) T(-name) T(*.fq) T(-print0) T(|) T(xargs) T(-0) T(-n) T(1) T(fastqc)
ROOT() UTILITY(split) FLAG(-l) ARGUMENT(Quantity)<Quantity> ARGUMENT(File)<File>
ROOT(root) T(read) T(-t) T(3) T(variable) T(<) T(<() T(tail) T(-f) T(logfile.log) T(|) T(grep) T(something)
"ROOT(root) T(ssh) T(-o) T(""StrictHostKeyChecking) T(no"") T(-i) T(File) T(Regex) T(command)"
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number> UTILITY(uniq) FLAG(-c)
ROOT() UTILITY(grep) FLAG(-v) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(who) UTILITY(awk) ARGUMENT(Program)<Program> UTILITY(sort) FLAG(-u) UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-regex) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(less)
"ROOT(root) T(find) T($DIR) T(-name) T(*.mod) T(-type) T(f) T(-exec) T(bash) T(-c) T(remodup) T(""$1"") T(-) T({}) T(;)"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(echo) ARGUMENT(Regex)<Regex> ARGUMENT({})<Regex>
ROOT(root) T(join) T(-1) T(Regex) T(-2) T(Regex) T(<() T(sort) T(File) T(File) T(File)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-group) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(chgrp) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(zcat) ARGUMENT(Regex)<Regex> UTILITY(split) FLAG(-d) FLAG(-l) ARGUMENT(Quantity)<Quantity> FLAG(-a) ARGUMENT(Quantity)<Quantity> ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-path) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(grep) FLAG(-i) FLAG(-l) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT(root) T(find) T(.) T(-type) T(f) T(-mtime) T(-14) T(|) T(sed) T(s|./||) T(>deploy.txt)
ROOT() PIPELINE() UTILITY(awk) FLAG(-F) ARGUMENT(Regex)<Regex> ARGUMENT(Program)<Program> ARGUMENT(Program)<Program> UTILITY(sort) UTILITY(uniq) FLAG(-c) UTILITY(sort) FLAG(-n) FLAG(-r)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-name) ARGUMENT(Regex)<Regex>
"ROOT(root) T(find) T(/path/to/pdfs/) T(-type) T(f) T(-name) T($1*.pdf) T(-exec) T(stat) T(-f) T(%10Dm) T(%SN) T({};) T(|) T(sort) T(-k1,1n) T(-k2,2)"
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-exec::;) UTILITY(ls) FLAG(-l) FLAG(-h) ARGUMENT({})<File> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(dirname) COMMANDSUBSTITUTION() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(head) FLAG(-) ARGUMENT(Quantity)<Quantity>
"ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(!) FLAG(-type) ARGUMENT(d)<Type> FLAG(-printf) ARGUMENT(""%s\n"")<Format> UTILITY(awk) ARGUMENT(Program)<Program>"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(!) FLAG(-path) ARGUMENT(Regex)<Regex> UNARYLOGICOP(!) FLAG(-path) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(.) T(-name) T(Lemon*.mp3) T(-print0) T(|) T(xargs) T(-­0) T(-i) T(mplayer) T({})
ROOT() UTILITY(rsync) FLAG(-p) FLAG(-r) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT(root) T(find) T(.) T(-type) T(f) T(-print0) T(|) T(xargs) T(-0) T(-n) T(1) T(-P) T(4) T(dos2unix)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> UNARYLOGICOP(-not) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(--null) FLAG(-I) ARGUMENT({})<Regex> UTILITY(chown) FLAG(-R) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(cat) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-i) FLAG(-H) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(ls) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(mv) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
"ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-printf) ARGUMENT(""%s %p\n"")<Format> UTILITY(awk) ARGUMENT(Program)<Program>"
ROOT() UTILITY(set) COMMANDSUBSTITUTION() PIPELINE() UTILITY(cal) ARGUMENT(DateTime)<DateTime> ARGUMENT(DateTime)<DateTime> UTILITY(tr) FLAG(-s) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> UTILITY(tail) FLAG(-) ARGUMENT(Quantity)<Quantity>
ROOT(root) T(find) T(dir) T(-type) T(f) T(|) T(xargs) T(md5sum) T(>>) T(file.txt)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(cat) ARGUMENT({})<File>
ROOT(root) T(alias) T(histgrep=history) T(|) T(grep)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-regex) ARGUMENT(Regex)<Regex> UTILITY(wc) FLAG(-l)
ROOT(root) T(find) T(.) T(-name) T(*.zip) T(-execdir) T(unzip) T({}) T(;)
"ROOT() UTILITY(kill) FLAG(-) ARGUMENT(Regex)<Regex> COMMANDSUBSTITUTION() PIPELINE() UTILITY(ps) FLAG(-A) FLAG(-o) ARGUMENT(stat,ppid)<Format> UTILITY(grep) FLAG(-e) ARGUMENT(Regex)<Regex> UTILITY(awk) ARGUMENT(Program)<Program>"
ROOT() PIPELINE() UTILITY(grep) FLAG(-a) FLAG(-o) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> UTILITY(tr) FLAG(-d) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(Timespan)<Timespan> UTILITY(grep) FLAG(-v) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-v) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(ls) FLAG(-l) FLAG(-b)
ROOT(root) T(find) T(/storage) T(-type) T(f) NT(<n>) T(-name) T(*.mp4) T(-o) T(-name) T(*.flv) T(-printf) T(%T@) T(%p\0) T(|) T(sort) T(-zn))
ROOT() UTILITY(pstree) FLAG(-s) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::+) UTILITY(grep) FLAG(-H) FLAG(-n) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-print0)
ROOT() UTILITY(source) ARGUMENT(File)<File>
ROOT(root) T(git) T(ls-files) T(|) T(xargs) T(wc) T(-l)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-mmin) ARGUMENT(-Quantity)<Quantity>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(ls) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT(root) T(find) T($DIRECTORY_TO_PROCESS) T(-type) T(f) T(-iregex) T(.*\.$FILES_TO_PROCES) T(!) T(-name) T($find_excludes) T(-print0) T(|) T(xargs) T(-0) T(-I) T({}) T(bash) T(script.bash) T({})
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(Permission)<Permission>
ROOT() UTILITY(find) FLAG(-L) ARGUMENT(Path)<Path>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-exec::;) UTILITY(touch) ARGUMENT({})<File>
ROOT() COMMANDSUBSTITUTION() UTILITY(pwd) FLAG(-P)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) FLAG(-f) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(ls) FLAG(-l) FLAG(-r) FLAG(-t) ARGUMENT({})<File> UTILITY(awk) ARGUMENT(Program)<Program> ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(grep) FLAG(-r) FLAG(-l) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> UTILITY(tr) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-r) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(file) ARGUMENT({})<File> UTILITY(grep) FLAG(-e) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-v) FLAG(-e) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(ssh) FLAG(-i) ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT(root) T(unset) T(array[2])
ROOT(root) T(find) T(/) T(-size) T(+5000000c) T(2>) T(/dev/null)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(sed) ARGUMENT(Program)<Program>
ROOT() UTILITY(rsync) FLAG(--recursive) FLAG(--exclude) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-exec::;) UTILITY(chown) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT(root) T(chown) T(-R) T($() T(whoami)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-print) UTILITY(grep) FLAG(-F) FLAG(-x) FLAG(-v) FLAG(-f) ARGUMENT(Regex)<File>
ROOT(root) T(exit) T(N)
ROOT(root) T(ls) T(2>&1) T(|) T(tee) T(--append) T(/tmp/ls.txt)
ROOT(root) T($) T(find) T(.) T(-name) T(*mp3) T(-print0) T(|) T(xargs) T(-0) T(mid3iconv) T(-e) T(<source-encoding>) T(-d)
"ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-printf) ARGUMENT(""%T+ %p\0"")<Format> UTILITY(sort) FLAG(-z) UTILITY(grep) FLAG(-z) FLAG(-o) FLAG(-m) ARGUMENT(Regex)<Quantity> ARGUMENT(File)<Regex> UTILITY(cat)"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-atime) ARGUMENT(+Timespan)<Timespan>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-l) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-newermt) COMMANDSUBSTITUTION() UTILITY(date) ARGUMENT('+%Y-%m-%d %H:%M:%S')<Format> FLAG(-d) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(ssh) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-print0) UTILITY(grep) FLAG(--null) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-0)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-exec::;) UTILITY(echo) ARGUMENT({})<Regex>
ROOT(root) T(find) T(.) T(-print) T(>myfile.sh)
ROOT() UTILITY(watch) FLAG(-n) ARGUMENT(Quantity)<Quantity> UTILITY(ls)
ROOT(root) T(ssh) T(user@server) T(/bin/bash) T(<<EOT)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(Permission)<Permission> UTILITY(head)
ROOT() UTILITY(ifconfig) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(.) T(-type) T(f) T(-name) T(YourProgramName) T(-execdir) T(./YourProgramName) T(YourParameterFile) T(;)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(-Permission)<Permission> FLAG(-print0) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(-not) FLAG(-iwholename) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-wholename) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) FLAG(-print) BINARYLOGICOP(-or) FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(hostname) ARGUMENT(Regex)<Regex>
ROOT(root) T(ruby-script.rb) T(|) T(column) T(-s) T($\t) T(-t)
ROOT(root) T(find) T(.) T(-name) T(modules) T(-exec) T(sh) T(-c) T(exit) T(0) T(;)
ROOT() UTILITY(sort) FLAG(-n) FLAG(-r) FLAG(-k) ARGUMENT(File)<Number> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-daystart) FLAG(-mtime) ARGUMENT(-Timespan)<Timespan>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT(File)<File> ARGUMENT(File)<File> ARGUMENT(File)<File> ARGUMENT(File)<File> ARGUMENT(File)<File> ARGUMENT({})<File> UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(cd) COMMANDSUBSTITUTION() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(sort) FLAG(-t) ARGUMENT(Regex)<Regex> FLAG(-k) ARGUMENT(Number)<Number> FLAG(-n) FLAG(-r) UTILITY(head) FLAG(-) ARGUMENT(Quantity)<Quantity>
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(more)
ROOT(root) T(find) T(/data/images) T(-type) T(f) T(-newer) T(/tmp/start) T(-not) T(-newer) T(/tmp/end) T(>) T(output.txt)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-path) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-type) ARGUMENT(d)<Type> UTILITY(wc) FLAG(-l)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-depth) FLAG(-type) ARGUMENT(f)<Type> FLAG(-print)
ROOT() PIPELINE() UTILITY(tree) FLAG(--help) UTILITY(head) FLAG(-n) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(-Size)<Size>
ROOT() PIPELINE() UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number> UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number> UTILITY(sort) UTILITY(uniq) FLAG(-c)
ROOT() UTILITY(diff) FLAG(-u) ARGUMENT(Quantity)<Quantity> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(Size)<Size> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UNARYLOGICOP(!) FLAG(-newer) ARGUMENT(File)<File> UNARYLOGICOP(!) FLAG(-samefile) ARGUMENT(Regex)<Regex> FLAG(-delete)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::+) UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-atime) ARGUMENT(+Timespan)<Timespan> FLAG(-print) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
"ROOT(root) T(yum) T(check-update) T(|) T(awk) T({if($5) T(~) T(/updates/){print) T($1}}) T(|) T(tr) T(\n) T(,)"
ROOT() PIPELINE() UTILITY(mount) FLAG(-l) UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(sed) ARGUMENT(Program)<Program> UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(tee) FLAG(-a) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(tar) FLAG(-c) FLAG(-z) FLAG(-f) ARGUMENT(File)<File> ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(yes) ARGUMENT(Regex)<Regex> UTILITY(bash)
ROOT(root) T(objdump) T(--disassemble) T(my-crashing-program) T(|) T(less)
"ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-printf) ARGUMENT(""found\n"")<Format>"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-atime) ARGUMENT(+Timespan)<Timespan> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT() COMMANDSUBSTITUTION() PIPELINE() UTILITY(md5sum) ARGUMENT(File)<File> UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(Timespan)<Timespan>
ROOT() UTILITY(awk) FLAG(-F) ARGUMENT(Regex)<Regex> ARGUMENT(Program)<Program> ARGUMENT(Program)<Program>
ROOT(root) T(dirname) T($() T(dirname) T($() T(which) T(Regex)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(f)<Type>
"ROOT(root) T(ps) T(-eo) T(size,pid,user,command) T(--sort) T(-size) T(|) T(awk) T({) T(hr=$1/1024) T(;) T(printf(""%13.2f) T(Mb) T("",hr)) T(}) T({) T(for) NT(<n>) T(x=4) T(;) T(x<=NF) T(;) T(x++) T({) T(printf(""%s) T("",$x)) T(}) T(print) T("""") T(}) T(|) T(awk) T({total=total) T(+) T($1}) T(END) T({print) T(total})"
ROOT() UTILITY(mv) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(pwd) FLAG(-L)
ROOT() PIPELINE() UTILITY(ifconfig) UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-v) ARGUMENT(Regex)<Regex> UTILITY(head) FLAG(-n) ARGUMENT(Quantity)<Quantity> UTILITY(cut) FLAG(-f) ARGUMENT(Number)<Number> FLAG(-d) ARGUMENT(Regex)<Regex> UTILITY(cut) FLAG(-f) ARGUMENT(Number)<Number> FLAG(-d) ARGUMENT(Regex)<Regex>
"ROOT(root) T(od) T(-a) T(-An) T(-v) T(file) T(|) T(perl) T(-0777ne) T(s/\n//g,print) T(""$_\n) T("") T(for) T(/(?:esc|) T(fs|) T(gs|) T(us)?(?:(?!esc|) T(fs|) T(gs|) T(us).)*/gs)"
ROOT() PIPELINE() UTILITY(pwd) UTILITY(sed) ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(echo) FLAG(-n) ARGUMENT(Regex)<Regex> UTILITY(md5)
ROOT(root) T(rpm2cpio) T(foo.rpm) T(|) T(xzcat) T(|) T(cpio) T(-idmv)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-not) FLAG(-path) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-size) ARGUMENT(+Size)<Size>
ROOT(root) T(cat) T(File) T(-n) T(|) T(grep) T($() T(whoami)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(basename) ARGUMENT({})<Regex>
"ROOT() UTILITY(mount) FLAG(-o) ARGUMENT(ro,remount)<Option> FLAG(-t) ARGUMENT(yaffs2)<Option> ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>"
ROOT(root) T(ssh) T(-T) T(tunneluser@111.222.333.444) T(<<EOI)
ROOT() UTILITY(chown) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT() UTILITY(w) FLAG(-h) ARGUMENT(Regex)<Regex>
ROOT(root) T(ldd) T(/bin/*) T(/usr/bin/*) T(|) T(sed) T(-e) T(/^[^\t]/) T(d;) T(s/^\t\(.*) T(=>) T(\)\?\([^) T(]*\)) T((.*/\2/g) T(|) T(sort) T(|) T(uniq) T(-c)
ROOT() UTILITY(ln) FLAG(-f) ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(file) FLAG(-b) FLAG(-i) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(which) FLAG(-a) ARGUMENT(Regex)<Regex> UTILITY(wc) FLAG(-l)
ROOT(root) T(find) T(.) T(-name) T(*.txt) T(|) T(perl) T(-lne) T(print) T(if) T(/c|d|z/)
"ROOT(root) T(find) T(.) T(-name) T(sqlite.db) T(-exec) T(sqlite3) T({}) T(SELECT) T(*) T(FROM) T(table) T(WHERE) T(column1=""value"") T(;)"
ROOT(root) T(ps) T(-o) T(user=) T(-p) T($$) T(|) T(awk) T({print) T($1})
ROOT(root) T(cd) T($() T(dirname) T($() T(which) T(Regex)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-path) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) UNARYLOGICOP(-not) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() UTILITY(chown) FLAG(-R) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() UTILITY(pstree) FLAG(-A) FLAG(-s) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() UTILITY(column) FLAG(-t) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(Size)<Size>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-execdir::;) UTILITY(ls) FLAG(-l) FLAG(-a) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> UTILITY(sed) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(Timespan)<Timespan>
ROOT(root) T(find) T($dir) T(-type) T(f) T(-name) T($1) T(-exec) T(getLine) T({}) T(;)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-print)
ROOT() PIPELINE() UTILITY(ps) FLAG(-e) FLAG(-f) UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-v) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(grep) FLAG(-n) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> FLAG(-print) UTILITY(wc) FLAG(-l)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(rsync) FLAG(-r) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT(root) T(date) T(-d) T($() T(date) T(-d) T(Regex) T(+%Y-%m-1)
ROOT() PIPELINE() UTILITY(set) UTILITY(grep) FLAG(-P) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(-prune) FLAG(-empty)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-regex) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(echo) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT({})<Regex>
ROOT(root) T(comm) T(-2) T(-3) T(<() T(ls) T(File) T(|) T(sort)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(grep) FLAG(-l) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) FLAG(-f) ARGUMENT({})<File>
ROOT() UTILITY(which) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mount) UNARYLOGICOP(!) ARGUMENT(Path)<Path> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-path) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-ls)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(Permission)<Permission>
ROOT(root) T(find) T(.) T(-iname) T(*.png) T(|) T(while) T(read) T(i;) T(do) T(mogrify) T(-format) T(jpg) T($i) T(&&) T(rm) T($i;) T(echo) T(Converted) T($i) T(to) T(${i%.*}.jpg;) T(done)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity>
ROOT(root) T(find) T(/usr/pcapps/) T(-mount) T(-type) T(f) T(-size) T(+1000000c) T(|) T(perl) T(-lpe) T(s{) T(}{\\) T(}g) T(|) T(xargs) T(ls) T(-l) T(|) T(sort) T(+4nr) T(|) T(head) T(-200)
ROOT(root) T(find) T(/) T(-type) T(f) T(-name) T(dummy) T(2>/dev/null) T(-exec) T(cat) T({}) T(;) T(>tesst.txt)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-printf) ARGUMENT('%TY-%Tm-%Td %TH:%TM: %Tz %p\n')<Format> UTILITY(sort) FLAG(-n) UTILITY(tail) FLAG(-n) ARGUMENT(Quantity)<Quantity>
"ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-printf) ARGUMENT(""\n%Ab %p"")<Format> UTILITY(head) FLAG(-n) ARGUMENT(Quantity)<Quantity> UTILITY(sort) FLAG(-k) ARGUMENT(Number)<Number>"
ROOT(root) T(find) T(pathfolder) T(-type) T(f) T(2>) T(err.txt) T(|) T(wc) T(-l)
ROOT() PIPELINE() UTILITY(env) UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(.) T(-type) T(f) T(-print0) T(|) T(xargs) T(-0) T(stat) T(-f) T(%m) T(%N) T(|) T(sort) T(-n) T(|) T(tail) T(-1) T(|) T(cut) T(-f2-) T(-d)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print) UTILITY(sed) FLAG(-e) ARGUMENT(Program)<Program> FLAG(-e) ARGUMENT(Program)<Program> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(-Permission)<Permission> FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(who) FLAG(-b) UTILITY(awk) ARGUMENT(Program)<Program> UTILITY(date) FLAG(-f) ARGUMENT(File)<File>
ROOT(root) T(yes) T(1) T(|) T(script) T(-c) T(aspell) T(check) T(text.txt) T(/dev/null)
ROOT() UTILITY(find) ARGUMENT({})<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> BINARYLOGICOP(-or) FLAG(-type) ARGUMENT(l)<Type> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-perm) ARGUMENT(+Permission)<Permission>
ROOT(root) T(find) T(.) T(-type) T(f) T(!) T(-iregex) T(.\|./.git) T(-exec) T(perl) T(-i) T(-pe) T(s/$1/$upper2/gi) T({}) T(;)
ROOT(root) T(find) T(/var) T(-iname) T(*.log) T(|) T(xargs) T(bzip) T(-)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-delete)
ROOT() UTILITY(find) FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> ARGUMENT(Path)<Path>
ROOT(root) T(find) T(.) T(-type) T(d) T(-exec) T(/path/to/script.sh) T({}) T(;)
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(rev) UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number> UTILITY(rev)
ROOT(root) T(alias) T(pwd=echo) T(-n) T(`pwd`) T(|) T(pbcopy)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-group) ARGUMENT(Regex)<Regex> UTILITY(head)
ROOT(root) T(exit) T(1)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print) UTILITY(grep) FLAG(-P) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(rm) FLAG(-f) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(read) FLAG(-n) ARGUMENT(Quantity)<Quantity> FLAG(-e) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(rev) UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number> UTILITY(rev)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(split)
ROOT() UTILITY(jobs) FLAG(-x) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-regex) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(tr) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> FLAG(-q)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT(root) T(sort) T(<() T(ls) T(File)
ROOT(root) T(find) T(/path/to/files/*) T(-printf) T(%TY%Tm%Td%TH%TM%TS|%p|%l) T(-exec) T(stat) T(-Lc) T(|%y) T({}) T(;) T(|) T(sed) T(-r) T(s/(.*\|)([0-9]{4})\-([0-9]{2})\-([0-9]{2})) T(([0-9]{2})\:([0-9]{2})\:([0-9]{2}\.[0-9]{9}).*/\1\2\3\4\5\6\7/g)
ROOT() UTILITY(read) FLAG(-s) FLAG(-N) ARGUMENT(Quantity)<Quantity> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-wholename) ARGUMENT(Regex)<Regex>
"ROOT(root) T(find) T(./) T(-name) T(*) T(*) T(-type) T(f) T(-d) T(1) T(|) T(perl) T(-ple) T($file) T(=) T($_;) T($file) T(=~) T(s/\s+/_/g;) T(rename($_,) T($file);)"
ROOT() UTILITY(dirname) COMMANDSUBSTITUTION() UTILITY(readlink) FLAG(-f) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(mv) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-links) ARGUMENT(+Quantity)<Quantity> FLAG(-print)
ROOT() UTILITY(ssh) FLAG(-N) FLAG(-L) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(wc) FLAG(-l) ARGUMENT({})<File> UTILITY(sort) FLAG(-n) FLAG(-r)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(basename) ARGUMENT({})<Regex>
ROOT() UTILITY(od) FLAG(-t) ARGUMENT(fD)<Type>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) BRACKET() FLAG(-type) ARGUMENT(f)<Type> FLAG(-print)
ROOT(root) T(column) T(<<<) T($(printf) T('%s\n') T($module))
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-depth) FLAG(-print) UTILITY(cpio) FLAG(-o) FLAG(-v) FLAG(-0) ARGUMENT(Regex)<Regex> UTILITY(tee) FLAG(-a) ARGUMENT(File)<File>
ROOT(root) T(alias) T(webshare=python) T(-m) T(SimpleHTTPServer)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-exec::;) UTILITY(ls) FLAG(-l) FLAG(-d) ARGUMENT({})<File>
ROOT(root) T(printf) T($(pwd)) T(|) T(pbcopy)
ROOT() UTILITY(mount) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT(Directory)<Directory> FLAG(-o) ARGUMENT(rw)<Option>
ROOT() PIPELINE() UTILITY(sed) ARGUMENT(Program)<Program> ARGUMENT(File)<File> UTILITY(column) FLAG(-s) ARGUMENT(Regex)<Regex> FLAG(-t)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-mmin) ARGUMENT(-Quantity)<Quantity>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print) FLAG(-delete)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(f)<Type> UNARYLOGICOP(!) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(ln) FLAG(-s) ARGUMENT({})<File> ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(who) UTILITY(wc) FLAG(-l)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-path) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() PIPELINE() UTILITY(seq) ARGUMENT(Number)<Number> ARGUMENT(Number)<Number> UTILITY(sed) FLAG(-n) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(bzip2) FLAG(-d) ARGUMENT({})<File>
ROOT() UTILITY(tr) FLAG(-c) FLAG(-d) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(ls) FLAG(-l) UTILITY(tail) FLAG(-n) ARGUMENT(+Quantity)<Quantity> UTILITY(head) FLAG(-n) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(rename) FLAG(-v) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(sort) FLAG(-u)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(Size)<Size>
ROOT() PIPELINE() UTILITY(finger) UTILITY(sed) ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> UTILITY(grep) FLAG(-v) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) FLAG(-r) FLAG(-f) ARGUMENT({})<File> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type>
ROOT() UTILITY(crontab) FLAG(-u) ARGUMENT(Regex)<Regex> FLAG(-l)
ROOT() UTILITY(join) FLAG(-v) ARGUMENT(Quantity)<Quantity> ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-v) FLAG(-c) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UNARYLOGICOP(!) FLAG(-perm) ARGUMENT(-Permission)<Permission> FLAG(-ls)
ROOT() PIPELINE() UTILITY(ifconfig) UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-v) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-E) FLAG(-o) ARGUMENT(Regex)<Regex> UTILITY(head) FLAG(-) ARGUMENT(Quantity)<Quantity>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UTILITY(awk) FLAG(-F) ARGUMENT(Regex)<Regex> ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-ctime) ARGUMENT(-Timespan)<Timespan> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(.) T(-type) T(f) T(|) T(perl) T(-ne) T(print) T($1) T(if) T(m/\.([^.\/]+)$/) T(|) T(sort) T(|) T(uniq) T(-c) T(|) T(sort) T(-n)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(-Size)<Size> FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-exec::;) UTILITY(ls) FLAG(-l) ARGUMENT({})<File>
ROOT() UTILITY(tree) FLAG(-L) ARGUMENT(Number)<Number> FLAG(-f) FLAG(-i)
ROOT() UTILITY(info) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
"ROOT(root) T(find) T(./lib/app) T(-type) T(f) T(|) T(sort) T(|) T(xargs) T(awk) T(ENDFILE) T({print) T(""""}) T({print}) T(>) T(myFile)"
ROOT() UTILITY(date) FLAG(--rfc-3339) ARGUMENT(seconds)<Option>
ROOT(root) T(find) T(/home) T(-type) T(f) T(-name) T(*.ext) T(-exec) T(perl) T(-pi) T(-e) T(s/\r//g) T({}) T(;)
ROOT(root) T(find) T(-name) T(*my) T(key) T(phrase*) T(>) T(mylist.txt)
ROOT() PIPELINE() UTILITY(groups) ARGUMENT(Regex)<Regex> UTILITY(tr) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-E) FLAG(-v) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-depth) FLAG(-wholename) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-mtime) ARGUMENT(-Timespan)<Timespan> FLAG(-print)
ROOT(root) T(watch) T(-n) T(5) T(-c) T(tail) T(-f) T(-n) T(50) T(mylogfile.txt) T(|) T(ccze)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(d)<Type> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT(root) T(find) T(.) T(-iname) T(*.mov) T(-print0) T(|) T(xargs) T(-0) T(-i) T(sh) T(-c) T(ffmpeg) T(-i) T({}) T(-f) T(flv) T(`basename) T({}`)
ROOT(root) T(find) T(/var) T(-iname) T(*.log) T(-exec) T(bzip) T({}) T(;)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(rename) ARGUMENT(Regex)<Regex> ARGUMENT({})<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-ls)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(Permission)<Permission> FLAG(-print) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT(root) T(yes) T(ok) T(|) T(recalcitrant.php)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-ls)
ROOT(root) T(set) T(-o)
ROOT(root) T(find) T(${INPUT_LOCATION}) T(-name) T(*.pdf.marker) T(-exec) T(sh) T(-c) T(echo) T(mv) T($0) T(`dirname) T($0`/`basename) T($0) T(.marker`) T($1) T({}) T(${OUTPUT_LOCATION}) T(;)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(d)<Type> FLAG(-delete)
ROOT() UTILITY(mktemp)
ROOT() UTILITY(gzip) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(grep) ARGUMENT(Regex)<Regex> COMMANDSUBSTITUTION() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(.)<Path> FLAG(-name) ARGUMENT(*.pdf)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-n) ARGUMENT(1)<Quantity> FLAG(-I) ARGUMENT({})<Regex> UTILITY(pdftotext) ARGUMENT({})<File> ARGUMENT(-)<File>
"ROOT(root) T(md5sum) T(*.txt) T(|) T(sort) T(|) T(perl) T(-ne) T(($y,$f)=split;) T(print) T(""$f\n"") T(unless) T($y) T(eq) T($x;) T($x=$y)"
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> UTILITY(tr) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> UTILITY(sed) ARGUMENT(Program)<Program>
ROOT(root) T(alias) T(rm1g=find) T(/) T(-type) T(f) T(-name) T(*.tar) T(-size) T(+1G) T(-exec) T(rm) T(-i) T({}) T(\;)
ROOT(root) T(find) T(.) T(-type) T(f) T(-exec) T(grep) T(-i) T(“redeem) T(reward”) T({}) T(;) T(-print) T(2>/dev/null)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-exec::+) UTILITY(mv) FLAG(-t) ARGUMENT(Directory)<Directory> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::+) UTILITY(grep) FLAG(-H) FLAG(-i) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(chmod) FLAG(-R) ARGUMENT(Permission)<Permission> ARGUMENT(File)<File>
ROOT() UTILITY(source) PROCESSSUBSTITUTION(<) UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-cmin) ARGUMENT(+Quantity)<Quantity> UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(sed) ARGUMENT(Program)<Program>
ROOT(root) T(shift) T([n])
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(sleep) ARGUMENT(Timespan)<Timespan> UTILITY(sleep) ARGUMENT(Timespan)<Timespan>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(column) FLAG(-t)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan> FLAG(-print)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> UTILITY(grep) FLAG(-v) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) FLAG(-r) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-exec::;) UTILITY(wc) FLAG(-l) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(sort) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(wc) FLAG(-l) ARGUMENT({})<File>
ROOT() UTILITY(cat) COMMANDSUBSTITUTION() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT(root) T(brew) T(link) T(bash-completion)
ROOT(root) T(find) T(/stuff) T(-type) T(d) T(-exec) T(script.py) T({}) T(+)
ROOT(root) T(exit)
ROOT() UTILITY(rm) FLAG(-r) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-regextype) ARGUMENT(posix-egrep)<Type> FLAG(-regex) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(grep) FLAG(-v) FLAG(-z) FLAG(-Z) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-v) FLAG(-z) FLAG(-Z) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(ls) FLAG(-1) FLAG(-L) FLAG(-d) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type> FLAG(-ls)
ROOT(root) T(Prints) T(what) T(month) T(it) T(was) T(222) T(days) T(ago)
ROOT() UTILITY(mkdir) ARGUMENT(Directory)<Directory>
ROOT(root) T(find) T(-exec) T(some_script) T({}) T(;)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(mount) FLAG(-a)
ROOT() UTILITY(rsync) FLAG(-p) FLAG(-g) FLAG(-o) FLAG(-d) FLAG(-t) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(rsync) FLAG(-a) FLAG(-v) FLAG(-z) FLAG(--chmod) ARGUMENT(o-rwx)<Option> FLAG(-p) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print) UTILITY(tee) FLAG(-a) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(ls) FLAG(-m) UTILITY(tr) FLAG(-d) ARGUMENT(Regex)<Regex> UTILITY(tr) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(tail) FLAG(-) ARGUMENT(Quantity)<Quantity> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(sed) ARGUMENT(Program)<Program> ARGUMENT({})<File> UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(pushd) ARGUMENT(Directory)<Directory>
ROOT(root) T(cd) T($() T(dirname) T($() T(which) T(Regex)
ROOT() UTILITY(hostname)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-n) ARGUMENT(Quantity)<Quantity> FLAG(-I) ARGUMENT({})<Regex> UTILITY(dirname) ARGUMENT({})<Regex>
ROOT() UTILITY(bzip2) FLAG(-d) FLAG(-c) ARGUMENT(File)<File>
"ROOT() UTILITY(mount) FLAG(-t) ARGUMENT(cifs)<Option> FLAG(-o) ARGUMENT(username=me,password=mine)<Option> ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-exec::;) UTILITY(echo) FLAG(-n) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type> UTILITY(sort)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(echo) COMMANDSUBSTITUTION() UTILITY(dirname) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(tree) FLAG(-a) FLAG(-f) FLAG(-i) FLAG(-s) FLAG(-p) FLAG(-u) FLAG(-g) FLAG(-D) FLAG(--inodes) UTILITY(awk) ARGUMENT(Program)<Program>
ROOT(root) T(find) T(.) T(-name) T(*.xml) T(-print0) T(|) T(xargs) T(-n) T(1) T(-0) T(invalid_command)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(awk) ARGUMENT(Program)<Program> ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) FLAG(-f) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(diff) T(--old-line-format) T(%L) T(--new-line-format) T(--unchanged-line-format) T(<(nl) T(File-out)) T(<(nl) T(File-Reference))
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex>
"ROOT(root) T(join) T(-o) T(1.2,1.3,2.4,2.5,1.4) T(<() T(cat) T(-n) T(File)"
ROOT() UTILITY(chgrp) FLAG(-R) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(chown) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT(root) T(time) T(cut) T(-f50000000) T(-d$\n) T(myfile.ascii)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(l)<Type> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-l) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> UTILITY(cpio) FLAG(-p) FLAG(-V) ARGUMENT(Regex)<Regex>
ROOT(root) T(comm) T(-2) T(-3) T(<() T(sort) T(File) T(|) T(uniq)
ROOT() PIPELINE() UTILITY(pstree) FLAG(-p) ARGUMENT(Regex)<Regex> UTILITY(sed) ARGUMENT(Program)<Program> UTILITY(sed) FLAG(-n) FLAG(-e) ARGUMENT(Program)<Program>
ROOT() UTILITY(mkdir) ARGUMENT(Directory)<Directory>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-delete)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-perm) ARGUMENT(-Permission)<Permission> FLAG(-type) ARGUMENT(f)<Type> UTILITY(sed) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-print)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(sort) FLAG(-r)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-print) UTILITY(xargs) FLAG(-d) ARGUMENT(Regex)<Regex>
ROOT(root) T(for) T(i) T(in) T(`find) T(.) T(-not) NT(<n>) T(-name) T(*\.jpg) T(-path) T(./bookshop/mediaimg) T(-prune) T(-o) T(-path) T(*/CVS*) T(-prune) T(-o) T(-path) T(./files) T(-prune) T(-o) T(-path) T(./images/cms) T(-prune) T(-o) T(-path) T(./internal) T(-prune) T(-o) T(-path) T(./limesurvey171plus_build5638) T(-prune) T(-o) T(-path) T(./gallery2) T(-prune) T(-o) T(-print) T(`;) T(do) T(cvs) T(status) T($i) T(|grep) T(Status) T(;) T(done) T(&>~/output.txt)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT(root) T(find) T(.) T(-name) T(*.py) T(|) T(xargs) T(perl) T(script.pl)
ROOT() PIPELINE() UTILITY(grep) FLAG(-f) ARGUMENT(File)<File> ARGUMENT(Regex)<Regex> UTILITY(sort) FLAG(-u)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-atime) ARGUMENT(-Timespan)<Timespan>
ROOT() UTILITY(scp) FLAG(-v) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(echo) ARGUMENT({})<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-exec::+) UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(du) FLAG(-c) ARGUMENT({})<File> UTILITY(tail) FLAG(-) ARGUMENT(Quantity)<Quantity> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT(root) T(ps) T(aux) T(|) T(tr) T(-s) T([:blank:]) T(|) T(cut) T(-d) T(-f3)
"ROOT(root) T(find) T(.) T(-name) T(modules) T(-exec) T(sh) T(-c) T(exit) T($(find) T({}) T(-name) T(modules|grep) T(-n) T(""""|tail) T(-n1|cut) T(-d:) T(-f1)) T(;)"
"ROOT(root) T(find) T(/) T(-name) T(*.md) T(-type) T(f) T(-exec) T(sh) T(-c) T(markdown) T(""$0"") T(>) T(""$0.html"") T({}) T(;)"
ROOT() UTILITY(shopt) FLAG(-u) ARGUMENT(nullglob)<Option>
ROOT(root) T(pstree) T($(pgrep) T(-fn) T(bash))
ROOT(root) T(find) T(./) T(-name) T(*.log) T(|) T(xargs) T(-I{}) T(sh) T(-c) T(if) T([) T(-f) T({}.gz) T(];) T(then) T(rm) T({};) T(fi)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> ARGUMENT(Path)<Path> FLAG(-print)
ROOT(root) T(tmux) T(movew) T(-r)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-daystart) FLAG(-ctime) ARGUMENT(Timespan)<Timespan> FLAG(-type) ARGUMENT(f)<Type>
ROOT() UTILITY(mkdir) ARGUMENT(Directory)<Directory>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-ctime) ARGUMENT(Timespan)<Timespan>
ROOT() UTILITY(echo) COMMANDSUBSTITUTION() UTILITY(clear)
ROOT() PIPELINE() UTILITY(awk) ARGUMENT(Program)<Program> ARGUMENT(Program)<Program> ARGUMENT(Program)<Program> UTILITY(column) FLAG(-t)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(grep) FLAG(-H) FLAG(-n) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rename) ARGUMENT(Regex)<Regex> ARGUMENT({})<Regex>
ROOT() PIPELINE() UTILITY(md5sum) ARGUMENT(File)<File> UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type> FLAG(-printf) ARGUMENT('%M %u %g %p\n')<Format>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::+) UTILITY(grep) FLAG(-H) FLAG(-c) FLAG(-m) ARGUMENT(Quantity)<Quantity> ARGUMENT(Regex)<Regex> ARGUMENT({})<File> UTILITY(sed) FLAG(-n) ARGUMENT(Program)<Program>
ROOT() UTILITY(sed) FLAG(-e) ARGUMENT(Program)<Program> ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-nouser) FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT(root) T(alias) T(current=cd) T($(cur) T(-g))
ROOT() UTILITY(ifconfig) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(bind) FLAG(-r) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(ls) UTILITY(xargs) FLAG(-i) FLAG(-I) ARGUMENT({})<Regex> UTILITY(mv) ARGUMENT({})<File> ARGUMENT(File)<File> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-group) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mmin) ARGUMENT(+Quantity)<Quantity>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-amin) ARGUMENT(+Quantity)<Quantity>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> UNARYLOGICOP(!) FLAG(-path) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-and) UNARYLOGICOP(!) FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(mv) FLAG(--target-directory) ARGUMENT(Directory)<Directory> ARGUMENT({})<File>
ROOT(root) T(find) T(/) T(-name) T(<name_pattern>) T(|) T(perl) T(-pe) T(s/(.*\/).*$/$1/) T(|) T(sort) T(|) T(uniq)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-iwholename) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(grep) FLAG(-H) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::+) UTILITY(wc) FLAG(-c) ARGUMENT({})<File> UTILITY(tail) FLAG(-n) ARGUMENT(Quantity)<Quantity>
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(echo) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT({})<Regex>
ROOT() UTILITY(chown) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT(root) T(ssh) T(-x) T(remoteServer) T(cd) T(yourRemoteDir;) T(./yourRemoteScript.sh) T(</dev/null) T(>/dev/null) T(2>&1) T(&)
ROOT(root) T(find) T(`pwd`) T(-name) T(*.log) T(>) T(sas_log_list.txt)
"ROOT(root) T(find) T(./) T(-name) T(*.php) T(-type) T(f) T(|) T(xargs) T(sed) T(-i) T(s#<?php) T(/\*\*/) T(eval(base64_decode(""aWY.*?>##g) T(2>&1)"
ROOT() PIPELINE() UTILITY(who) UTILITY(grep) FLAG(-e) ARGUMENT(Regex)<Regex> FLAG(-e) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(jobs) FLAG(-l) FLAG(-p)
ROOT() PIPELINE() UTILITY(top) FLAG(-b) FLAG(-n) ARGUMENT(Quantity)<Quantity> UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(echo) T($() T(basename) T($() T(readlink) T(-n) T(-f) T(File)
ROOT(root) T(sed) T(-i) T($() T(hostname)
"ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(!) FLAG(-group) ARGUMENT(Regex)<Regex> FLAG(-printf) ARGUMENT(""%p:%g\n"")<Format>"
"ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-printf) ARGUMENT(""%f\n"")<Format> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(sort) FLAG(-f) UTILITY(uniq) FLAG(-i) FLAG(-d)"
ROOT() UTILITY(zcat) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> UTILITY(tr) FLAG(-d) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
"ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-printf) ARGUMENT(""%h\n"")<Format>"
ROOT() UTILITY(sed) ARGUMENT(Program)<Program> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(grep) FLAG(-i) FLAG(-l) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-depth) FLAG(-empty) FLAG(-type) ARGUMENT(d)<Type>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type> UNARYLOGICOP(!) FLAG(-path) ARGUMENT(Regex)<Regex> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT(root) T(paste) T(-sd+) T(filename) T(|) T(bc)
ROOT() PIPELINE() UTILITY(pstree) FLAG(-p) ARGUMENT(Regex)<Regex> UTILITY(sed) ARGUMENT(Program)<Program> UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(sed) ARGUMENT(Program)<Program> UTILITY(tr) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(grep) FLAG(-o) FLAG(-f) ARGUMENT(Regex)<File> ARGUMENT(File)<Regex> UTILITY(sort) UTILITY(uniq) FLAG(-c)
ROOT() UTILITY(ls) FLAG(-d) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> UTILITY(grep) FLAG(-v) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-v) ARGUMENT(Regex)<Regex> UTILITY(vim) ARGUMENT(File)<File>
ROOT(root) T(tmux) T(list-sessions)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::+) UTILITY(file) FLAG(-N) FLAG(-i) OPERATOR(--) ARGUMENT({})<File> UTILITY(sed) FLAG(-n) ARGUMENT(Program)<Program>
ROOT() UTILITY(cd) ARGUMENT(Directory)<Directory>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) FLAG(-f) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(/your/path/)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(*.html)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<ReservedWord> UTILITY(zip) ARGUMENT(all_html_files.zip)<File> ARGUMENT({})<ReservedWord>
ROOT() PIPELINE() UTILITY(dig) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT(+noall)<Type> ARGUMENT(+authority)<Option> ARGUMENT(+comments)<Option> UTILITY(awk) FLAG(-f) ARGUMENT(File)<File>
"ROOT(root) T(unset) T(`printenv) T(|grep) T(G4) T(|awk) T(BEGIN{FS=""="";}{printf(""%s) T("",$1);}`)"
ROOT() UTILITY(wc) COMMANDSUBSTITUTION() PIPELINE() UTILITY(find) UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT(root) T(zcat) T(large_file.gz) T(|) T(largesplitter)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-atime) ARGUMENT(Timespan)<Timespan>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(sed) FLAG(-i) ARGUMENT(Program)<Program> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-regex) ARGUMENT(Regex)<Regex>
"ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(f)<Type> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-printf) ARGUMENT("".\n"")<Format> UTILITY(wc) FLAG(-l)"
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(cp) ARGUMENT(File)<File> ARGUMENT({})<File>
ROOT() UTILITY(diff) FLAG(--brief) FLAG(--recursive) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(ifconfig) ARGUMENT(Regex)<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(ping) FLAG(-c) ARGUMENT(Quantity)<Quantity> ARGUMENT(Regex)<Regex> UTILITY(tee) PROCESSSUBSTITUTION(>) UTILITY(split) FLAG(-d) FLAG(-b) ARGUMENT(Size)<Size> ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(printf) ARGUMENT(Aa)<Format> UTILITY(od) FLAG(-t) ARGUMENT(x1)<Type>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-newer) ARGUMENT(File)<File>
ROOT(root) T(myscript.rb) T(`hostname) T(-i`) T(file.txt)
ROOT() PIPELINE() UTILITY(ps) UTILITY(tail) FLAG(-n) ARGUMENT(Quantity)<Quantity> UTILITY(sed) ARGUMENT(Program)<Program> ARGUMENT(File)<File>
ROOT(root) T(sed) T(-i) T($() T(hostname) T(-I) T(|) T(head) T(-n) T(Quantity) T(|) T(awk) T(Program)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-ctime) ARGUMENT(-Timespan)<Timespan>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(od) FLAG(-c)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(file) ARGUMENT({})<File>
ROOT() UTILITY(split) FLAG(-l) ARGUMENT(Quantity)<Quantity> ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT(root) T(time) T(find) T(/usr/src) T(-name) T(*.html) T(|) T(xargs) T(grep) T(-l) T(foo) T(|) T(wc) T(-l)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-user) ARGUMENT(Regex)<Regex> FLAG(-ok::;) UTILITY(rm) ARGUMENT({})<File>
ROOT(root) T(find) T(/path/to/dir) T(-type) T(d) T(|) T(tac) T(|) T(while) T(read) T(LINE;) T(do) T(target=$(dirname) T($LINE)/$(basename) T($LINE) T(|) T(tr) T(-d) T();) T(echo) T(mv) T($LINE) T($target;) T(done)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(ls) FLAG(-l) ARGUMENT({})<File>
ROOT() UTILITY(comm) FLAG(-1) FLAG(-3) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT(root) T(readelf) T(-a) T(-W) T(libsomefile.a) T(|) T(grep) T(Class:) T(|) T(sort) T(|) T(uniq)
ROOT() UTILITY(mv) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-user) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-print)
ROOT() UTILITY(sed) FLAG(-i) ARGUMENT(Program)<Program> FLAG(-e) ARGUMENT(Program)<Program> ARGUMENT(File)<File>
ROOT() UTILITY(read) FLAG(-r) FLAG(-n) ARGUMENT(Quantity)<Quantity> FLAG(-p) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-type) ARGUMENT(f)<Type>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type>
ROOT(root) T(grep) T(-r) T(-n) T(-w) T($() T(pwd)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UTILITY(sed) ARGUMENT(Program)<Program> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(ls) ARGUMENT(File)<File> ARGUMENT({})<File> UTILITY(awk) ARGUMENT(Program)<Program> UTILITY(sort) UTILITY(tail) FLAG(-) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-atime) ARGUMENT(Timespan)<Timespan>
ROOT(root) T(find) T(Path) T(Path) T(-iname) T(Regex) T(-print0) T(|) T(xargs) T(-0) T(-d) T(Regex) T(--) T(-I) T({}) T(grep) T(-i) T(Regex) T(--) T({})
"ROOT() UTILITY(mount) FLAG(-t) ARGUMENT(vfat)<Option> FLAG(-o) ARGUMENT(rw,auto,user,fmask=0000,dmask=0000)<Option> ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(ls) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(bash) ARGUMENT(File)<File> UTILITY(tee) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-nouser) FLAG(-exec::;) UTILITY(rm) ARGUMENT(File)<File>
ROOT(root) T(top) T(-p) T($(pgrep) T(ProgramName) T(|) T(head) T(-n) T(1))
ROOT() UTILITY(find) ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> FLAG(-lname) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(sort) FLAG(-u) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(read) FLAG(-n) ARGUMENT(Quantity)<Quantity> FLAG(-r)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-delete)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(ls) ARGUMENT({})<File>
ROOT() UTILITY(basename) OPERATOR(--) COMMANDSUBSTITUTION() UTILITY(dirname) OPERATOR(--) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(rm) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(awk) ARGUMENT(Program)<Program> ARGUMENT(Program)<Program> UTILITY(comm) FLAG(-1) FLAG(-3) ARGUMENT(File)<File> ARGUMENT(File)<File> UTILITY(join) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-print0) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> FLAG(-0) UTILITY(echo) ARGUMENT({})<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-and) FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() UTILITY(ln) FLAG(-s) ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(ls) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(mv) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-r) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) FLAG(-f) ARGUMENT({})<File>
"ROOT(root) T(uniq) T(temp.txt) T(|) T(perl) T(-e) T(undef) T($/;) T($_) T(=) T(<>;) T(open(OUT,"">temp.txt"");) T(print) T(OUT;)"
ROOT(root) T(head) T(-<$LINENUM) T(+) T(10>) T(filename) T(|) T(tail) T(-20)
"ROOT(root) T(unset) T($(printenv) T(|grep) T(G4) T(|awk) T(BEGIN{FS=""="";}{print) T($1;}))"
ROOT() UTILITY(ssh) ARGUMENT(Regex)<Regex> FLAG(-L) ARGUMENT(Regex)<Regex> FLAG(-N)
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(column) FLAG(-c) ARGUMENT(Quantity)<Quantity> FLAG(-s) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(sleep) ARGUMENT(Timespan)<Timespan>
"ROOT(root) T(time) T(-f) T(%E) T(real,%U) T(user,%s) T(sys) T(ls) T(-Fs)"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-size) ARGUMENT(+Size)<Size> BINARYLOGICOP(-and) FLAG(-size) ARGUMENT(-Size)<Size>
ROOT() UTILITY(mkdir) ARGUMENT(Directory)<Directory>
ROOT(root) T(cd) T(/some/dir) T(&&) T(find) T(.) T(-type) T(f)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(+Size)<Size>
ROOT(root) T(find) T(-type) T(f) T(-name) T(thumb.png) T(-exec) T(./deslash.sh) T({}) T(;)
ROOT() PIPELINE() UTILITY(cal) FLAG(-h) UTILITY(sed) FLAG(-r) COMMANDSUBSTITUTION() PIPELINE() UTILITY(date) UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number>
ROOT() UTILITY(df) FLAG(-k) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-exec::;) UTILITY(chown) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(cp) FLAG(--parents) ARGUMENT(File)<File> ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(less)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-delete)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-follow) FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(cd) T(`xsel`)
ROOT(root) T(compaudit) T(|) T(xargs) T(chmod) T(g-w)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> UTILITY(sed) ARGUMENT(Program)<Program> UTILITY(tr) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> UTILITY(sed) ARGUMENT(Program)<Program>
"ROOT(root) T(find) T(.) T(-name) T(*.text) T(-exec) T(sh) T(-c) T(if) T([) T(!) T(-f) T(""$(dirname) T(""$1"")/$(basename) T(""$1"") T(.text)"") T(];) T(then) T(echo) T(==) T($1;) T(fi) T(sh) T({}) T(;)"
ROOT() UTILITY(readlink) FLAG(-f) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(wc) FLAG(-l) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-o) FLAG(-E) ARGUMENT(Regex)<Regex> UTILITY(cut) FLAG(-c) ARGUMENT(Number)<Number> UTILITY(rev) UTILITY(cut) FLAG(-c) ARGUMENT(Number)<Number> UTILITY(rev)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(gunzip) FLAG(-v) FLAG(-t) ARGUMENT({})<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-L) FLAG(-xtype) ARGUMENT(l)<Type>
"ROOT(root) T(ssh) T($(vagrant) T(ssh-config) T(|) T(awk) T(NR>1) T({print) T("") T(-o) T(""$1""=""$2})) T(localhost)"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-depth) FLAG(-type) ARGUMENT(d)<Type> FLAG(-mtime) ARGUMENT(Timespan)<Timespan> FLAG(-exec::+) UTILITY(mv) FLAG(-t) ARGUMENT(Directory)<Directory> ARGUMENT({})<File>
ROOT(root) T(find) T(/) T(-path) T(/usr) T(-prune) T(-o) NT(<n>) T(-name) T(rsync) T(-o) T(-name) T(bash) T(-print) T(2>/dev/null)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(-Size)<Size>
ROOT(root) T(find) T(.) T(-type) T(d) T(-name) T(uploads) T(|) T(while) T(read) T(d;) T(do) T(chmod) T(-R) T(755) T($d;) T(done)
ROOT() PIPELINE() UTILITY(tac) ARGUMENT(File)<File> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT(root) T(for) T(file) T(in) T($(find) T(asia) T(emea) T(-name) T(*.gz) T(-print0) T(|) T(xargs) T(-0);) T(do) T(echo) T(-n) T($(basename) T($file);) T(gunzip) T(-c) T($file) T(|wc) T(-l;) T(done) T(>>) T(file_count.txt)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> UTILITY(xargs) FLAG(-n) ARGUMENT(Quantity)<Quantity> FLAG(-I) ARGUMENT({})<Regex> UTILITY(echo) ARGUMENT({})<Regex>
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(column) FLAG(-t)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-printf) ARGUMENT('%h\n')<Format> UTILITY(sort) FLAG(-u)
ROOT() PIPELINE() UTILITY(paste) ARGUMENT(File)<File> ARGUMENT(File)<File> ARGUMENT(File)<File> UTILITY(sed) ARGUMENT(Program)<Program>
ROOT(root) T(date) T(;) T(read) T(-t) T(10) T(-p) T(Hit) T(ENTER) T(or) T(wait) T(ten) T(seconds) T(;) T(echo) T(;) T(date)
ROOT(root) T(find) T(.) T(-name) T(.git) T(-type) T(d) T(-execdir) T(git) T(pull) T(-v) T(;)
ROOT() PIPELINE() UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> UTILITY(less)
ROOT() UTILITY(env) FLAG(-i)
"ROOT(root) T(watch) T(-tdn0.5) T(ps) T(-mo) T(pid,tid,%cpu,psr) T(-p) T(`pgrep) T(firefox`)"
ROOT(root) T(rsync) T(-a) T(-v) T($() T(find) T(Path) T(-type) T(f) T(-ctime) T(-Timespan)
ROOT() UTILITY(ifconfig) FLAG(-a)
ROOT(root) T(logout)
ROOT(root) T(ls) T(--color) T(|) T(less) T(-r)
"ROOT() UTILITY(join) FLAG(-o) ARGUMENT(1.1,1.2,1.3,1.4)<Format> FLAG(-t) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> ARGUMENT(File)<File>"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(!) FLAG(-path) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type> FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-exec::;) UTILITY(rm) FLAG(-r) FLAG(-f) ARGUMENT({})<File>
ROOT() UTILITY(rm) COMMANDSUBSTITUTION() PIPELINE() UTILITY(du) ARGUMENT(File)<File> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(grep) FLAG(-v) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> UTILITY(nl) FLAG(-s) ARGUMENT(Regex)<Regex> FLAG(-w) ARGUMENT(Quantity)<Quantity> UTILITY(tr) FLAG(-s) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(read) FLAG(-e) FLAG(-p) ARGUMENT(Regex)<Regex> FLAG(-i) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> UTILITY(sort)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
"ROOT(root) T(top) T(-p) T($(pgrep) T(-d,) T(http))"
ROOT() PIPELINE() UTILITY(grep) FLAG(-a) FLAG(-r) FLAG(-e) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> UTILITY(md5sum) UTILITY(cut) FLAG(-c) ARGUMENT(-Number)<Number>
ROOT() UTILITY(gunzip) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(Permission)<Permission>
ROOT() UTILITY(basename) COMMANDSUBSTITUTION() UTILITY(pwd)
ROOT() UTILITY(rm) FLAG(-r) FLAG(-f) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> FLAG(-0) UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print)
ROOT() UTILITY(ssh-keygen) FLAG(-t) ARGUMENT(rsa)<Type> FLAG(-C) ARGUMENT(Regex)<Regex> FLAG(-N) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0)
ROOT() PIPELINE() UTILITY(set) UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) FLAG(-f) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-nouser) BINARYLOGICOP(-or) FLAG(-nogroup)
ROOT() PIPELINE() UTILITY(ls) FLAG(-l) UTILITY(more)
ROOT(root) T(find) T(.) T(-type) T(f) T(-printf) T(%f) T(-exec) T(openssl) T(dgst) T(-md5) T({}) T(;)
ROOT(root) T(screen) T(-S) T(SessionName) T(-p) T(0) T(-X) T(title) T(remote_0)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-L) FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-perm) ARGUMENT(Permission)<Permission>
ROOT(root) T(yes) T(|) T(COUNTRY) T(|) T(sed) T($(wc) T(-l) T(<) T(file)q) T(|) T(paste) T(-d) T(file) T(-)
ROOT(root) T(echo) T($() T(readlink) T(--canonicalize) T($() T(which) T(Regex)
ROOT(root) T(find) T(.) T(-type) T(f) T(-print0) T(|) T(xargs) T(-0) T(perl) T(-pi.bak) T(-e) T(s/) T(+$//)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print) UTILITY(vim) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(-f)<Type> FLAG(-mtime) ARGUMENT(Timespan)<Timespan> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File> FLAG(-printf) ARGUMENT('.')<Format> UTILITY(wc) FLAG(-c)
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(tee) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(f)<Type> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-F) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-newer) ARGUMENT(File)<File> UNARYLOGICOP(!) FLAG(-newer) ARGUMENT(File)<File> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT(root) T(echo) T(deb) T(blah) T(...) T(blah) T(|) T(sudo) T(tee) T(--append) T(/etc/apt/sources.list) T(>) T(/dev/null)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UTILITY(xargs) FLAG(-L) ARGUMENT(Quantity)<Quantity> FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT(root) T(alias) T(devn=cat) T(>) T(/dev/null)
ROOT(root) T(yum) T(install) T(--exclude=*glob*) T(*.rpm)
ROOT() PIPELINE() UTILITY(gzip) FLAG(-d) FLAG(--stdout) ARGUMENT(Regex)<Regex> UTILITY(bash)
"ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-printf) ARGUMENT(""%TY%Tm%Td%TH%TM%TS|%p|%l\n"")<Format>"
"ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-printf) ARGUMENT(""%T@ %P\n"")<Format> UTILITY(sort) FLAG(-n) FLAG(-r) UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number> UTILITY(tail) FLAG(-n) ARGUMENT(+Quantity)<Quantity>"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan>
ROOT(root) T(find) T(/path-to-directory) T(-type) T(f) T(-mtime) T(+60) T(-exec) T(ls) T(-l) T({}) T(;) T(>) T(/path-to-directory/filenames.txt)
ROOT(root) T(find) T(.) T(-iname) T(*.mov) T(-exec) T(/path/to/myffmpeg.sh) T({}) T(;)
ROOT() PIPELINE() UTILITY(readlink) FLAG(-f) ARGUMENT(File)<File> UTILITY(sed) ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(mv) ARGUMENT({})<File> ARGUMENT(File)<File> ARGUMENT({})<File>
ROOT() UTILITY(ln) FLAG(-s) ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-nogroup)
ROOT() PIPELINE() UTILITY(history) UTILITY(cut) FLAG(-c) ARGUMENT(Number)<Number>
"ROOT(root) T(alias) T(logspace=find) T(/apps/) T(/opt/) T(-type) T(f) T(-size) T(+100M) T(-exec) T(ls) T(-lh) T({}) T(\;) T(|) T(awk) T('{print) T($5,) T($9) T(}')"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0)
ROOT(root) T(rsync) T(-azvu) T(-e) T(ssh) T(user@host1:/directory/) T(user@host2:/directory2/)
ROOT() UTILITY(chmod) ARGUMENT(Permission)<Permission> FLAG(-R) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(md5) ARGUMENT(File)<File> ARGUMENT({})<File> UTILITY(sort)
ROOT(root) T(find) T(.) T(-name) T(xxx) T(-exec) T(command) T({}) T(+)
ROOT() UTILITY(grep) FLAG(-R) FLAG(-I) FLAG(-l) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-daystart) FLAG(-mtime) ARGUMENT(+Timespan)<Timespan>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-exec::+) UTILITY(mv) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT(root) T(screen) T(-d) T(-r) T(remote-command)
ROOT(root) T(find) T(Path) T(-type) T(f) T(-mtime) T(Timespan) T(|) T(xargs) T(-I) T({}) T(tar) T(-c) T(-v) T(-f) T($() T(date) T('+%d%m%Y'_archive.tar)
ROOT() PIPELINE() UTILITY(echo) FLAG(-n) FLAG(-e) ARGUMENT(Regex)<Regex> UTILITY(md5sum)
ROOT() PIPELINE() UTILITY(echo) FLAG(-n) ARGUMENT(Regex)<Regex> UTILITY(md5sum) ARGUMENT(File)<File> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-r) FLAG(-I) ARGUMENT({})<Regex> UTILITY(gzip) ARGUMENT({})<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(-not) FLAG(-group) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(ls) FLAG(-l) FLAG(-t) UTILITY(tr) FLAG(-d) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(du) FLAG(-b) ARGUMENT(File)<File>
ROOT(root) T(find) T(./) T(-type) T(f) T(-name) T(*.r*) T(-print0) T(|) T(xargs) T(-0) T(rm) T(-rf) T(&>) T(log_del.txt)
ROOT(root) T(find) T(/) T(-print0) T(|) T(tar) T(-T-) T(--null) T(--no-recursive) T(-cjf) T(tarfile.tar.bz2)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(f)<Type> UNARYLOGICOP(-not) FLAG(-path) ARGUMENT(Regex)<Regex> UTILITY(wc) FLAG(-l)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-path) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-and) FLAG(-size) ARGUMENT(+Size)<Size>
ROOT() UTILITY(which) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-depth) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) FLAG(-f) FLAG(-r) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-depth) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT(root) T(rmdir) T($() T(dirname) T($() T(dirname) T(Regex)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-perm) ARGUMENT(Permission)<Permission> FLAG(-print0)
ROOT() PIPELINE() UTILITY(fold) FLAG(-w) ARGUMENT(Quantity)<Quantity> ARGUMENT(File)<File> UTILITY(wc) FLAG(-l)
ROOT() PIPELINE() UTILITY(zcat) ARGUMENT(Regex)<Regex> UTILITY(awk) FLAG(-v) ARGUMENT(Program)<Program> ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-path) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan> FLAG(-print)
ROOT() COMMANDSUBSTITUTION() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(wc) FLAG(-c)
ROOT(root) T(for) T(dir) T(in) T($(find) T(-depth) T(-type) T(d);) T(do) T([[) T(!) T($prev) T(=~) T($dir) T(]]) T(&&) T(echo) T($dir) T(;) T(prev=$dir;) T(done)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(tee) FLAG(-a) ARGUMENT(File)<File>
ROOT() UTILITY(watch) FLAG(-n) ARGUMENT(Quantity)<Quantity> UTILITY(wget) FLAG(-q) FLAG(-O) ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-l) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
"ROOT(root) T(su) T(-) T(postgres) T(-c) T(/usr/bin/psql) T(database) T(-c) T(""SELECT) T('DROP) T(TABLE) T(') T(||) T(....)"
ROOT(root) T(rsync) T(-a) T(-z) T(-P) T(-e) T(ssh) T(-p) T(Regex) T(File) T(File)
ROOT(root) T(cd) T($() T(readlink) T(-f) T($() T(dirname) T(Regex)
ROOT() UTILITY(su) FLAG(-l) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(pushd) ARGUMENT(Directory)<Directory>
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(xargs) FLAG(-n) ARGUMENT(Quantity)<Quantity> FLAG(-I) ARGUMENT({})<Regex> UTILITY(cp) ARGUMENT(File)<File> ARGUMENT({})<File>
ROOT(root) T(touch) T(-d) T($() T(date) T(-r) T(File)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-regextype) ARGUMENT(sed)<Type> FLAG(-regex) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(awk) ARGUMENT(Program)<Program> ARGUMENT(Program)<Program> UTILITY(column) FLAG(-t)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print) UTILITY(sed) ARGUMENT(Program)<Program> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(touch) ARGUMENT({})<File>
ROOT(root) T(screen) T(-X) T(-S) T(SCREENID) T(kill)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mmin) ARGUMENT(+Quantity)<Quantity> FLAG(-delete)
ROOT() PIPELINE() UTILITY(ps) UTILITY(grep) FLAG(-E) ARGUMENT(Regex)<Regex> UTILITY(tr) FLAG(-s) ARGUMENT(Regex)<Regex> UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number>
ROOT() UTILITY(tree) FLAG(-p) FLAG(-u) FLAG(-g) FLAG(-f) FLAG(-i)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(split) FLAG(-l) ARGUMENT(Quantity)<Quantity> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(echo) FLAG(-e) ARGUMENT(Regex)<Regex> UTILITY(awk) ARGUMENT(Program)<Program> UTILITY(od) FLAG(-a)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(gzip) FLAG(-k) ARGUMENT({})<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(ln) FLAG(-s) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-cmin) ARGUMENT(Quantity)<Quantity> ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> BINARYLOGICOP(-or) ARGUMENT(Path)<Path> ARGUMENT(Path)<Path>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> FLAG(-print)
ROOT(root) T(cal) T(-h) T(|) T(sed) T(s/) T($(date) T(+%d)) T(/$\033\[94m&\033\[0m/g;) T(s/) T($(date) T(+%d)$/$\033\[94m&\033\[0m/g)
ROOT() UTILITY(mkdir) ARGUMENT(Directory)<Directory>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() UTILITY(ln) FLAG(-s) FLAG(-f) FLAG(-v) ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan> FLAG(-exec::;) UTILITY(ls) FLAG(-l) ARGUMENT({})<File>
ROOT(root) T(ipcs) T(-a) T(|) T(grep) T(`whoami`)
ROOT() UTILITY(md5) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT(root) T(alias) T(cats=konqueror) T(http://icanhazcheezburger.com)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(Timespan)<Timespan>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> FLAG(-print)
"ROOT() UTILITY(mount) FLAG(-o) ARGUMENT(remount,ro)<Option> ARGUMENT(Regex)<Regex>"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(Timespan)<Timespan>
ROOT() PIPELINE() UTILITY(nl) FLAG(-b) ARGUMENT(a)<Option> FLAG(-n) ARGUMENT(ln)<Format> ARGUMENT(File)<File> UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(hostname) FLAG(-i)
ROOT() UTILITY(tar) FLAG(-I) ARGUMENT(File)<File> FLAG(-c) FLAG(-f) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type> FLAG(-empty) FLAG(-delete)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(ls) FLAG(-a) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UTILITY(tac)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-exec::;) UTILITY(rm) FLAG(-r) FLAG(-f) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-L)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(Size)<Size>
ROOT(root) T(tmux) T(movew) T(-s) T(4) T(-t) T(3)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(Permission)<Permission>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-regex) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number>
ROOT() UTILITY(split) FLAG(-l) ARGUMENT(Quantity)<Quantity> ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(read) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-mtime) ARGUMENT(Timespan)<Timespan> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan> FLAG(-daystart) FLAG(-exec::;) UTILITY(ls) FLAG(-l) ARGUMENT({})<File>
ROOT() UTILITY(date) ARGUMENT(+%Y-%m-%d)<Format>
ROOT() UTILITY(read) FLAG(-d) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(/path/to/directory/folder{1..50}) T(-name) T(*.txt) T(-exec) T(basename) T({}) T(.txt) T(;) T(2>/dev/null)
ROOT(root) T(find) T(.) T(|) T(grep) T(html$) T(|) T(xargs) T(grep) T(<string-to-find>)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-daystart) FLAG(-mtime) ARGUMENT(+Timespan)<Timespan>
ROOT(root) T(screen) T(-d) T(-R) T(-S) T(test)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-print) UTILITY(grep) FLAG(-v) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() UTILITY(rsync) FLAG(-a) FLAG(-v) FLAG(-z) FLAG(-r) FLAG(-u) FLAG(--delete-excluded) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(nl) FLAG(-s) ARGUMENT(Regex)<Regex> FLAG(-b) ARGUMENT(a)<Option> FLAG(-n) ARGUMENT(rz)<Format>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-exec::+) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() UTILITY(chown) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(wc) FLAG(-c)
ROOT(root) T(for) T(l) T(in) T($(find) T(.) T(-type) T(l);) T(do) T(cd) T($(dirname) T($l);) T(if) T([) T(!) T(-e) T($(readlink) T($(basename) T($l))) T(];) T(then) T(echo) T($l;) T(fi;) T(cd) T(-) T(>) T(/dev/null;) T(done)
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(gzip) FLAG(-c) FLAG(-f)
ROOT() UTILITY(file) COMMANDSUBSTITUTION() UTILITY(which) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(mkdir) ARGUMENT(Directory)<Directory>
ROOT(root) T(gzip) T(-d) T(--stdout) T(file.gz) T(|) T(bash) T(/dev/stdin) T(arguments)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> UTILITY(sed) ARGUMENT(Program)<Program> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(mkdir) ARGUMENT({})<Directory>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(rev) UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number> UTILITY(rev)
ROOT(root) T(make) T(K_VERSION=`uname) T(-r`)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(-Permission)<Permission>
"ROOT(root) T(sudo) T(su) T(-) T(-c) T(R) T(-e) T(""install.packages('shiny',) T(repos='http://cran.rstudio.com/')"")"
ROOT(root)
ROOT() UTILITY(chgrp) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(grep) FLAG(-R) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> UTILITY(more)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(echo) ARGUMENT({})<Regex> ARGUMENT({})<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-and) UNARYLOGICOP(-not) FLAG(-path) ARGUMENT(Regex)<Regex> FLAG(-delete)
ROOT() UTILITY(mkdir) FLAG(-p) ARGUMENT(Directory)<Directory>
ROOT(root) T(xargs) T(-n) T(Quantity) T(-I) T({}) T(find) T(Path) T($() T(pwd)
ROOT() UTILITY(ssh-keygen) FLAG(-t) ARGUMENT(rsa)<Type>
ROOT(root) T(find) T($PATH_TO_LOGS) T(-maxdepth) T(1) T(-mtime) T(+$SOME_NUMBER_OF_DAYS) T(-exec) T(sh) T(-c) T(case) T({}) T(in) T(*.gz)) T(;;) T(*)) T(gzip) T('{}') T(;;) T(esac;) T(;)
ROOT() UTILITY(scp) FLAG(-C) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(rm) FLAG(-r) FLAG(-f) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-atime) ARGUMENT(Timespan)<Timespan>
ROOT(root) T(chown) T($(stat) T(-f%u:%g) T($srcdir)) T($dstdir)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-user) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-not) FLAG(-size) ARGUMENT(+Size)<Size>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(-prune) FLAG(-empty) FLAG(-type) ARGUMENT(d)<Type>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(sed) FLAG(-i) ARGUMENT(Regex)<Program> ARGUMENT(Program)<File> ARGUMENT({})<File>
ROOT() UTILITY(read) FLAG(-t) ARGUMENT(Quantity)<Quantity> FLAG(-n) ARGUMENT(Quantity)<Quantity> FLAG(-p) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(rsync) FLAG(-u) FLAG(-r) FLAG(--delete) ARGUMENT(File)<File> ARGUMENT(File)<File>
"ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-printf) ARGUMENT(""%f %a, %t\n"")<Format>"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-regex) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(ls) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-atime) ARGUMENT(+Timespan)<Timespan>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-atime) ARGUMENT(Timespan)<Timespan> FLAG(-type) ARGUMENT(-f)<Type>
ROOT() UTILITY(printf) ARGUMENT(%0.s-)<Format> COMMANDSUBSTITUTION() UTILITY(seq) ARGUMENT(1)<Number> ARGUMENT($variable)<Number>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(Permission)<Permission> BINARYLOGICOP(-and) FLAG(-mtime) ARGUMENT(Timespan)<Timespan> BINARYLOGICOP(-and) FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-path) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-size) ARGUMENT(-Size)<Size> FLAG(-exec::;) UTILITY(ls) FLAG(-l) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(wc) FLAG(-l) ARGUMENT({})<File> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-delete)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-L) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT(root)
ROOT() UTILITY(bind) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(l)<Type>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-type) ARGUMENT(f)<Type> BINARYLOGICOP(-and) FLAG(-perm) ARGUMENT(Permission)<Permission> FLAG(-printf) ARGUMENT(':%h\n')<Format> UTILITY(sort) UTILITY(uniq) UTILITY(tr) FLAG(-d) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(hostname)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UTILITY(wc) FLAG(-l)
ROOT(root) T(find) T(.) T(-type) T(f) T(-mtime) T(-14) T(>) T(deploy.txt)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(!) FLAG(-path) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(/home/www/) T(-type) T(f) T(-exec) T(perl) T(-i.bak) T(-pe) T(s/subdomainA\.example\.com/subdomainB.example.com/g) T({}) T(+)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(script) T(-q) T(/dev/null) T(./a) T(|) T(tee) T(output.txt)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(grep) FLAG(-i) FLAG(-l) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT(root) T(ssh) T(user@target) T(cd) T(/some/directory;) T(nohup) T(myprogram) T(>) T(/dev/null) T(2>&1)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(l)<Type>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan> UNARYLOGICOP(!) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(basename) ARGUMENT({})<Regex>
ROOT() PIPELINE() UTILITY(od) FLAG(-c) FLAG(-v) FLAG(-A) ARGUMENT(none)<Option> FLAG(-w) ARGUMENT(Size)<Size> UTILITY(sort) FLAG(-b) UTILITY(uniq) FLAG(-c) UTILITY(sort) FLAG(-r) FLAG(-n) UTILITY(head) FLAG(-n) ARGUMENT(Quantity)<Quantity>
ROOT(root) T(sort) T(File) T(<() T(zcat) T(Regex) T(|) T(sort)
ROOT() UTILITY(mount) FLAG(-t) ARGUMENT(vboxsf)<Option> ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT(root) T(watch) T(-n) T(1) T(--color) T(--exec) T(bash) T(-c) T(python) T(-m) T(unittest) T(discover) T(|&) T(pyrg)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(l)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-r) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(file) ARGUMENT({})<File> UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(sed) FLAG(-e) ARGUMENT(Program)<Program>
ROOT() UTILITY(chgrp) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-mtime) ARGUMENT(Timespan)<Timespan>
ROOT() PIPELINE() UTILITY(seq) ARGUMENT(Number)<Number> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT(root) T(find) T(-s) T(.) T(-mindepth) T(1) T(-type) T(f) T(-print0;) T(printf) T(\0;)
ROOT(root) T(gzcat) T(large.csv.gz) T(|) T(split) T(-l) T(1000) T(-) T(xxx)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(!) BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> ARGUMENT({})<Path> ARGUMENT(Path)<Path> FLAG(-print)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(mv) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(awk) ARGUMENT(Program)<Program> ARGUMENT({})<Program> UTILITY(sort)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex>
"ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-printf) ARGUMENT(""%T@ %t\\n"")<Format> UTILITY(sort) FLAG(-n) FLAG(-r) FLAG(-k) ARGUMENT(Number)<Number> UTILITY(head) FLAG(-n) ARGUMENT(Quantity)<Quantity>"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-lname) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-mtime) ARGUMENT(Timespan)<Timespan> FLAG(-exec::;) UTILITY(gzip) ARGUMENT({})<Regex>
ROOT() PIPELINE() UTILITY(nl) ARGUMENT(File)<File> UTILITY(sort) FLAG(-n) FLAG(-r) UTILITY(cut) FLAG(-b) ARGUMENT(Number)<Number>
ROOT(root) T(unalias) T(python)
ROOT() UTILITY(mkdir) ARGUMENT(Directory)<Directory>
"ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-printf) ARGUMENT(""f %s %p\n"")<Format> UTILITY(awk) ARGUMENT(Program)<Program>"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UNARYLOGICOP(!) FLAG(-perm) ARGUMENT(-Permission)<Permission>
ROOT(root) T(yum) T(install) T(firefox)
ROOT() UTILITY(dirname) COMMANDSUBSTITUTION() UTILITY(readlink) FLAG(-e) ARGUMENT(File)<File>
ROOT() UTILITY(shopt) FLAG(-s) ARGUMENT(nullglob)<Option> ARGUMENT(dotglob)<Option>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> UNARYLOGICOP(-prune) FLAG(-empty)
ROOT(root) T(my_program) T(|) T(tee) T(>(split) T(-d) T(-b) T(100000) T(-))
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::+) UTILITY(dirname) ARGUMENT({})<Regex> UTILITY(sort) FLAG(-u)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(du) FLAG(-c) FLAG(-h) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(env) UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT(root) T(awk) T(Program) T(<() T(gzip) T(-d) T(-c) T(Regex)
ROOT(root) T(export) T(JAVA_HOME=$(readlink) T(-f) T(/usr/bin/java) T(|) T(sed) T(s:bin/java::))
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(du) FLAG(-c) FLAG(-h) ARGUMENT({})<File> UTILITY(tail) FLAG(-n) ARGUMENT(Quantity)<Quantity>
"ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type> FLAG(-printf) ARGUMENT(""%f\0"")<Format> UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(echo) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>"
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(f)<Type> UTILITY(wc) FLAG(-l)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::+) UTILITY(grep) FLAG(-H) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-atime) ARGUMENT(Timespan)<Timespan>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(Timespan)<Timespan> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan> FLAG(-daystart)
"ROOT(root) T(find) T(.) T(-type) T(f) T(-printf) T(%p) T(%s\n) T(|) T(perl) T(-n) T(-a) T(-e) T($sum+=$S[1];) T(print) T(""$sum\n"")"
ROOT() PIPELINE() UTILITY(grep) FLAG(-L) FLAG(-Z) FLAG(-r) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(mv) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT(root) T(find) T($(pwd)) T(-type) T(f) T(-name) T(*.ext) T(|) T(while) T(read) T(file;) T(do) T(sed) T(-e) T(s/^M//g) T(-i) T($file;) T(done;)
ROOT() UTILITY(find) FLAG(-P) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(l)<Type> FLAG(-exec::;) UTILITY(echo) FLAG(-n) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(readlink) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(wc) FLAG(-l) ARGUMENT({})<File> UTILITY(sort) FLAG(-n) FLAG(-r) UTILITY(grep) FLAG(-E) FLAG(-v) ARGUMENT(Regex)<Regex> UTILITY(less)
ROOT() UTILITY(cat) FLAG(-n)
"ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-printf) ARGUMENT(""%T+ %p\n"")<Format> UTILITY(sort) UTILITY(tail) FLAG(-) ARGUMENT(Quantity)<Quantity>"
ROOT() UTILITY(touch) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rename) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(echo) COMMANDSUBSTITUTION() UTILITY(cat) ARGUMENT(File)<File>
ROOT() UTILITY(uname) FLAG(-a)
ROOT(root) T(top) T(-l) T(1) T(-s) T(0) T(-i) T(1) T(-stats) T(vprvt) T(-pid) T($PID)
ROOT(root) T(find) T(.) T(-depth) T(-name) T(*.zip) T(-exec) T(/usr/bin/unzip) T(-n) T({}) T(;)
ROOT() UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number>
ROOT() PIPELINE() UTILITY(df) ARGUMENT(File)<File> UTILITY(tail) FLAG(-) ARGUMENT(Quantity)<Quantity> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(echo) FLAG(-e) COMMANDSUBSTITUTION() PIPELINE() UTILITY(echo) FLAG(-n) FLAG(-e) ARGUMENT(Regex)<Regex> UTILITY(wc) FLAG(-m)
ROOT() UTILITY(mkdir) FLAG(-p) ARGUMENT(Directory)<Directory>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-inum) ARGUMENT(Quantity)<Quantity> FLAG(-exec::;) UTILITY(rm) FLAG(-i) ARGUMENT({})<File>
ROOT() UTILITY(head) FLAG(-n) ARGUMENT(Quantity)<Quantity> ARGUMENT(File)<File> ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> UTILITY(rev) UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number> UTILITY(rev) UTILITY(sort) FLAG(-u)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(+Size)<Size>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-exec::;) UTILITY(echo) FLAG(-n) ARGUMENT(Regex)<Regex> UTILITY(tr) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(ln) FLAG(-s) OPERATOR(--) ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> FLAG(-print)
ROOT() UTILITY(shopt) FLAG(-s) ARGUMENT(histverify)<Option>
ROOT() PIPELINE() UTILITY(dirname) ARGUMENT(Regex)<Regex> ARGUMENT(basename)<Regex> ARGUMENT(Regex)<Regex> UTILITY(tr) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::+) UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-daystart) FLAG(-ctime) ARGUMENT(-Timespan)<Timespan>
ROOT(root) T(find) T(<directory>) T(-type) T(f) T(-size) T(-1M) T(-delete)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-lname) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(.) T(-type) T(f) T(-exec) T(bash) T(-c) T(echo) T(${1:0:5}) T(funcname) T({}) T(;)
ROOT(root) T(find) T(.) T(-print0) T(>) T(mypipe)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(fold) FLAG(-w) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(ls) FLAG(-d) FLAG(-1) ARGUMENT(File)<File>
ROOT(root) T(/usr/bin/ifconfig) T(eth0) T(|) T(grep) T(--word-regexp) T(inet) T(|) T(awk) T({print) T($2})
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(sort) UTILITY(uniq) FLAG(-c) UTILITY(sort) FLAG(-n) FLAG(-r) UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan> FLAG(-exec::+) UTILITY(mv) FLAG(-t) ARGUMENT(Directory)<Directory> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(history) UTILITY(awk) ARGUMENT(Program)<Program> UTILITY(sort) UTILITY(uniq) FLAG(-c) UTILITY(sort) FLAG(-r) FLAG(-n) UTILITY(head)
ROOT() UTILITY(kill) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rename) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() COMMANDSUBSTITUTION() UTILITY(which) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(.) T(-name) T(*.pdf) T(-print0) T(|) T(tar) T(czvf) T(pdf.tar) T(--null) T(-T) T(-)
ROOT(root) T(cat) T(FileWithColumnOfNumbers.txt) T(|) T(xargs) T(ruby) T(-e) T(puts) T(ARGV.map(&:to_i).inject(&:+))
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type> UNARYLOGICOP(!) FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::+) UTILITY(grep) FLAG(--color) ARGUMENT('xrange')<Option> ARGUMENT({})<Regex>
ROOT() UTILITY(dirname) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(sed) FLAG(-i) ARGUMENT(Regex)<Program> FLAG(-e) ARGUMENT(Program)<Program> ARGUMENT(Program)<File>
ROOT(root) T(find) T(Path) T($() T(pwd)
ROOT() UTILITY(comm) FLAG(-2) FLAG(-3) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT(root) T(for) T(FILENAME) T(in) T(*;) T(do) T(mv) T($FILENAME) T(Unix_$FILENAME;) T(done)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-daystart) FLAG(-mtime) ARGUMENT(-Timespan)<Timespan> FLAG(-type) ARGUMENT(f)<Type> UNARYLOGICOP(!) FLAG(-mtime) ARGUMENT(-Timespan)<Timespan> FLAG(-exec::;) UTILITY(ls) FLAG(-l) FLAG(-d) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-depth) FLAG(-type) ARGUMENT(d)<Type> FLAG(-empty) FLAG(-exec::;) UTILITY(rmdir) ARGUMENT({})<Directory>
ROOT() PIPELINE() UTILITY(printf) ARGUMENT(password)<Format> UTILITY(md5)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(.) T(-depth) T(-print) T(|) T(cpio) T(-ov) T(>) T(/dev/fd0)
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(rev) UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number> UTILITY(rev)
ROOT() PIPELINE() UTILITY(du) FLAG(-a) FLAG(-h) FLAG(--max-depth) ARGUMENT(Quantity)<Quantity> UTILITY(sort) FLAG(-h) FLAG(-r)
ROOT(root) T(unset) T($(locale|cut) T(-d=) T(-f1))
ROOT() PIPELINE() UTILITY(env) UTILITY(awk) FLAG(-F) ARGUMENT(Regex)<Regex> ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-ctime) ARGUMENT(-Timespan)<Timespan> UTILITY(tail) FLAG(-n) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(-Permission)<Permission>
ROOT() UTILITY(jobs)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print) FLAG(-exec::;) UTILITY(awk) ARGUMENT(Program)<Program> ARGUMENT({})<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-nogroup) BRACKET() FLAG(-fstype) ARGUMENT(jfs)<Type> BINARYLOGICOP(-or) FLAG(-fstype) ARGUMENT(jfs2)<Type> FLAG(-ls)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(ls) FLAG(-l) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::+) UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> UTILITY(wc) FLAG(-l)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(f)<Type> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan>
ROOT() UTILITY(ln) FLAG(-s) FLAG(-f) FLAG(-n) ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT(root) T([) T($(find) T(your/dir) T(-prune) T(-empty)) T(=) T(your/dir) T(])
ROOT() PIPELINE() UTILITY(seq) ARGUMENT(Number)<Number> ARGUMENT(Number)<Number> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(rename) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(/stuff) T(-maxdepth) T(1) T(-type) T(d) T(-exec) T(script.py) T({}) T(+)
ROOT() UTILITY(nl) FLAG(-n) ARGUMENT(rz)<Format> FLAG(-w) ARGUMENT(Quantity)<Quantity> ARGUMENT(File)<File>
ROOT() UTILITY(tail) ARGUMENT(File)<File>
ROOT(root) T(find) T(/usr/tom) T(|) T(egrep) T(*.pl|) T(*.pm) T(|) T(xargs) T(cat) T(|) T(grep) T(<PATTERN>)
ROOT() PIPELINE() UTILITY(cal) UTILITY(head) FLAG(-) ARGUMENT(Quantity)<Quantity> UTILITY(grep) FLAG(-o) FLAG(-P) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan>
ROOT() UTILITY(ln) FLAG(-s) ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT(root) T(cd) T(~/mydir) T(&&) T(mycommand)
ROOT() UTILITY(pushd) ARGUMENT(Directory)<Directory>
ROOT(root) T(someCommand) T(|) T(tee) T(someFile)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UNARYLOGICOP(!) BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(gzip) FLAG(-n) ARGUMENT({})<Regex>
ROOT(root) T(find) T(-L) T(.) T(-type) T(l) T(|xargs) T(symlinks)
ROOT(root) T(find) T(/mnt/iso) T(-name) T(*.avi) T(-printf) T(%s\n) T(|) T(paste) T(-sd+) T(-) T(|) T(bc)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-nouser) BRACKET() FLAG(-fstype) ARGUMENT(jfs)<Type> BINARYLOGICOP(-or) FLAG(-fstype) ARGUMENT(jfs2)<Type> FLAG(-ls)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-empty)
ROOT(root) T(find) T(.) T(-name) T(*.pdf) T(-print) T(|) T(grep) T(-v) T(^\./pdfs/) T(|) T(xargs) T(-J) T(X) T(mv) T(X) T(./pdfs/)
ROOT() PIPELINE() UTILITY(pstree) UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(cut) FLAG(-c) ARGUMENT(Number)<Number>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(mount) FLAG(-n) FLAG(-o) ARGUMENT(remount)<Option> FLAG(-t) ARGUMENT(extX)<Option> ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT(root) T(host) T($(uname) T(-n)) T(|) T(grep) T(IPv6) T(address) T(|) T(head) T(-n) T(1) T(|) T(awk) T({print) T($5})
ROOT() PIPELINE() UTILITY(du) FLAG(-a) FLAG(--max-depth) ARGUMENT(Quantity)<Quantity> UTILITY(sort) FLAG(-n)
ROOT() UTILITY(chown) ARGUMENT(Regex)<Regex> FLAG(-R) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-printf) ARGUMENT('%f\0')<Format>
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(wc) FLAG(-l)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(c)<Type>
ROOT() PIPELINE() UTILITY(cal) FLAG(-h) ARGUMENT(DateTime)<DateTime> ARGUMENT(DateTime)<DateTime> UTILITY(cut) FLAG(-c) ARGUMENT(Number)<Number> UTILITY(sed) FLAG(-r) ARGUMENT(Program)<Program> UTILITY(sed) ARGUMENT(Program)<Program> UTILITY(head) FLAG(-n) ARGUMENT(-Quantity)<Quantity> UTILITY(tail) FLAG(-n) ARGUMENT(+Quantity)<Quantity>
ROOT(root) T(find) T(.) T(-type) T(f) T(-exec) T(/tmp/clever.sh) T({}) T(;)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type> UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-and) FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(ifconfig) UTILITY(grep) FLAG(-o) FLAG(-P) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(set) UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT(root) T(crontab) T(-u) T($user) T(-l) T(2>/dev/null) T(|) T(grep) T(-v) T(^#)
ROOT() UTILITY(cal) ARGUMENT(DateTime)<DateTime> ARGUMENT(DateTime)<DateTime>
ROOT(root) T(ls) T(-t) T(-r) T($() T(find) T(Path) T(-name) T(Regex) T(-or) T(-name) T(Regex)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(folder) T(-type) T(f) T(-print0) T(|) T(xargs) T(-0) T(file) T(--media-type) T(|) T(egrep) T(image|video) T(|) T(cut) T(-f1) T(-d) T(:) T(|) T(tr) T(\n) T(\0)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(./<SOURCE_DIR>/) T(-type) T(d) T(|) T(sed) T(s/\.\/<SOURCE_DIR>//g) T(|) T(xargs) T(-I) T({}) T(mkdir) T(-p) T(<DEST_DIR>/{})
ROOT(root)
ROOT(root) T(screen) T(/bin/bash) T(-c) T(java) T(Foo) T(>) T(foo.txt)
ROOT(root) T(find) T(.) T(-name) T(AssemblyInfo.cs) T(|) T(xargs) T(git) T(diff) T(--)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(-not) BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> ARGUMENT({})<Path> ARGUMENT(Path)<Path> FLAG(-print)
ROOT(root) T(tmux) T(attach) T(-t) T(<session) T(name>)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-ok::;) UTILITY(echo) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-ls) UTILITY(tr) FLAG(-s) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(.) T(-exec) T(bash) T(-c) T(cmd1;) T(cmd2) T(filedumper) T({}) T(;)
ROOT() UTILITY(dig) ARGUMENT(Regex)<Regex> FLAG(-x) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-E) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(readlink) FLAG(-e) FLAG(-v) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-exec::+) UTILITY(ls) ARGUMENT({})<File>
ROOT(root) T(find-repos-of-install) T(|) T(grep) T(rpmfusion) T(|) T(xargs) T(yum) T(update)
ROOT() PIPELINE() UTILITY(who) ARGUMENT(File)<File> ARGUMENT(Regex)<Regex> UTILITY(awk) ARGUMENT(Program)<Program> UTILITY(sed) ARGUMENT(Program)<Program> UTILITY(cut) FLAG(-f) ARGUMENT(Number)<Number> FLAG(-d) ARGUMENT(Regex)<Regex> UTILITY(sed) ARGUMENT(Program)<Program>
ROOT() UTILITY(chown) FLAG(-R) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(cat) ARGUMENT({})<File> UTILITY(tr) FLAG(-c) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT(root) T(yum) T(list) T(installed) T(--disablerepo=*) T(--enablerepo=fedora*)
ROOT(root) T(find) T(.) T(-name) T(*.txt) T(-print) T(|) T(xargs) T(perl) T(-pi) T(-es/Windows/Linux/ig) T(*.txt)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-atime) ARGUMENT(+Timespan)<Timespan>
ROOT(root) T(for) T(i) T(in) T(`find) T(.) T(|) T(grep) T(.xml$`;) T(do) T(bzip2) T($i;) T(done)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-execdir::;) UTILITY(echo) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-printf) ARGUMENT('%T@ %p\n')<Format> UTILITY(sort) FLAG(-n) UTILITY(tail) FLAG(-) ARGUMENT(Quantity)<Quantity> UTILITY(cut) FLAG(-f) ARGUMENT(Number)<Number> FLAG(-d) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(read) FLAG(-r) FLAG(-s) FLAG(-p) ARGUMENT(Regex)<Regex> FLAG(-n) ARGUMENT(Quantity)<Quantity> ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-v) ARGUMENT(Regex)<Regex> FLAG(-v) ARGUMENT(File)<File> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-i) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-exec::;) UTILITY(gzip) FLAG(-N) ARGUMENT({})<Regex>
"ROOT(root) T(find) T(-type) T(f) T(-name) T(*.htm) T(-printf) T(%P\0%f\0) T(|) T(xargs) T(-0) T(-n2) T(sh) T(-c) T(fil=""${2/\.htm/}"";) T(sed) T(-i) T(-e) T(""s;<title>.*</title>;<title>$fil</title>;"") T($1) T(replace)"
ROOT(root) T(find) T(.) T(-iname) T(*.jpg) T(|) T(while) T(read) T(fn;) T(do) T(name=$(basename) T($fn)) T(;) T(dir=$(dirname) T($fn)) T(;) T(mv) T($fn) T($dir/$(basename) T($dir)-$name) T(;done) T(./lib/bukovina/version.jpg) T(./lib/bukovina/bukovina-version.jpg)
ROOT(root) T(tar) T(-c) T(--checkpoint=1000) T(--checkpoint-action=dot) T(/var)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(d)<Type> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rmdir) ARGUMENT({})<Directory>
ROOT() UTILITY(kill) FLAG(-) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(bg)
ROOT() PIPELINE() UTILITY(ps) FLAG(-A) FLAG(-o) ARGUMENT(pid)<Format> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(readlink) ARGUMENT(File)<File> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(dirname) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(+Size)<Size>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune)
ROOT(root) T(cat) T(/file/with/numbers) T(|) T(php) T(-r) T($s) T(=) T(0;) T(while) T((true)) T({) T($e) T(=) T(fgets(STDIN);) T(if) T((false) T(===) T($e)) T(break;) T($s) T(+=) T($e;) T(}) T(echo) T($s;)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-path) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-print)
ROOT(root) T(find) T(dir) T(-type) T(f) T(-print0) T(|) T(xargs) T(-0) T(md5sum) T(>) T(dir.md5)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(sort) ARGUMENT(File)<File> UTILITY(uniq)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-printf) ARGUMENT('%T@ %p\n')<Format> UTILITY(sort) FLAG(-n) UTILITY(tail) FLAG(-) ARGUMENT(Quantity)<Quantity> UTILITY(cut) FLAG(-f) ARGUMENT(Number)<Number> FLAG(-d) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT(root) T(find) T(.) T(-name) T(*.jar) T(-exec) T(zipinfo) T({}) T(;)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-and) UNARYLOGICOP(-not) FLAG(-path) ARGUMENT(Regex)<Regex> FLAG(-delete)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-newermt) ARGUMENT(Regex)<Regex> UNARYLOGICOP(!) FLAG(-newermt) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(tar) FLAG(-c) FLAG(-z) FLAG(-v) FLAG(-f) ARGUMENT(File)<File> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-user) ARGUMENT(Regex)<Regex> UTILITY(head)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-xdev) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::+) UTILITY(grep) FLAG(-q) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT(root) T(su) T(-) T(joe) T(-c) T(/path/to/my_daemon) T(>) T(/some/output/file) T(&)
ROOT(root) T(rsync) T(-P) T(-e) T(ssh) T(local_file) T(user@host:remote_file)
ROOT(root) T(join) T(-t) T(Regex) T(<() T(sort) T(File)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-exec::;) UTILITY(mv) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> BRACKET() UNARYLOGICOP(!) FLAG(-path) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-and) UNARYLOGICOP(!) FLAG(-path) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-and) UNARYLOGICOP(!) FLAG(-path) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
"ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-printf) ARGUMENT(""%h/%f : dernier accès le %AA %Ad %AB %AY à %AH:%AM:%AS\n"")<Format>"
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-P) ARGUMENT(Quantity)<Quantity> FLAG(-I) ARGUMENT({})<Regex> UTILITY(bzip2) ARGUMENT({})<File>
ROOT() UTILITY(basename) ARGUMENT(Regex)<Regex>
"ROOT(root) T(ps) T(aux) T(|) T(awk) T($11"") T(""$12) T(==) T(""python) T(csp_build.py"") T({) T(system(""kill) T("") T($2)) T(})"
ROOT() UTILITY(chgrp) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-ls)
ROOT() PIPELINE() UTILITY(ping) ARGUMENT(Regex)<Regex> FLAG(-n) ARGUMENT(Regex)<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(awk) ARGUMENT(Program)<Program> UTILITY(sed) ARGUMENT(Program)<Program>
ROOT() UTILITY(diff) FLAG(-y) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(wc) FLAG(-w) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(echo) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-size) ARGUMENT(+Size)<Size> UNARYLOGICOP(-not) FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-size) ARGUMENT(-Size)<Size>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) FLAG(-r) FLAG(-f) ARGUMENT({})<File>
ROOT() UTILITY(set) FLAG(-o) ARGUMENT(errexit)<Option> FLAG(-o) ARGUMENT(nounset)<Option> FLAG(-o) ARGUMENT(noclobber)<Option> FLAG(-o) ARGUMENT(pipefail)<Option>
ROOT() UTILITY(mkdir) ARGUMENT(Directory)<Directory>
ROOT(root) T(find) T(Path) T(-name) T(Regex) T(-exec) T(mv) T({}) T($() T(basename) T({}) T(Regex)
ROOT() PIPELINE() UTILITY(cat) FLAG(-n) ARGUMENT(File)<File> UTILITY(join) FLAG(-o) ARGUMENT(2.2)<Format> ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT(root) T(echo) T(-ne) T($VAR1) T(|) T(xxd) T(-r) T(-p) T(|) T(od) T(-c)
ROOT() UTILITY(od) FLAG(-c) FLAG(-v) FLAG(-A) ARGUMENT(none)<Option> FLAG(-w) ARGUMENT(Size)<Size>
ROOT() UTILITY(ls) COMMANDSUBSTITUTION() UTILITY(pwd)
ROOT() PIPELINE() UTILITY(finger) UTILITY(cut) FLAG(--complement) FLAG(-c) ARGUMENT(Number)<Number>
ROOT(root) T(sudo) T(-u) T(username2) T(-H) T(sh) T(-c) T(cd) T(/home/$USERNAME/$PROJECT;) T(svn) T(update)
ROOT() UTILITY(ln) FLAG(-s) ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(dig) FLAG(-x) ARGUMENT(Regex)<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number> UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(cut) FLAG(-f) ARGUMENT(Number)<Number>
ROOT() UTILITY(mktemp) COMMANDSUBSTITUTION() UTILITY(dirname) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(/path/to/start/from/) T(-type) T(f) T(|) T(xargs) T(perl) T(-pi) T(-e) T(s/applicationX/applicationY/g)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type>
ROOT(root) T(find) T(${INPUT_LOCATION}) T(-name) T(*.pdf.marker) T(-exec) T(sh) T(-c) T(mv) T($0) T(`dirname) T($0`/`basename) T($0) T(.marker`) T($1) T({}) T(${OUTPUT_LOCATION}) T(;)
ROOT(root) T(find) T(-type) T(f) T(-name) T(*.wav) T(|) T(grep) T(export) T(|) T(./calc_space)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mmin) ARGUMENT(Quantity)<Quantity> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(sort) ARGUMENT(File)<File> UTILITY(uniq) FLAG(-c) UTILITY(sort) FLAG(-n) FLAG(-r)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> BRACKET() FLAG(-type) ARGUMENT(d)<Type> BINARYLOGICOP(-and) FLAG(-perm) ARGUMENT(-Permission)<Permission> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(.) T(-name) T(*.txt) T(-exec) T(cat) T({}) T(;)
ROOT(root) T(tail) T(-n) T(+2) T($FILE) T(>) T($FILE.tmp) T(&&) T(mv) T($FILE.tmp) T($FILE)
ROOT() UTILITY(mount) FLAG(-t) ARGUMENT(ntfs-3g)<Option> ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(tree) ARGUMENT(Directory)<Directory>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(ls) FLAG(-a) FLAG(-l) ARGUMENT({})<File> UTILITY(sort) FLAG(-n) FLAG(-r) FLAG(-k) ARGUMENT(Number)<Number> UTILITY(head) FLAG(-n) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT(root) T([) T(-z) T($(find) T(aaa/) T(-maxdepth) T(1) T(-type) T(f)) T(]) T(&&) T(echo) T(empty)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> BRACKET() FLAG(-path) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-path) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-path) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-print)
ROOT() UTILITY(uname) FLAG(-r)
ROOT() PIPELINE() UTILITY(set) UTILITY(grep) FLAG(-P) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-o) FLAG(-P) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-exec::;) UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(-not) FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-not) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT(root) T(ssh) T(Regex) T(ls) T(-l)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> UTILITY(grep) FLAG(-v) ARGUMENT(Regex)<Regex> UTILITY(sort)
ROOT(root) T(ln) T(-s) T($() T(find) T(Path) T(-name) T(Regex)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-n) ARGUMENT(Quantity)<Quantity> FLAG(-I) ARGUMENT({})<Regex> UTILITY(echo) ARGUMENT({})<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(cp) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(gunzip) FLAG(-c) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-f) ARGUMENT(File)<File> UTILITY(sort) UTILITY(uniq) FLAG(-c)
ROOT(root) T(find) T(.) T(-name) T(*.txt) T(-print0) T(|) T(xargs) T(-0) T(-I{}) T(process) T({}) T(argument)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> UTILITY(grep) FLAG(-v) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
ROOT(root) T(find) T(/) T(-name) T(secret.keys) T(-print) T(2>/dev/null)
ROOT(root) T(update-client) T(2>&1) T(|) T(tee) T(my.log)
ROOT(root) T(rsync) T(-av) T(<SOURCE_DIR>) T(rsyncuser@192.168.1.110:/srv/www/prj112/myfolder)
ROOT(root) T(df) T(/tmp) T(|) T(grep) T(-q) T(tmpfs) T(&&) T(echo) T(Shared) T(Memory) T(||) T(echo) T(Not) T(Shared) T(Memory)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(tail)
ROOT() UTILITY(rsync) FLAG(-a) FLAG(-P) FLAG(-S) FLAG(-H) FLAG(-i) FLAG(-v) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(tar) FLAG(-z) FLAG(-x) FLAG(-v) FLAG(-f) ARGUMENT(File)<File>
ROOT(root) T(yes) T(Y) T(|) T(command-that-asks-for-input)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-mtime) ARGUMENT(Timespan)<Timespan> FLAG(-exec::;) UTILITY(rm) FLAG(-r) FLAG(-f) ARGUMENT({})<File>
ROOT(root) T(MYVAR=`git) T(ls-files) T(-m|wc) T(-l|tr) T(-d) T(`)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(!) FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(mv) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT(root) T(find) T(plsql) T(-type) T(f) T(-perm) T(/ug=rw) T(-exec) T(ls) T(-l) T({}) T(;) T(2>/dev/null)
ROOT() PIPELINE() UTILITY(echo) FLAG(-e) ARGUMENT(Regex)<Regex> UTILITY(ssh-keygen) FLAG(-t) ARGUMENT(rsa)<Type>
ROOT() UTILITY(ln) FLAG(-s) ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(rsync) FLAG(-a) FLAG(--rsync-path) ARGUMENT(Program)<Program> ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-daystart) FLAG(-mtime) ARGUMENT(+Timespan)<Timespan>
ROOT() UTILITY(mount) FLAG(-l)
ROOT() UTILITY(ln) FLAG(--symbolic) FLAG(--verbose) FLAG(--force) ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(tree) FLAG(-I) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT(root) T(split) T(-l) T(50000000) T(--filter=./filter.sh) T(2011.psv)
ROOT() UTILITY(dig) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT(@resolver1.opendns.com)<Type>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-inum) ARGUMENT(Quantity)<Quantity> FLAG(-exec::;) UTILITY(mv) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(ls) FLAG(-l) FLAG(-t) FLAG(-r) ARGUMENT({})<File> UTILITY(tail) FLAG(-n) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-regextype) ARGUMENT(posix-extended)<Type> FLAG(-regex) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(ping) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-L) ARGUMENT(Quantity)<Quantity> FLAG(-I) ARGUMENT({})<Regex> UTILITY(date) ARGUMENT('+%+: {}')<Format>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(sed) FLAG(-e) ARGUMENT(Program)<Program> UTILITY(sort) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(mv) ARGUMENT(File)<File> ARGUMENT(File)<File> ARGUMENT({})<File>
ROOT(root) T(find) T(.) T(-type) T(f) T(-name) T(*.gz) T(-exec) T(zgrep) T(GET) T(/foo) T({}) T(;)
ROOT(root) T(tar) T(-c) T(--use-compress-program=pigz) T(-f) T(tar.file) T(dir_to_zip)
ROOT() UTILITY(cd) ARGUMENT(Directory)<Directory>
ROOT() PIPELINE() UTILITY(sed) ARGUMENT(Program)<Program> ARGUMENT(File)<File> UTILITY(fold) FLAG(-w) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(ssh) FLAG(-L) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-okdir::;) UTILITY(echo) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-c) FLAG(-H) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> UTILITY(awk) FLAG(-F) ARGUMENT(Regex)<Regex> ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(Permission)<Permission>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(sed) FLAG(-e) ARGUMENT(Program)<Program> FLAG(-e) ARGUMENT(Program)<Program> FLAG(-e) ARGUMENT(Program)<Program> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(cp) ARGUMENT(File)<File> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-path) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() PIPELINE() UTILITY(grep) FLAG(-F) FLAG(-f) ARGUMENT(Regex)<File> ARGUMENT(File)<Regex> UTILITY(sort) UTILITY(uniq) FLAG(-c) UTILITY(sort) FLAG(-n) UTILITY(tail) FLAG(-n) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(mount) FLAG(-t) ARGUMENT(ntfs)<Option> FLAG(-o) ARGUMENT(ro)<Option> ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT(root) T(seq) T(100000) T(|) T(paste) T(-sd+) T(|) T(bc) T(-l)
ROOT() COMMANDSUBSTITUTION() UTILITY(mktemp)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UTILITY(wc) FLAG(-l)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(!) BRACKET() FLAG(-newer) ARGUMENT(File)<File> FLAG(-user) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() UTILITY(read) FLAG(-p) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(.) T(-mtime) T(+7) T(-name) T(G*.html) T(-execdir) T(/path/to/script_7zipi) T({}) T(+)
"ROOT(root) T(find) T(/path/to/pdfs/) T(-type) T(f) T(-name) T($1*.pdf) T(-printf) T(%TY/%Tm/%Td) T(%TH:%TM) T(%p\n) T(|) T(sort) T(-n) T(-k1.1,1.2) T(-k1.3,1.4) T(-k1.6,1.7) T(-k1.9,1.10) T(-k2.1,2.2) T(-k2.4,2.5) T(-k3) T(>) T(remoteuser@remoteserver:/u/tmp/CustTmp/zzz_pdfs.txt)"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(sed) FLAG(-i) FLAG(-e) ARGUMENT(Program)<Program> ARGUMENT({})<Program>
ROOT(root) T(git) T(ls-files) T(|) T(grep) T(\.java$) T(|) T(xargs) T(wc) T(-l)
ROOT(root) T(alias) T(iTMSTransporter=`xcode-select) T(--print-path`/../Applications/Application\) T(Loader.app/Contents/MacOS/itms/bin/iTMSTransporter)
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(sort) FLAG(-r)
ROOT() PIPELINE() UTILITY(jobs) UTILITY(wc) FLAG(-l)
ROOT() PIPELINE() UTILITY(ping) ARGUMENT(Regex)<Regex> UTILITY(awk) FLAG(-F) ARGUMENT(Regex)<Regex> ARGUMENT(Program)<Program>
ROOT(root) T(su) T(-c) T(cd) T(/home/$USERNAME/$PROJECT) T(;) T(svn) T(update) T(-m) T($USERNAME)
ROOT() PIPELINE() UTILITY(sort) ARGUMENT(File)<File> ARGUMENT(File)<File> UTILITY(uniq) FLAG(-d)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan> FLAG(-exec::;) UTILITY(cat) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() PIPELINE() UTILITY(tail) FLAG(-) ARGUMENT(Quantity)<Quantity> ARGUMENT(File)<File> UTILITY(more)
"ROOT(root) T(command) T(time) T(-f) T(%E) T(real,%U) T(user,%s) T(sys) T(ls) T(-Fs)"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(echo) COMMANDSUBSTITUTION() UTILITY(dirname) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(.) T(-type) T(f) T(-name) T(*.ext) T(-exec) T(grep) T(-v) T(^{}$) T(list.txt) T(&&) T(echo) T({}) T(;)
ROOT(root) T(find) T(.) T(-type) T(f) T(|) T(while) T(read) T(f;) T(do) T(g=`md5sum) T($f) T(|) T(awk) T({print) T($1}`;) T(echo) T($g) T($f>) T($f-$g.md5;) T(done)
ROOT() UTILITY(uname) FLAG(-s)
ROOT() UTILITY(ssh) FLAG(-i) ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(mktemp) FLAG(-d)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-inum) ARGUMENT(Quantity)<Quantity>
ROOT(root) T(find) T(.) T(-type) T(f) T(-name) T(your_pattern) T(-exec) T(du) T(-ch) T({}) T(+) T(2>/dev/null) T(|) T(grep) T(total$.)
ROOT() UTILITY(sed) FLAG(-e) ARGUMENT(Program)<Program> FLAG(-e) ARGUMENT(Program)<Program> FLAG(-e) ARGUMENT(Program)<Program> FLAG(-e) ARGUMENT(Program)<Program>
ROOT() UTILITY(du) FLAG(-a)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-delete)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(zcat) ARGUMENT({})<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(Permission)<Permission>
ROOT(root) T(find) T(/var/log) T(-name) T(*.log) T(|) T(tar) T(cv) T(--files-from=-) T(|) T(bzip2) T(>) T(log.tar.bz2)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::+) UTILITY(grep) FLAG(-i) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(ssh) FLAG(-o) ARGUMENT(ServerAliveInterval=60)<Option> ARGUMENT(Regex)<Regex>
ROOT() COMMANDSUBSTITUTION() UTILITY(chown) FLAG(-R) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(fold) FLAG(-s) FLAG(-w) ARGUMENT(File)<Quantity>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) FLAG(-r) FLAG(-f) ARGUMENT({})<File>
ROOT() UTILITY(diff) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(nl) FLAG(-v) ARGUMENT(Quantity)<Quantity> ARGUMENT(File)<File>
ROOT(root) T(seq) T(-s) T(*) T(1) T(500) T(|bc)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type>
ROOT() PIPELINE() UTILITY(basename) ARGUMENT(Regex)<Regex> UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(-Number)<Number>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::+) UTILITY(rm) FLAG(-f) ARGUMENT({})<File>
"ROOT(root) T(find) T(/PROD) T(-type) T(d) T(-exec) T(sh) T(-c) T(cd) T(""{}"") T(&&) T(for) T(f) T(in) T(*.json;) T(do) T(/tmp/test.py) T(""$f"";) T(done) T(;)"
ROOT() UTILITY(comm) FLAG(-1) FLAG(-2) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(yes) ARGUMENT(Regex)<Regex> UTILITY(head) FLAG(-) ARGUMENT(Quantity)<Quantity>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(sed) FLAG(-e) ARGUMENT(Program)<Program> UTILITY(sed) FLAG(-e) ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(rev) UTILITY(cut) FLAG(-c) ARGUMENT(Number)<Number> UTILITY(rev)
ROOT() UTILITY(history) FLAG(-r)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(rm) FLAG(-r) FLAG(-f) ARGUMENT({})<File>
ROOT(root) T(find) T(.) T(-type) T(f) T(|) T(while) T(read) T(file;) T(do) T(sed) T(-e) T(s/^M//g) T(-i) T($file;) T(done)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> UTILITY(more)
ROOT() UTILITY(echo) COMMANDSUBSTITUTION() UTILITY(whoami) COMMANDSUBSTITUTION() UTILITY(stat) FLAG(-c) ARGUMENT(%i)<Regex> ARGUMENT(/home)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(mv) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(Size)<Size> FLAG(-atime) ARGUMENT(+Timespan)<Timespan> FLAG(-exec::;) UTILITY(rm) FLAG(-f) ARGUMENT({})<File>
ROOT() UTILITY(comm) FLAG(-3) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(sort)
ROOT() UTILITY(watch) UTILITY(echo) FLAG(-e) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-daystart) FLAG(-type) ARGUMENT(f)<Type> FLAG(-mtime) ARGUMENT(Timespan)<Timespan>
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(grep) FLAG(-E) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(rev) UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-empty) FLAG(-exec::;) UTILITY(rmdir) ARGUMENT({})<Directory>
ROOT() PIPELINE() UTILITY(whoami) UTILITY(tr) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-perm) ARGUMENT(Permission)<Permission> FLAG(-print) FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(file) ARGUMENT({})<File> UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number>
ROOT(root) T(find) T(.) T(-type) T(f) T(-print0) T(|) T(grep) T(-Fxvz) T(-f) T(<(cd) T(/some/dir) T(&&) T(find) T(.) T(-type) T(f)) T(|) T(xargs) T(-0) T(echo) T(rm)
ROOT() UTILITY(pstree) FLAG(-a)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(-not) BRACKET() FLAG(-path) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) UNARYLOGICOP(-not) BRACKET() FLAG(-path) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) FLAG(-name) ARGUMENT(Regex)<Regex>
"ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-printf) ARGUMENT(""%s\t%p\n"")<Format> UTILITY(sort) FLAG(-n) UTILITY(head) FLAG(-) ARGUMENT(Quantity)<Quantity>"
"ROOT(root) T(find) T(.) T(-type) T(f) T(-print) T(|) T(egrep) T(/,|%$|~$|\.old$|SCCS|/core$|\.o$|\.orig$) T(>>Exclude)"
ROOT(root) T(find) T(Path) T(-type) T(d) T(-exec) T(mv) T({}) T(File) T(\;) T(-exec) T(mkdir) T(Directory) T(\;) T(-exec) T(sh) T(-c) T(mv) T(File) T(File) T(\;)
ROOT(root) T(gzip) T(-cd) T(myDB.sql.gz) T(|) T(pg_restore) T(...)
ROOT(root) T(find) T(/some/dir) T(-mmin) T(-$((currtime) T(+) T((24) T(*) T(60)))) T(-a) T(-mmin) T(+$((${currtime}) T(+) T(1)))
ROOT(root) T(find) T(etc) T(home) T(apps) T(-depth) T(-print) T(|) T(cpio) T(-ov) T(>) T(dev/rmt0)
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(rev) UTILITY(cut) FLAG(-f) ARGUMENT(Number)<Number> FLAG(-d) ARGUMENT(Regex)<Regex> UTILITY(rev)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(Size)<Size> FLAG(-print)
ROOT() UTILITY(ln) FLAG(-s) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path>
"ROOT(root) T(find) T(.) T(-type) T(f) T(-maxdepth) T(1) T(-not) T(-empty) T(-print0) T(|) T(xargs) T(-0i) T(sh) T(-c) T(cat) T(/dev/null) T(>) T(""{}"")"
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) FLAG(-f) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(grep) FLAG(-H) FLAG(-n) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> UTILITY(wc) FLAG(-l)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(l)<Type> FLAG(-ls)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-m) ARGUMENT(Quantity)<Quantity> FLAG(-r) FLAG(-i) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(bunzip2) ARGUMENT(File)<File> ARGUMENT(File)<File> UTILITY(wc) FLAG(-c)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> ARGUMENT(Path)<Path>
ROOT() PIPELINE() UTILITY(zcat) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-a) FLAG(-i) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) FLAG(-type) ARGUMENT(f)<Type> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> ARGUMENT(Path)<Path>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> UTILITY(tr) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File> FLAG(-exec::;) UTILITY(cp) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT() UTILITY(sed) FLAG(-i) ARGUMENT(Program)<Program> FLAG(-e) ARGUMENT(Program)<Program> COMMANDSUBSTITUTION() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-size) ARGUMENT(+Size)<Size>
ROOT(root) T(doFirst=) T(true)
ROOT() PIPELINE() UTILITY(echo) FLAG(-n) ARGUMENT(Regex)<Regex> UTILITY(md5sum) UTILITY(cut) FLAG(-c) ARGUMENT(-Number)<Number>
ROOT() PIPELINE() UTILITY(w) UTILITY(sed) ARGUMENT(Program)<Program> UTILITY(cut) FLAG(-f) ARGUMENT(Number)<Number> FLAG(-d) ARGUMENT(Regex)<Regex> UTILITY(sort) UTILITY(uniq) FLAG(-c)
"ROOT(root) T(find) T($dir) T(-path) T($dir/prune_me) T(-prune) T(-o) T(-exec) T(bash) T(-c) T(echo) T(""$0"") T({}) T(;)"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(f)<Type> FLAG(-newermt) ARGUMENT(Regex)<Regex> UNARYLOGICOP(!) FLAG(-newermt) ARGUMENT(Regex)<Regex> FLAG(-exec::+) UTILITY(echo) ARGUMENT({})<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT(root) T(echo) T(`cat) T($FILE) T(|) T(head) T(-n) T(100) T(|) T(wc) T(-c`) T(/) T(1024) T(|) T(bc) T(-l)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-empty) FLAG(-delete)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
"ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-printf) ARGUMENT(""%f %s\n"")<Format>"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-path) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-print)
ROOT() PIPELINE() UTILITY(tac) ARGUMENT(File)<File> UTILITY(grep) FLAG(-E) FLAG(-m) ARGUMENT(Quantity)<Quantity> ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(sed) ARGUMENT(Program)<Program> UTILITY(sed) ARGUMENT(Program)<Program> UTILITY(wc) FLAG(-l)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(cat) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity>
ROOT(root) T(top) T(-b) T(-p) T(`pidof) T(a.out`) T(-n) T(100)
ROOT(root) T(perl) T(-pe) T(s/((:\S*){3}):\S*/$1/g) T(file) T(|) T(column) T(-t)
ROOT(root) T(find) T(.) T(-name) T(*.so) T(-print0) T(|) T(xargs) T(-0) T(myCommand) T(|) T(grep) T(ExpectedResult)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT(root) T(yum) T(update) T($(find-repos-of-install) T(|) T(grep) T(rpmfusion))
ROOT(root) T(find) T(-depth) T(-printf) T(%m:%u:%g:%p\0) T(>saved-permissions)
ROOT() UTILITY(read) FLAG(-s) FLAG(-p) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(.) T(-mtime) T(-1) T(|) T(cpio) T(-oa) T(2>/dev/null) T(|) NT(<n>) T(cd) T($backup_dir) T(&&) T(cpio) T(-imd))
"ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-printf) ARGUMENT(""%f\n"")<Format> UTILITY(awk) ARGUMENT(Program)<Program>"
ROOT(root) T(someCommand) T(2>&1) T(|) T(tee) T(-a) T(someFile)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan>
ROOT(root) T(find) T(.) T(-name) T(*.foo) T(-exec) T(somecommand) T({}) T(;)
ROOT(root) T(alias) T(pwd=/bin/pwd) T(|) T(pbcopy)
ROOT() UTILITY(tee) FLAG(-a) ARGUMENT(File)<File>
ROOT(root) T(du) T(-s) T(<file>)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-path) ARGUMENT(Regex)<Regex> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-user) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(chown) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(ls) FLAG(-1) UTILITY(paste) FLAG(-s) FLAG(-d) ARGUMENT(File)<Regex> ARGUMENT(File)<File>
ROOT() UTILITY(diff) FLAG(-a) FLAG(-r) FLAG(-q) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-atime) ARGUMENT(+Timespan)<Timespan>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-mtime) ARGUMENT(Timespan)<Timespan> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) FLAG(-f) FLAG(-r) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(wc) FLAG(-l) ARGUMENT({})<File>
ROOT() UTILITY(read) FLAG(-e)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(ls) FLAG(-l) ARGUMENT({})<File>
ROOT() UTILITY(read) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-s) FLAG(-n) ARGUMENT(Quantity)<Quantity>
"ROOT(root) T(perl) T(-ne) T(print) T(length()."") T(line) T($.) T($_"") T(myfile) T(|) T(sort) T(-nr) T(|) T(head) T(-n) T(1)"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mmin) ARGUMENT(-Quantity)<Quantity> FLAG(-type) ARGUMENT(f)<Type> FLAG(-ls)
ROOT(root) T(version=$(mvn) T(org.apache.maven.plugins:maven-help-plugin:2.1.1:evaluate) T(-Dexpression=project.version) T(|) T(egrep) T(-v) T(^\[|Downloading:) T(|) T(tr) T(-d) T(\n))
ROOT() PIPELINE() UTILITY(echo) FLAG(-n) ARGUMENT(Regex)<Regex> UTILITY(od) FLAG(-x)
ROOT() UTILITY(echo) ARGUMENT(Regex)<Regex> COMMANDSUBSTITUTION() UTILITY(whoami)
ROOT() UTILITY(shopt) FLAG(-s) ARGUMENT(promptvars)<Option>
ROOT() UTILITY(date) ARGUMENT(+%Y:%m:%d)<Format> FLAG(-d) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-exec::;) UTILITY(chown) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-atime) ARGUMENT(+Timespan)<Timespan> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print) FLAG(-delete)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T($STARTDIR) T(-name) T(*.ps) T(-print) T(|) T(sed) T(-e) T(s/.ps$//) T(|) T(xargs) T(-l) T(-i) T(ps2pdf) T({}.ps) T({}.pdf)
ROOT() UTILITY(dirname) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(nl) FLAG(-s) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> UTILITY(uniq)
ROOT(root) T(find) T(.) T(-name) T(*.mpg) T(-type) T(f) T(-print0) T(|) T(xargs) T(-0) T(-I) T({}) T(-n) T(1) T(-P) T(4) T(ffmpeg) T(-i) T({}) T({}.mp4)
"ROOT(root) T(join) T(-j) T(Regex) T(-o) T(2.1,2.2,1.2,1.3) T(<() T(sort) T(File)"
ROOT() PIPELINE() UTILITY(ifconfig) UTILITY(awk) FLAG(-F) ARGUMENT(Regex)<Regex> ARGUMENT(Program)<Program>
ROOT() UTILITY(rmdir) ARGUMENT(Directory)<Directory>
ROOT(root) T(join) T(<() T(sort) T(-n) T(File)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-follow)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-path) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(sed) FLAG(-i) ARGUMENT(Program)<Program> ARGUMENT({})<File>
"ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-printf) ARGUMENT(""%P\n"")<Format>"
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-n) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
"ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-noleaf) FLAG(-links) ARGUMENT(+Quantity)<Quantity> FLAG(-printf) ARGUMENT(""%n %i %f\t%h\n"")<Format> UTILITY(sort) UTILITY(less)"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-exec::;) UTILITY(du) FLAG(-h) ARGUMENT({})<File> UTILITY(grep) FLAG(-v) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UNARYLOGICOP(-not) FLAG(-regex) ARGUMENT(Regex)<Regex> FLAG(-exec::;)
ROOT(root) T(var=`hg) T(st) T(-R) T($path) T(|) T(tr) T(-d) T(\n`)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> UTILITY(less)
ROOT() UTILITY(find) ARGUMENT(Path)<Path>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print) UTILITY(less)
ROOT() UTILITY(source) PROCESSSUBSTITUTION(<) UTILITY(sed) ARGUMENT(Program)<Program> ARGUMENT(File)<File>
ROOT(root) T(head) T(-$((${RANDOM}) T(%) T(`wc) T(-l) T(<) T(file`) T(+) T(1))) T(file) T(|) T(tail) T(-1)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> UTILITY(wc) FLAG(-l)
ROOT() UTILITY(mktemp) FLAG(-p) ARGUMENT(Directory)<Directory> FLAG(-d) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-exec::+) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(cp) FLAG(-r) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT(root) T({) T(yes) T(yes) T(|) T(sed) T(4q;) T(yes) T(no) T(|) T(sed) T(1q;) T(}) T(|) T(./script)
ROOT(root) T(mount) T(--bind) T(/something) T(/new_something)
ROOT() UTILITY(mkdir) ARGUMENT(Directory)<Directory>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> BRACKET() UNARYLOGICOP(!) FLAG(-path) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-and) FLAG(-type) ARGUMENT(f)<Type> BINARYLOGICOP(-and) BRACKET() UNARYLOGICOP(!) FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-and) BRACKET() UNARYLOGICOP(!) FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-n) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) FLAG(-exec::;) UTILITY(ls) FLAG(-l) FLAG(-r) FLAG(-t) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-print0) UTILITY(xargs) FLAG(-0)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-ls)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(-Permission)<Permission> FLAG(-print0) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-exec::;) UTILITY(curl) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT({})<Regex> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(-not) BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(sed) FLAG(-i) ARGUMENT(Program)<Program> ARGUMENT(File)<File> FLAG(-exec::;) UTILITY(sed) FLAG(-i) ARGUMENT(Program)<Program> ARGUMENT(File)<File>
ROOT() UTILITY(read) FLAG(-p) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT(root) T(df) T(/mnt/myUSBdisk) T(|) T(grep) T(-q) T(/mnt/myUSBdisk) T(&&) T(echo) T(Mounted) T(||) T(echo) T(Not) T(mounted)
ROOT() UTILITY(cd) COMMANDSUBSTITUTION() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(dirname) ARGUMENT({})<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-empty) FLAG(-exec::;) UTILITY(ls) FLAG(-l) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(md5sum) ARGUMENT({})<File>
ROOT(root) T(find) T(/source_path) T(-name) T(*.data) T(|) T(while) T(read) T(-r) T(filename;) T(do) T(cp) T(${filename}) T($(printf) T(%sn) T(${filename}) T(|) T(sed) T(s/^.*[/](category[^/]*)[/](.*[.]data)$//target_path/1_2/);) T(done)
ROOT() UTILITY(df) FLAG(-k)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-user) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-delete)
ROOT() UTILITY(ssh) FLAG(-f) ARGUMENT(Regex)<Regex> FLAG(-L) ARGUMENT(Regex)<Regex> FLAG(-N)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::+) UTILITY(du) FLAG(-S) FLAG(-h) ARGUMENT({})<File> UTILITY(sort) FLAG(-r) FLAG(-h) UTILITY(head) FLAG(-n) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-delete)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) FLAG(-r) FLAG(-f) ARGUMENT({})<File>
ROOT() UTILITY(tar) FLAG(-x) FLAG(-z) FLAG(-f) ARGUMENT(File)<File> FLAG(-C) ARGUMENT(Directory)<Directory>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(d)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) FLAG(-r) OPERATOR(--) ARGUMENT({})<File>
ROOT() UTILITY(mktemp)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-regex) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT(root) T(read) T(-p) T($() T(echo) T(-e) T(Regex)
ROOT(root) T(|) T(tee) T(File)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(tr) FLAG(-s) FLAG(-c) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-empty) FLAG(-exec::;) UTILITY(rm) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(Timespan)<Timespan> FLAG(-daystart) FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> BRACKET() FLAG(-iname) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-and) UNARYLOGICOP(!) FLAG(-type) ARGUMENT(d)<Type> BINARYLOGICOP(-and) FLAG(-mmin) ARGUMENT(-Quantity)<Quantity>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UNARYLOGICOP(-not) FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-not) FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-mtime) ARGUMENT(Timespan)<Timespan> FLAG(-type) ARGUMENT(f)<Type> FLAG(-printf) ARGUMENT('%p: ')<Format> FLAG(-exec::;) UTILITY(tail) FLAG(-) ARGUMENT(Quantity)<Quantity> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(gunzip) FLAG(-c) ARGUMENT(Regex)<Regex> UTILITY(tar) FLAG(-x) FLAG(-f) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(sort) FLAG(-n) UTILITY(tail) FLAG(-) ARGUMENT(Quantity)<Quantity>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(sed) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(ssh) FLAG(-l) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(set) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-empty) UTILITY(wc) FLAG(-l)
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(read) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(sed) ARGUMENT(Program)<Program> ARGUMENT(File)<File> UTILITY(tr) FLAG(-d) ARGUMENT(Regex)<Regex> UTILITY(wc) FLAG(-c)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-and) UNARYLOGICOP(-not) FLAG(-path) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T($DIR_TO_CLEAN) T(-mtime) T(+$DAYS_TO_SAVE) T(|) T(while) T(read) T(FILE;) T(do) T(rm) T($FILE;) T(done)
ROOT() UTILITY(ssh) FLAG(-f) FLAG(-N) FLAG(-L) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(chown) ARGUMENT(Regex)<Regex> FLAG(-R) ARGUMENT(File)<File>
ROOT(root) T(find) T(/var/www/) T(-path) T(*wp-admin/index.php) T(|) T(xargs) T(-i) T(sh) T(-c) T(mv) T({}) T($(dirname) T({})/index_disabled)
ROOT() UTILITY(wc) FLAG(-l) COMMANDSUBSTITUTION() PIPELINE() UTILITY(tree) FLAG(-i) FLAG(-f) FLAG(--noreport) UTILITY(grep) FLAG(-e) ARGUMENT(Regex)<Regex>
"ROOT(root) T(yes) T(|) T(grep) T(y) T(|) T(sed) T(100q) T(|) T(awk) T({printf() T(""%03d) T("",) T(NR) T()};) T(echo)"
ROOT() PIPELINE() UTILITY(sort) UTILITY(uniq) FLAG(-c) UTILITY(sort) FLAG(-n)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-path) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-type) ARGUMENT(f)<Type> FLAG(-print)
ROOT() UTILITY(mkdir) ARGUMENT(Directory)<Directory>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-execdir::;) UTILITY(pwd)
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(dirname) ARGUMENT({})<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(basename) ARGUMENT({})<Regex>
"ROOT(root) T(find) T(.) T(-type) T(f) T(-maxdepth) T(1) T(-print0) T(|) T(xargs) T(-0i) T(sh) T(-c) T(cat) T(/dev/null) T(>) T(""{}"")"
ROOT(root) T(find) T(/) T(-maxdepth) T(1) T(-xdev) T(-type) T(f) T(-exec) T(grep) T(-li) T(stringtofind) T({}) T(+) T(|) T(parallel) T(sed) T('/./d') T({})
ROOT(root) T(cat) T(dbdump.sql.gz) T(|) T(gzip) T(-cd) T(|) T(mysql)
ROOT(root) T(find) T(.) T(-type) T(l) T(|) T(while) T(read) T(f;) T(do) T(/bin/cp) T(-rf) T(--remove-destination) T(-f) T($(find) T(.) T(-name) T($(readlink) T(${f}))) T(${f};done;)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(sed) FLAG(-i) ARGUMENT(Program)<Program> ARGUMENT({})<File>
ROOT() UTILITY(file) ARGUMENT(File)<File>
ROOT() UTILITY(mktemp) FLAG(-d) COMMANDSUBSTITUTION() UTILITY(dirname) ARGUMENT(Regex)<Regex>
ROOT(root) T(ln) T(-s) T(`cd) T(`dirname) T($2`;) T(pwd`/`basename) T($2`) T($1/link)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-newer) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(Permission)<Permission> FLAG(-print)
ROOT(root) T(find) T(.) T(-name) T(*.php) T(-print0) T(-fprint) T(>(pv) T(--line-mode)) T(|) T(xargs) T(-0) T(chmod) T(755)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type>
ROOT() PIPELINE() UTILITY(yes) UTILITY(head) FLAG(-n) ARGUMENT(Quantity)<Quantity> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> UTILITY(less)
ROOT() UTILITY(cp) FLAG(-r) FLAG(-s) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(md5sum) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> ARGUMENT(Path)<Path>
ROOT() UTILITY(gzip) FLAG(-d) FLAG(-c) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(/dump) T(-type) T(f) T(-name) T(*.xml) T(|) T(sed) T(-e) T(s/\.xml$/.out/) T(|) T(xargs) T(make) T(-j8)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-ok::;) UTILITY(ls) FLAG(-l) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(crontab) ARGUMENT(File)<File>
ROOT() UTILITY(cp) FLAG(-R) FLAG(-v) FLAG(-n) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-amin) ARGUMENT(-Quantity)<Quantity> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(cat) T(`find) T(src/js) T(-type) T(f) T(-name) T(*.js) T(-print0) T(|) T(xargs) T(-0) T(stat) T(-f) T(%z) T(%N) T(|) T(sort) T(-n) T(|) T(sed) T(-e) T(s|[0-9]*\) T(\) T(||`) T(>) T(public/js/myCleverScript.js)
ROOT() PIPELINE() UTILITY(set) UTILITY(grep) FLAG(-o) FLAG(-P) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(split) FLAG(-l) ARGUMENT(Quantity)<Quantity> FLAG(-d) FLAG(-a) ARGUMENT(Quantity)<Quantity> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-newer) ARGUMENT(File)<File>
ROOT() UTILITY(chgrp) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(zcat) ARGUMENT(Regex)<Regex> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(paste) FLAG(-s) FLAG(-d) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(mount) FLAG(-o) ARGUMENT(remount)<Option> FLAG(-o) ARGUMENT(exec)<Option> ARGUMENT(Regex)<Regex>
ROOT(root) T(tmux) T(show-environment) T(-g) T(|) T(grep) T(RBENV)
ROOT() UTILITY(cd) ARGUMENT(Directory)<Directory>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-exec::+) UTILITY(rmdir) FLAG(--ignore-fail-on-non-empty) ARGUMENT({})<Directory>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(grep) FLAG(-n) FLAG(-e) ARGUMENT(Regex)<Regex> ARGUMENT({})<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-l) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> UTILITY(wc) FLAG(-l)
"ROOT() UTILITY(kill) FLAG(-) ARGUMENT(Regex)<Regex> COMMANDSUBSTITUTION() PIPELINE() UTILITY(ps) FLAG(-A) FLAG(-o) ARGUMENT(stat,ppid)<Format> UTILITY(grep) FLAG(-e) ARGUMENT(Regex)<Regex> UTILITY(awk) ARGUMENT(Program)<Program>"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> BRACKET() FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-fprintf) ARGUMENT(File)<File> ARGUMENT(%-10s)<Format> ARGUMENT(Path)<Path>
ROOT() UTILITY(ssh-keygen) FLAG(-f) ARGUMENT(File)<File> FLAG(-R) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
ROOT(root) T(svn) T(status) T(|) T(grep) T(\!) T(|) T(cut) T(-d) T(-f2-) T(>) T(removedProjs)
ROOT() PIPELINE() UTILITY(man) ARGUMENT(Regex)<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> UTILITY(grep) FLAG(-q) FLAG(-i) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(cat) ARGUMENT({})<File>
ROOT() UTILITY(sort) FLAG(-k) ARGUMENT(Number)<Number> FLAG(-k) ARGUMENT(Number)<Number> FLAG(-t) ARGUMENT(Regex)<Regex> FLAG(--stable) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(ifconfig) ARGUMENT(Regex)<Regex> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(mv) ARGUMENT({})<File> ARGUMENT(File)<File>
"ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-printf) ARGUMENT(""%d\t%p\n"")<Format> UTILITY(sort) FLAG(-n) UTILITY(sed) FLAG(-e) ARGUMENT(Program)<Program>"
ROOT() UTILITY(ssh) FLAG(-X) ARGUMENT(Regex)<Regex>
ROOT(root) T(git) T(ls-files) T(|) T(xargs) T(file) T(|) T(grep) T(ASCII) T(|) T(cut) T(-d) T(:) T(-f) T(1) T(|) T(xargs) T(wc) T(-l)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(f)<Type> UNARYLOGICOP(-not) FLAG(-amin) ARGUMENT(-Quantity)<Quantity> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT(root) T(find) T(/path/to/directory/folder{1..50}) T(-name) T(*.txt) T(2>/dev/null)
ROOT() UTILITY(ls) FLAG(-F) FLAG(-l) FLAG(-t) FLAG(-r) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(ping) FLAG(-c) ARGUMENT(Quantity)<Quantity> FLAG(-q) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(/path/to/dir) T(-name) T(*.gz) T(-exec) T(zgrep) T(--) T(pattern) T({}) T(+)
ROOT() UTILITY(read) FLAG(-s) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(mv) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-depth) FLAG(-wholename) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-print) UTILITY(cpio) FLAG(-o) FLAG(-a) FLAG(-v)
ROOT(root) T(find) T(.) T(>) T(files_and_folders)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan>
ROOT(root) T(su) T(oracle) T(-c) T(/home/oracle/database/runInstaller) T(&)
ROOT() UTILITY(touch) ARGUMENT(File)<File>
"ROOT(root) T(ps) T(aux) T(|) T(awk) T({print) T($4""\t""$11}) T(|) T(sort) T(|) T(uniq) T(-c) T(|) T(awk) T({print) T($2"") T(""$1"") T(""$3}) T(|) T(sort) T(-nr) T(|grep) T(mysql)"
ROOT() PIPELINE() UTILITY(diff) ARGUMENT(File)<File> ARGUMENT(File)<File> UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(head) FLAG(-) ARGUMENT(Quantity)<Quantity> UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number>
ROOT() UTILITY(shred) FLAG(-v) FLAG(-n) ARGUMENT(File)<File> FLAG(-z) FLAG(-u) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(sed) ARGUMENT(Program)<Program> UTILITY(od) FLAG(-c)
ROOT() PIPELINE() UTILITY(cd) ARGUMENT(Directory)<Directory> UTILITY(cat)
ROOT() PIPELINE() UTILITY(sort) ARGUMENT(File)<File> ARGUMENT(File)<File> UTILITY(uniq) FLAG(-d) UTILITY(wc) FLAG(-l)
ROOT(root) T(wc) T(-l) T(<) T($FILE)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-execdir::;) UTILITY(mv) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(chown) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT() UTILITY(set) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(seq) ARGUMENT(Number)<Number> ARGUMENT(Number)<Number> UTILITY(tail) FLAG(-n) ARGUMENT(+Quantity)<Quantity> UTILITY(head) FLAG(-n) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-mtime) ARGUMENT(Timespan)<Timespan>
ROOT() UTILITY(file) COMMANDSUBSTITUTION() UTILITY(which) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(Permission)<Permission>
ROOT() PIPELINE() UTILITY(ls) FLAG(-t) FLAG(-Q) UTILITY(tail) FLAG(-n) ARGUMENT(+Quantity)<Quantity> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(file) FLAG(-i) FLAG(-b) ARGUMENT(File)<File>
ROOT() UTILITY(pushd) ARGUMENT(Directory)<Directory>
ROOT(root) T(tr) T(-d) T(-C) T(X) T(<infile) T(|) T(wc) T(-c)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) BRACKET() UNARYLOGICOP(!) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(cpio) FLAG(-p) FLAG(-m) FLAG(-d) FLAG(-0) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT(root) T(find) T(.) T(-type) T(f) T(-exec) T(file) T({}) T(;) T(>) T(/tmp/filetypes.log)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(chmod) ARGUMENT(-Permission)<Permission> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(echo) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT({})<Regex>
ROOT() UTILITY(mkdir) FLAG(-p) ARGUMENT(Directory)<Directory>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-print)
ROOT(root) T(find) T(./) T(-type) T(f) T(|) T(tee) T(/tmp/grep1) T(/tmp/grep2) T(>/dev/null)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-xdev) FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(-prune) FLAG(-empty) FLAG(-type) ARGUMENT(d)<Type>
ROOT() UTILITY(read) FLAG(-s) FLAG(-p) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-ctime) ARGUMENT(+Timespan)<Timespan> FLAG(-exec::;) UTILITY(ls) FLAG(-l) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-links) ARGUMENT(+Quantity)<Quantity> FLAG(-exec::;) UTILITY(ls) FLAG(-l) FLAG(-r) FLAG(-t) ARGUMENT({})<File>
ROOT(root)
ROOT(root) T(screen) T(-S) T(lynx) T(lynx)
ROOT(root) T(sudo) T(yum) T(--releasever=2013.09) T(update) T(openssl)
ROOT() UTILITY(cat) ARGUMENT(File)<File>
ROOT(root) T(rsync) T(--progress) T(-a) T(-v) T(-h) T(-e) T(File) T(File) T(File)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-daystart) FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) FLAG(-f) ARGUMENT({})<File>
ROOT() UTILITY(date) FLAG(-d) ARGUMENT(Regex)<Regex> ARGUMENT(+'%Y-%m-%d %H:%M:%S')<Format>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rsync) FLAG(-R) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT() UTILITY(rm) FLAG(-r) FLAG(-i) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-newer) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(ping) FLAG(-b) ARGUMENT(Regex)<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::+) UTILITY(grep) FLAG(-l) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> UTILITY(wc) FLAG(-l)
"ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> FLAG(-0) UTILITY(grep) FLAG(-H) FLAG(--color) ARGUMENT(""methodNameHere"")<Option> ARGUMENT({})<Regex>"
ROOT() UTILITY(chown) FLAG(-R) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT(root) T(for) T(i) T(in) T(`find) T(.) T(|) T(grep) T(.xml.bz2$`;) T(do) T(find_graph) T(-build_graph) T($i.graph) T($i;) T(done)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(grep) FLAG(-E) FLAG(-R) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT(root) T(find) T(.) T(-size) T(+10k) T(-type) T(f) T(-maxdepth) T(1) T(-exec) T(ls) T(-lh) T({}) T(;) T(>) T(myLogFile.txt)
ROOT() UTILITY(whoami)
ROOT(root) T(su) T(-l) T(kenneth) T(-c) T(echo) T($PROJ_PATH)
ROOT(root) T(cat) T(<() T(grep) T(-F) T(-i) T(-v) T(Regex) T(<() T(crontab) T(-u) T(Regex) T(-l)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(echo) ARGUMENT({})<Regex>
ROOT() UTILITY(read) FLAG(-n) ARGUMENT(Quantity)<Quantity> FLAG(-p) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT(root) T(nohup) T(vlc) T(-I) T(dummy) T(--quiet) T(~/mp3_directory/*) T(&)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(cat) ARGUMENT(File)<File>
ROOT(root) T(find) T(.) T(-name) T(*.h) T(-execdir) T(/bin/diff) T(-u) T({}) T(/tmp/master) T(;)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(/target/dir) T(-type) T(l) T(!) T(-exec) T(test) T(-e) T({}) T(;) T(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-not) FLAG(-samefile) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-not) FLAG(-newer) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(curl) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> UTILITY(md5)
ROOT() PIPELINE() UTILITY(ifconfig) UTILITY(grep) FLAG(-E) FLAG(-o) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-E) FLAG(-o) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-v) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print)
ROOT(root) T(grep) T(-L) T(-r) T(Subject:) T(\[SPAM\]) T(.) T(|) T(while) T(read) T(f;) T(do) T(mv) T($f) T(out;) T(done)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(.) T(-type) T(f) T(-exec) T(sh) T(-c) T(echo) T(first;) T(true) T(;) T(-exec) T(echo) T(second) T(;)
ROOT(root) T(vi) T($(find) T(.) T(-type) T(f) T(-name) T(btree*.c))
ROOT() UTILITY(rsync) FLAG(-r) FLAG(-l) FLAG(--delete-after) FLAG(--safe-links) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT(root) T(find) T(./polkadots) T(-name) T(image.pdf) T(-exec) T(convert) T(-transparent) T(white) T(-fuzz) T(10%) T({}) T(image.png) T(;) T(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> UTILITY(xargs) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-I) ARGUMENT({})<Regex> UTILITY(cp) FLAG(-t) ARGUMENT(Directory)<Directory> ARGUMENT({})<File>
ROOT() UTILITY(echo) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> COMMANDSUBSTITUTION() UTILITY(dirname) ARGUMENT(Regex)<Regex>
"ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-printf) ARGUMENT(""%T@ %p\n"")<Format> UTILITY(sort)"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity>
ROOT(root) T(find) T(Path) T($() T(pwd)
ROOT(root) T(IFS=) T(read) T(-s) T(-n) T(1) T(SELECT)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(sed) FLAG(-i) FLAG(-e) ARGUMENT(Program)<Program> FLAG(-e) ARGUMENT(Program)<Program> ARGUMENT({})<Program>
ROOT() PIPELINE() UTILITY(curl) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> UTILITY(bash)
ROOT(root) T(yes) T(0) T(|) T(script) T(-c) T(ispell) T(text.txt) T(out.txt)
"ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-printf) ARGUMENT(""%f\n"")<Format>"
ROOT(root) T(cd) T($(git) T(rev-parse) T(--show-cdup))
ROOT() UTILITY(df) FLAG(-i) FLAG(-h)
ROOT() UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT(File)<File>
ROOT(root) T(find) T(.) T(!) T(-name) T([A-Z]) T(*) T(-exec) T(lpr) T({) T(};)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> FLAG(-f) FLAG(-ctime) ARGUMENT(-Timespan)<Timespan>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-exec::+)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(+Size)<Size> ARGUMENT(Path)<Path> UTILITY(xargs) FLAG(-i) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT(File)<File> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-perm) ARGUMENT(Permission)<Permission> FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> FLAG(-s) FLAG(-l) ARGUMENT({})<File>
ROOT(root) T(ssh) T(-X) T(-C) T(-L) T(5900:localhost:5900) T(remotehost) T(x11vnc) T(-localhost) T(-display) T(:0)
ROOT() PIPELINE() UTILITY(tac) ARGUMENT(File)<File> UTILITY(sort) FLAG(-k) ARGUMENT(Number)<Number> FLAG(-r) FLAG(-u)
ROOT(root) T(LC_ALL=C) T(find) T(.) T(-regextype) T(posix-egrep) T(-regex) T(^.*/[a-z][^/]*$) T(-type) T(f)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-user) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-xdev) FLAG(-name) ARGUMENT(Regex)<Regex>
"ROOT() UTILITY(mount) ARGUMENT(Regex)<Regex> FLAG(-o) ARGUMENT(remount,rw)<Option>"
ROOT(root) T(find) T(/) T(-iname) T(“*.mp3″) T(-type) T(f) T(-print0) T(|) T(xargs) T(-0) T(-I) T(‘{}’) T(mkdir) T(-p) T(/mnt/mp3/`basename) T({}`)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::+) UTILITY(mv) FLAG(-t) ARGUMENT(Directory)<Directory> ARGUMENT({})<File>
"ROOT() UTILITY(mount) FLAG(-o) ARGUMENT(ro,remount)<Option> ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>"
ROOT() UTILITY(history) FLAG(-a)
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-ctime) ARGUMENT(-Timespan)<Timespan> FLAG(-exec::+) UTILITY(file) FLAG(-N) FLAG(-i) OPERATOR(--) ARGUMENT({})<File> UTILITY(sed) FLAG(-n) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-print) FLAG(-exec::;) UTILITY(shred) ARGUMENT(File)<File> FLAG(-u) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-ls) UTILITY(sort) FLAG(-n) UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-l) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(sed) FLAG(-i) FLAG(-e) ARGUMENT(Program)<Program> ARGUMENT({})<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UNARYLOGICOP(-not) FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
ROOT(root) T(|) T(cat)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-l) FLAG(-i) FLAG(-w) FLAG(-Z) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) FLAG(-f) ARGUMENT({})<File>
ROOT(root) T(alias) T(unix=echo) T($(date) T(+%s))
ROOT() PIPELINE() UTILITY(ls) FLAG(-l) UTILITY(head) FLAG(-) ARGUMENT(Quantity)<Quantity> UTILITY(tail) FLAG(-) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type>
ROOT(root) T(mysqldump) T(-e) T(--user=username) T(--password=pswd) T(database) T(|) T(gzip) T(|) T(uuencode) T(my-dbbackup.`date) T(+\%Y-\%m-\%d`.gz) T(|) T(mail) T(me@domain.com)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() PIPELINE() UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> UTILITY(sort) FLAG(-u) UTILITY(wc) FLAG(-l)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-print) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(ls) ARGUMENT({})<File>
ROOT(root) T(find) T(.) T(-name) T(*.txt) T(|) T(while) T(read) T(line;) T(do) T(echo) T(Copying) T('$line') T(to) T(/tmp;) T(cp) T(--) T($line) T(/tmp;) T(done)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT(root) T(join) T(-a) T(Quantity) T(-a) T(Quantity) T(<() T(sed) T(Program) T(File) T(|) T(sort)
ROOT() PIPELINE() UTILITY(yes) ARGUMENT(Regex)<Regex> UTILITY(head) FLAG(-n) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(diff) FLAG(-q) FLAG(-r) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT(root) T(find) T(-mtime) T(+7) T(-print) T(|) T(grep) T(-vf) T(file.lst) T(>) T(found.lst)
ROOT(root) T(find) T(Path) T(-type) T(f) T(-name) T(Regex) T(-print0) T(|) T(xargs) T(-0) T(-I) T({}) T(chown) T(Regex) T($() T(mktemp)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> BRACKET() FLAG(-iname) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-print) FLAG(-exec::;) UTILITY(tar) FLAG(-r) FLAG(-f) ARGUMENT(File)<File> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-execdir::;) UTILITY(grep) FLAG(-H) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> UTILITY(wc) FLAG(-l)
ROOT() UTILITY(scp) FLAG(-i) ARGUMENT(File)<File> FLAG(-r) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT(root) T(md5sum) T(<(zcat) T(/tmp/tst.gz)) T(<(bzcat) T(/tmp/tst.bz2)) T(<(lzcat) T(/tmp/tst.lzma)) T(<(xzcat) T(/tmp/tst.xz))
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) FLAG(-f) FLAG(-r) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-perm) ARGUMENT(Permission)<Permission> FLAG(-print) FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(od) ARGUMENT(File)<File> UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT(root) T(cd) T($(xsel))
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-mtime) ARGUMENT(Timespan)<Timespan> FLAG(-exec::;) UTILITY(mv) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(du) FLAG(-a) ARGUMENT(File)<File> UTILITY(sort) FLAG(-n) FLAG(-r) UTILITY(head) FLAG(-n) ARGUMENT(Quantity)<Quantity>
ROOT(root) T(find) T(-maxdepth) T(1) T(-type) T(d) T(|) T(sort) T(|) T(while) T(read) T(-r) T(dir;) T(do) T(n=$(find) T($dir) T(-type) T(d) T(|) T(wc) T(-l);) T(let) T(n--;) T(printf) T(%4d) T(:) T(%s\n) T($n) T($dir;) T(done)
ROOT() UTILITY(mktemp) FLAG(-u) FLAG(-t) ARGUMENT(Regex)<Regex>
"ROOT(root) T(find) T(.performance_test) T(-not) T(-path) T(.performance_test/prune_me*) T(-exec) T(bash) T(-c) T(echo) T(""$0"") T({}) T(;)"
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-depth) FLAG(-type) ARGUMENT(d)<Type> UTILITY(sed) ARGUMENT(Program)<Program>
ROOT() UTILITY(diff) FLAG(-E) FLAG(-N) FLAG(-w) FLAG(-b) FLAG(-u) ARGUMENT(Quantity)<Quantity> ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print) UTILITY(xargs) FLAG(-L) ARGUMENT(Quantity)<Quantity> FLAG(-I) ARGUMENT({})<Regex> UTILITY(wc) FLAG(-l) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(-not) FLAG(-path) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(ln) FLAG(-s) ARGUMENT({})<File> ARGUMENT(Regex)<Regex>
ROOT(root) T(ps) T(aux) T(|) T(grep) T([t]erminal)
ROOT() PIPELINE() UTILITY(env) UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT(root) T(cat) T(/home/pkglist.txt) T(|) T(xargs) T(yum) T(-y) T(install)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::+) UTILITY(grep) FLAG(-l) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(tar) FLAG(-c) FLAG(-j) FLAG(-f) ARGUMENT(File)<File> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-printf) ARGUMENT('%f.torrent\n')<Format>
ROOT() UTILITY(mktemp) FLAG(-d)
"ROOT(root) T(find) T(.) T(-type) T(f) T(-name) T(*.php) T(-exec) T(bash) T(-c) T(wc) T(-l) T(""$0"") T({}) T(;) T(|) T(awk) T({s+=$1}) T(END) T({print) T(s})"
ROOT(root) T(head) T(-c) T(100) T(<) T(/dev/zero) T(|) T(tr) T(\0) T(=)
ROOT(root) T(alias) T(vimrc=$EDITOR) T(~/.vimrc)
ROOT() PIPELINE() UTILITY(tac) ARGUMENT(File)<File> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(cp) FLAG(-a) FLAG(-v) FLAG(--target-directory) ARGUMENT(Directory)<Directory> FLAG(--parents) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(sed) FLAG(-i) ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(du) ARGUMENT({})<File> UTILITY(sort) FLAG(-n) UTILITY(tail) FLAG(-) ARGUMENT(Quantity)<Quantity> UTILITY(cut) FLAG(-f) ARGUMENT(Number)<Number> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(du) FLAG(-s) FLAG(-h) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> BRACKET() UNARYLOGICOP(!) FLAG(-user) ARGUMENT(Regex)<Regex> FLAG(-exec::+) UTILITY(chown) OPERATOR(--) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> FLAG(-false)
ROOT() PIPELINE() UTILITY(sort) ARGUMENT(File)<File> UTILITY(uniq) FLAG(-c)
"ROOT(root) T(find) T(.) T(-name) T(*) T(-maxdepth) T(1) T(-exec) T(sh) T(-c) T(mv) T(""$@"") T(""$0"") T(/home/foo2/bulk2) T({}) T(+)"
ROOT(root) T(yum) T(--enablerepo=remi) T(php-mssql)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-depth) FLAG(-exec::+) UTILITY(rename) ARGUMENT(Regex)<Regex> ARGUMENT({})<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(grep) FLAG(--with-filename) FLAG(-c) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> UTILITY(sort) FLAG(-t) ARGUMENT(Regex)<Regex> FLAG(-k) ARGUMENT(Number)<Number> FLAG(-n) FLAG(-r)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-exec::+) UTILITY(gunzip) FLAG(-v) FLAG(-t) ARGUMENT({})<Regex>
ROOT() PIPELINE() UTILITY(diff) FLAG(-q) FLAG(-r) ARGUMENT(File)<File> ARGUMENT(File)<File> UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(dirname) ARGUMENT({})<Regex> UTILITY(uniq)
ROOT() COMMANDSUBSTITUTION() UTILITY(mktemp) FLAG(-u)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> BINARYLOGICOP(-and) FLAG(-atime) ARGUMENT(+Timespan)<Timespan>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-cmin) ARGUMENT(-Quantity)<Quantity>
ROOT(root) T(echo) T($(cd) T($(dirname) T($1)) T(&&) T(pwd) T(-P)/$(basename) T($1))
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT(root) T(watch) T(-n) T(3) T(-d) T(./my_script.sh)
ROOT(root) T(find) T(.) T(-name) T(*.flac) T(-exec) T(ffmpeg) T(-i) T({}) T(-ab) T(160k) T(-map_metadata) T(0) T(-id3v2_version) T(3) T({}.mp3) T(;)
ROOT() UTILITY(diff) FLAG(-r) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT(root) T(alias) T(my_command=$oldalias) T(--fail-if-command-contains=$bad_string)
ROOT() UTILITY(mkdir) FLAG(-m) ARGUMENT(777)<Option> ARGUMENT(Directory)<Directory>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(f)<Type>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(grep) FLAG(--with-filename) FLAG(-c) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(sort) FLAG(-t) ARGUMENT(Regex)<Regex> FLAG(-k) ARGUMENT(Number)<Number> FLAG(-n) FLAG(-r)
ROOT(root) T(./script.sh) T(|) T(sort) T(-u)
ROOT() PIPELINE() UTILITY(top) FLAG(-b) FLAG(-n) ARGUMENT(Quantity)<Quantity> UTILITY(tail) FLAG(-n) ARGUMENT(+Quantity)<Quantity> UTILITY(head) FLAG(-n) ARGUMENT(Quantity)<Quantity> UTILITY(tr) FLAG(-s) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(/home/vmail/) T(-type) T(d) T(-path) T(*/*/Maildir/.LearnAsHam/cur) T(-exec) T(sh) T(-c) T((cd) T({}) T(&&) T(mv) T(./*) T(../../.Inbox/cur)) T(;)
ROOT() UTILITY(set) FLAG(-o) ARGUMENT(xtrace)<Option>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mmin) ARGUMENT(-Quantity)<Quantity> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0)
ROOT() UTILITY(rename) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-size) ARGUMENT(Size)<Size>
ROOT(root) T(program1) T(|) T(tee) T(>(program2)) T(>(program3))
ROOT(root) T(find) T(/) T(-name) T(*.txt) T(-fstype) T(vfat) T(2>) T(/dev/null)
ROOT() PIPELINE() UTILITY(who) UTILITY(awk) FLAG(-F) ARGUMENT(Regex)<Regex> ARGUMENT(Program)<Program> UTILITY(grep) FLAG(-v) ARGUMENT(Regex)<Regex> UTILITY(uniq)
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(sed) ARGUMENT(Program)<Program> UTILITY(sh) UTILITY(grep) FLAG(-v) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::+) UTILITY(du) FLAG(-c) FLAG(-h) ARGUMENT({})<File> UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(cal) ARGUMENT(DateTime)<DateTime> ARGUMENT(DateTime)<DateTime> UTILITY(sed) FLAG(-e) ARGUMENT(Program)<Program> FLAG(-e) ARGUMENT(Program)<Program> FLAG(-e) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT(root) T(vagrant) T(ssh-config) T(--host) T(default) T(|) T(ssh) T(-F) T(/dev/stdin) T(default)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(Timespan)<Timespan>
ROOT() UTILITY(ping) FLAG(-c) ARGUMENT(Quantity)<Quantity> ARGUMENT(Regex)<Regex>
ROOT(root) T(md5sum) T(*) T(|) T(sort) T(|) T(uniq) T(-w32) T(--all-repeat=separate) T(|) T(awk) T({print) T($2})
ROOT() UTILITY(cp) FLAG(-r) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(wc) ARGUMENT({})<File>
ROOT() UTILITY(rsync) FLAG(-a) FLAG(-v) FLAG(-R) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(ping) FLAG(-c) ARGUMENT(Quantity)<Quantity> ARGUMENT(Regex)<Regex> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(history) UTILITY(grep) FLAG(-C) ARGUMENT(Quantity)<Quantity> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(Permission)<Permission> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(ls) FLAG(-l) ARGUMENT({})<File>
ROOT() UTILITY(read) FLAG(-e) FLAG(-p) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(pstree) FLAG(--show-parents) FLAG(-p) ARGUMENT(Regex)<Regex> UTILITY(head) FLAG(-n) ARGUMENT(Quantity)<Quantity> UTILITY(sed) ARGUMENT(Program)<Program> UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(wc) FLAG(-l)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-n) ARGUMENT(Quantity)<Quantity> FLAG(-P) ARGUMENT(Quantity)<Quantity> FLAG(-I) ARGUMENT({})<Regex> UTILITY(bzip2) ARGUMENT({})<File>
ROOT(root) T(find) T(Path) T(-type) T(f) T(-mtime) T(+Timespan) T(-mtime) T(-Timespan) T(|) T(xargs) T(-I) T({}) T(tar) T(-c) T(-v) T(-f) T($() T(date) T('+%d%m%Y'_archive.tar)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-links) ARGUMENT(Quantity)<Quantity>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-print0) FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-m) ARGUMENT(Quantity)<Quantity> FLAG(-r) FLAG(-i) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-mmin) ARGUMENT(+Quantity)<Quantity> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rmdir) ARGUMENT({})<Directory>
ROOT() UTILITY(rsync) FLAG(-a) FLAG(--progress) FLAG(--remove-source-files) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-mtime) ARGUMENT(Timespan)<Timespan> FLAG(-exec::;) UTILITY(du) FLAG(-k) FLAG(-s) ARGUMENT({})<File> UTILITY(cut) FLAG(-f) ARGUMENT(Number)<Number> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-exec::;) UTILITY(ls) FLAG(-l) ARGUMENT({})<File>
"ROOT() UTILITY(date) ARGUMENT(+""%T"")<Format>"
ROOT() UTILITY(md5sum) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type>
ROOT() UTILITY(mkdir) FLAG(-p) ARGUMENT(Directory)<Directory>
ROOT(root) T(diff) T(<() T(sort) T(-n) T(File)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(grep) FLAG(-l) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> BINARYLOGICOP(-and) FLAG(-exec::;) UTILITY(cp) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT() UTILITY(bzip2) FLAG(-k) FLAG(-v) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(awk) ARGUMENT(Program)<Program> ARGUMENT(Program)<Program> UTILITY(sort) FLAG(-t) ARGUMENT(Regex)<Regex> FLAG(-k) ARGUMENT(Number)<Number> UTILITY(uniq) FLAG(--skip-fields) ARGUMENT(Quantity)<Quantity> UTILITY(sort) FLAG(-k) ARGUMENT(Number)<Number> FLAG(-t) ARGUMENT(Regex)<Regex> UTILITY(cut) FLAG(-f) ARGUMENT(Number)<Number> FLAG(-d) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(grep) T(-o) T(Regex) T(<() T(paste) T(-s) T(-d) T(Regex) T(File)
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(column) FLAG(-c) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(mkdir) FLAG(-p) ARGUMENT(Directory)<Directory>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT(root) T(find) T(.) T(-type) T(f) T(-name) T(*.txt) T(|) T(xargs) T(-i) T(ksh) T(-c) T(echo) T(deleting) T({};) T(rm) T({})
ROOT() PIPELINE() UTILITY(fold) FLAG(-w) ARGUMENT(Quantity)<Quantity> ARGUMENT(File)<File> UTILITY(tr) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> UTILITY(sed) ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(od) FLAG(-c) ARGUMENT(File)<File> UTILITY(head) FLAG(-) ARGUMENT(Quantity)<Quantity>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() UTILITY(history) FLAG(-c) FLAG(-r)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(/) T(-name) T(fluidpoint) T(2>) T(/dev/null)
ROOT() PIPELINE() UTILITY(ls) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(mv) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-user) ARGUMENT(Regex)<Regex> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT(root) T(comm) T(-2) T(-3) T(<() T(find) T(Path) T(-type) T(d) T(|) T(sed) T(Program) T(|) T(sort)
ROOT() UTILITY(ifconfig) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(df) FLAG(-h) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(-Permission)<Permission> FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(tee) ARGUMENT(File)<File>
ROOT(root) T(saveIFS=$IFS;) T(IFS=$\n;) T(for) T(dir) T(in) T($(find) T(-depth) T(-type) T(d) T();) T(do) T([[) T(!) T($prev) T(=~) T($dir) T(]]) T(&&) T(echo) T(${dir}) T(;) T(prev=$dir;) T(done;) T(IFS=$saveIFS)
ROOT() PIPELINE() UTILITY(ls) FLAG(-A) FLAG(-l) UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(awk) FLAG(-F) ARGUMENT(Regex)<Regex> ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(awk) ARGUMENT(Program)<Program> ARGUMENT({})<Program>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type> FLAG(-print) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(echo) ARGUMENT(Regex)<Regex> ARGUMENT({})<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-mtime) ARGUMENT(Timespan)<Timespan> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(awk) ARGUMENT(Program)<Program> ARGUMENT({})<Program>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(echo) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT({})<Regex>
ROOT(root) T(find) T(data) T(-xdev) T(-name) T(filepattern-*2009*) T(-print0) T(|) T(tar) T(--null) T(--no-recursion) T(-uf) T(2009.tar) T(--files-from) T(-)
ROOT() UTILITY(touch) FLAG(-m) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::+) UTILITY(rm) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(tail) FLAG(-f) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(--line-buffered) ARGUMENT(Regex)<Regex> UTILITY(read) FLAG(-t) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) FLAG(-print)
ROOT() PIPELINE() UTILITY(diff) ARGUMENT(File)<File> ARGUMENT(File)<File> UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(wc) FLAG(-l)
ROOT(root) T(find) T(.) T(-type) T(f) T(|) T(perl) T(-ne) T(print) T($1) T(if) T(m/\.([^.\/]+)$/) T(|) T(sort) T(-u)
ROOT() PIPELINE() UTILITY(nl) FLAG(-n) ARGUMENT(ln)<Format> UTILITY(sort) FLAG(-u) FLAG(-k) ARGUMENT(Number)<Number> UTILITY(sort) FLAG(-k) ARGUMENT(Number)<Number> UTILITY(cut) FLAG(-f) ARGUMENT(Number)<Number>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-perm) ARGUMENT(Permission)<Permission> FLAG(-print) FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(sed) ARGUMENT(Program)<Program> ARGUMENT(File)<File> UTILITY(wc) FLAG(-l)
"ROOT(root) T(find) T(.) T(-name) T(*.py) T(-exec) T(bash) T(-c) T(test) T(-f) T($(dirname) T(""$1"")/Makefile) T(--) T({}) T(;) T(-print)"
"ROOT(root) T(find) T(/) T(-type) T(f) T(-size) T(+20M) T(-exec) T(ls) T(-lh) T({}) T(;) T(2>) T(/dev/null) T(|) T(awk) T({) T(print) T($NF) T("":) T("") T($5) T(}) T(|) T(sort) T(-nk) T(2,2)"
ROOT() UTILITY(echo) COMMANDSUBSTITUTION() UTILITY(whoami)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> BINARYLOGICOP(-and) FLAG(-mmin) ARGUMENT(-Quantity)<Quantity>
ROOT(root) T(while) T(read) T(line;) T(do) T(mkdir) T(-p) T(${line%/*};) T(done) T(<) T(infile)
ROOT(root) T(find) T(-name) T(*.zip) T(|) T(xargs) T(-n) T(1) T(unzip)
"ROOT() UTILITY(seq) FLAG(-f) ARGUMENT(""#"")<Format> FLAG(-s) ARGUMENT(Regex)<Regex> ARGUMENT(Number)<Number>"
ROOT() COMMANDSUBSTITUTION() UTILITY(cat) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-follow) FLAG(-uid) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() PIPELINE() UTILITY(ls) UTILITY(tr) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-amin) ARGUMENT(-Quantity)<Quantity> FLAG(-type) ARGUMENT(f)<Type>
ROOT(root) T(set) T(%PATH%) T(|) T(clip)
ROOT(root) T(find) T(.) T(-name) T(*.mp3) T(-print0) T(|) T(xargs) T(-0) T(mplayer)
ROOT(root) T(pushd) T($(/bin/pwd))
ROOT() UTILITY(pushd) FLAG(-) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(Permission)<Permission>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print) BINARYLOGICOP(-or) FLAG(-path) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File> UTILITY(tee) ARGUMENT(File)<File>
ROOT(root) T(echo) T($() T(date)
ROOT() UTILITY(mkdir) FLAG(-p) ARGUMENT(Directory)<Directory>
ROOT() UTILITY(rsync) FLAG(-r) FLAG(-v) FLAG(-c) FLAG(--delete) FLAG(--size-only) FLAG(--dry-run) ARGUMENT(File)<File> ARGUMENT(File)<File> ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT(root) T(alias) T(cd-=cd) T($(history) T(-p) T(!!:1))
ROOT() UTILITY(chgrp) FLAG(-R) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(who) UTILITY(sed) ARGUMENT(Program)<Program> UTILITY(wc) FLAG(-l)
ROOT() PIPELINE() UTILITY(df) ARGUMENT(File)<File> UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(ifconfig) UTILITY(sed) ARGUMENT(Program)<Program> ARGUMENT(File)<File>
ROOT(root) T(find) T(.) T(-type) T(f) T(-name) T(composer.json) T(-exec) T(composer) T(validate) T({}) T(;)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(file) ARGUMENT({})<File>
ROOT(root) T(mvn) T(help:evaluate) T(-Dexpression=project.version) T(|) T(tail) T(-8) T(|) T(head) T(-1)
ROOT(root) T(shred) T(-s) T(10) T(-) T(>) T(my-file)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-exec::+) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File> FLAG(-exec::+) UTILITY(echo) ARGUMENT(Path)<Path>
"ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-printf) ARGUMENT(""%f\n"")<Format> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>"
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-printf) ARGUMENT('%s %p\n')<Format> UTILITY(sort) FLAG(-n) FLAG(-r) UTILITY(head) FLAG(-n) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(od) FLAG(-c) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(grep) FLAG(-E) FLAG(-o) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> UTILITY(tr) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-print) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(cp) FLAG(-a) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> ARGUMENT(Path)<Path>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> ARGUMENT(Path)<Path> FLAG(-exec::;) UTILITY(file) ARGUMENT({})<File> UTILITY(grep) FLAG(-w) FLAG(-E) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(ifconfig) UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(cat) ARGUMENT(File)<File>
ROOT(root) T(su) T(-cp) T(filename.sh)
ROOT(root) T(grep) T(-v) T(pattern) T(filename) T(>) T(filename2;) T(mv) T(filename2) T(filename)
ROOT(root) T(find) T(-fprint0)
ROOT(root) T(find) T(temp/medium/*) T(-maxdepth) T(2) T(-iname) T(*.jpg) T(-print0) T(|) T(xargs) T(-0) T(mogrify) T(-resize) T(428x270>) T(-quality) T(80) T(-compress) T(JPEG) T(-monitor) T(-strip)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::+) UTILITY(grep) FLAG(-H) FLAG(-i) FLAG(-n) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number>
ROOT(root) T(join) T(-t) T(Regex) T(-j) T(Regex) T(<() T(sort) T(File)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-r) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rename) ARGUMENT(Regex)<Regex> ARGUMENT({})<Regex>
ROOT(root) T(head) T(-200) T(/dev/urandom) T(|cksum) T(|) T(cut) T(-f1) T(-d) T(|) T(awk) T({print) T($1%63000+2001})
"ROOT(root) T(awk) T({print) T($2}) T(<) T(file.txt) T(|) T(paste) T(-s) T(-d,) T(-)"
ROOT() PIPELINE() UTILITY(curl) ARGUMENT(Regex)<Regex> UTILITY(sh)
ROOT(root) T(watch) T(-n1200) T(xbacklight) T(-set) T(0%) T(&&) T(sleep) T(20) T(&&) T(xbacklight) T(-set) T(100%)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(ls) FLAG(-l) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-mmin) ARGUMENT(+Quantity)<Quantity> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-delete)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(set) FLAG(-o) ARGUMENT(nounset)<Option>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
"ROOT(root) T(find) T($DIR_TO_CLEAN) T(-mtime) T(+$DAYS_TO_SAVE) T(-exec) T(bash) T(-c) T(printf) T(""Total:) T(%d\n"") T($#;) T(rm) T(""$@"") T(_) T({}) T(+)"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(ln) FLAG(-s) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(yes) UTILITY(mv) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(cal) UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(column) FLAG(-s) ARGUMENT(Regex)<Regex> FLAG(-t)
ROOT(root) T(echo) T(-n) T($(pwd)) T(|) T(pbcopy)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-exec::+) UTILITY(chown) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-empty)
ROOT(root) T(find) T(.) T(-depth) T(-print0) T(|) T(cpio) T(--null) T(-o) T(>) T(../lpicpio.1)
ROOT() UTILITY(gzip) COMMANDSUBSTITUTION() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(!) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() UTILITY(shopt) FLAG(-s) ARGUMENT(lastpipe)<Option>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-path) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(Path) T(-path) T(Regex) T(-exec) T(mv) T({}) T($() T(dirname) T({})
ROOT() UTILITY(chown) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UTILITY(sort) FLAG(-u) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(cat) ARGUMENT({})<File> UTILITY(md5sum)
ROOT(root) T(find) T(.) T(-name) T(filename) T(including) T(space) T(-print0) T(|) T(xargs) T(-0) T(ls) T(-aldF) T(>) T(log.txt)
ROOT() UTILITY(split) FLAG(-l) ARGUMENT(Quantity)<Quantity> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(env) T($() T(hostname)
ROOT(root) T(join) T(-v) T(Quantity) T(<() T(sort) T(File)
ROOT() PIPELINE() UTILITY(printf) ARGUMENT(%s)<Format> ARGUMENT($pass)<Regex> UTILITY(md5)
ROOT(root) T(find) T(./) T(-type) T(f) T(-name) T(*.[mh]) T(-exec) T(wc) T(-l) T({}) T(;) T(|) T(sed) T(-e) T(s/[) T(]*//g) T(|) T(cut) T(-d.) T(-f1) T(|) T(paste) T(-sd+) T(-) T(|) T(bc)
ROOT() PIPELINE() UTILITY(od) FLAG(-t) ARGUMENT(x1)<Type> ARGUMENT(File)<File> UTILITY(cut) FLAG(-c) ARGUMENT(Number)<Number>
ROOT() UTILITY(pstree) FLAG(-p) ARGUMENT(Regex)<Regex>
ROOT(root) T(rsync) T(-auv) T(-e) T(ssh) T(--progress) T(sourcedir/) T(user@dest.com:/dest/dir/)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-printf) ARGUMENT('%s\n')<Format> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(du) FLAG(-c) FLAG(-s) FLAG(-h) ARGUMENT({})<File>
ROOT(root) T(ls) T(2>&1) T(|) T(tee) T(/tmp/ls.txt)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(sed) ARGUMENT(Program)<Program> UTILITY(awk) FLAG(-F) ARGUMENT(Regex)<Regex> ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(!) FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(!) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-delete)
ROOT(root) T(python) T(hello.py) T(`find) T(.) T(-name) T(*.txt`)
ROOT() PIPELINE() UTILITY(seq) ARGUMENT(Number)<Number> UTILITY(sed) ARGUMENT(Program)<Program>
ROOT(root) T(find) T(root) T(-mindepth) T(2) T(-type) T(d) T(2>/dev/null) T(-exec) T(rm) T(-fR) T({}) T(;)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-exec::;) UTILITY(tar) FLAG(-r) FLAG(-v) FLAG(-f) ARGUMENT(File)<File> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-exec::;) UTILITY(chown) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(Permission)<Permission>
ROOT(root) T(find) T(.) T(-iname) T(.#*) T(-print0) T(|) T(while) T(read) T(-r) T(-d) T(i;) T(do) T(foobar) T($i;) T(done)
ROOT(root) T(alias) T(mycd=cd) T(`echo) T($1`)
ROOT() PIPELINE() UTILITY(find) FLAG(-x) ARGUMENT(Path)<Path> FLAG(-user) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(chown) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-printf) ARGUMENT('%s %p\n')<Format> UTILITY(sort) FLAG(-r) FLAG(-n) UTILITY(head) FLAG(-) ARGUMENT(Quantity)<Quantity>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-n) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(cd) COMMANDSUBSTITUTION() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(d)<Type> UTILITY(sed) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-iwholename) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(grep) FLAG(-H) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(paste) FLAG(-s) FLAG(-d) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT() UTILITY(tree) FLAG(-D)
ROOT() PIPELINE() UTILITY(zcat) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-E) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> UNARYLOGICOP(!) FLAG(-perm) ARGUMENT(-Permission)<Permission>
ROOT() UTILITY(echo) COMMANDSUBSTITUTION() UTILITY(date) ARGUMENT(+%H:%M:%S)<Format>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) FLAG(-r) FLAG(-f) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(ls) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(ssh) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(!) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(gzip) ARGUMENT({})<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-ls)
ROOT(root) T(find) T(<path>) T(-xdev) T(-type) T(f) T(-name) T(*.txt) T(-exec) T(ls) T(-l) T({}) T(;)
ROOT() UTILITY(du) FLAG(-h) ARGUMENT(File)<File>
ROOT(root) T(tmux) T(new-window) T(-t) T(vims) T(-d) T(-n) T(win0) T(vim) T(foo)
ROOT(root) T(file) T(-L) T($(python) T(-c) T(import) T(sys;) T(print(sys.executable)))
ROOT() PIPELINE() UTILITY(ls) FLAG(-1) UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> UTILITY(grep) FLAG(-E) ARGUMENT(Regex)<Regex>
ROOT(root) T(comm) T(-2) T(-3) T(<() T(sort) T(File)
ROOT() UTILITY(su) FLAG(-l) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(!) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(d)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rmdir) ARGUMENT({})<Directory>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> BINARYLOGICOP(-and) BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(ls) T(-ltq) T(<path>) T(|) T(head) T(-n) T(1)
ROOT(root) T(find) T(/.) T(-name) T(toBeSearched.file) T(2>&1) T(|) T(grep) T(-v) T(Permission) T(denied)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT(root) T(join) T(<() T(sort) T(-n) T(File)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-atime) ARGUMENT(Timespan)<Timespan>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan>
ROOT() UTILITY(split) FLAG(-l) ARGUMENT(Quantity)<Quantity> ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0)
ROOT() UTILITY(which) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-ls)
ROOT() PIPELINE() UTILITY(ps) FLAG(-e) FLAG(-f) UTILITY(tee) ARGUMENT(File)<File> UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-v) ARGUMENT(Regex)<Regex> UTILITY(wc) FLAG(-l)
ROOT() UTILITY(ls) FLAG(-d) OPERATOR(--) ARGUMENT(File)<File>
ROOT() UTILITY(ssh) FLAG(-O) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT(root) T(echo) T(some) T(output) T(|) T(sudo) T(-u) T(some_user) T(tee) T(/some/path/some_file)
ROOT() PIPELINE() UTILITY(ls) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(chown) FLAG(-R) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT(root) T(find) T(./) T(-name) T(*.ogv) T(-exec) T(myfile) T({}) T(;)
ROOT() UTILITY(echo) COMMANDSUBSTITUTION() UTILITY(cat) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) FLAG(-f) ARGUMENT({})<File>
ROOT() UTILITY(compress) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print)
ROOT() PIPELINE() UTILITY(diff) FLAG(-r) FLAG(-q) ARGUMENT(File)<File> ARGUMENT(File)<File> UTILITY(grep) FLAG(-E) ARGUMENT(Regex)<Regex> UTILITY(sed) FLAG(-n) ARGUMENT(Program)<Program> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(chown) FLAG(-R) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(rev) ARGUMENT(File)<File> UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number> UTILITY(rev)
ROOT() UTILITY(kill) FLAG(-) ARGUMENT(Regex)<Regex> COMMANDSUBSTITUTION() UTILITY(cat) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> BRACKET() UNARYLOGICOP(!) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-depth) FLAG(-wholename) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-mtime) ARGUMENT(-Timespan)<Timespan> FLAG(-print) UTILITY(cpio) FLAG(-o) FLAG(-a) FLAG(-v)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-exec::;) UTILITY(basename) ARGUMENT({})<Regex> UTILITY(wc) FLAG(-l)
ROOT(root) T(su) T($username) T(-c) T(tar) T(xzvf) T(..)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan> FLAG(-print)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(ls) FLAG(-l) ARGUMENT({})<File>
ROOT(root) T(echo) T(error) T(1>&2) T(|) T(tee) T(-a) T(log)
"ROOT(root) T(watch) T(-n1) T(ps) T(x) T(-o) T(""%p) T(%r) T(%c"") T(|) T(grep) T(""test"")"
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(mv) FLAG(-t) ARGUMENT(Directory)<Directory> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(ls) FLAG(-d) ARGUMENT(File)<File> UTILITY(grep) FLAG(-v) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-I) ARGUMENT({})<Regex> UTILITY(chown) FLAG(-R) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print) BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UNARYLOGICOP(-not) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(mv) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(ls) FLAG(-l) FLAG(--time-style) ARGUMENT(long-iso)<Option> UTILITY(sort) FLAG(-k) ARGUMENT(Number)<Number>
ROOT(root) T(echo) T($(pwd)/$filename)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-empty)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(sed) ARGUMENT(Program)<Program> UTILITY(sort) FLAG(-u)
ROOT(root) T(find) T({}) T(-type) T(f) T(-depth) T(1) T(-print0) T(-perm) T(+0111) T(|) T(xargs) T(-n1) T(-0) T(basename) T(|) T(sort) T(-r) T(&&) T(echo)
ROOT() UTILITY(mount) ARGUMENT(Regex)<Regex> FLAG(-t) ARGUMENT(tmpfs)<Option> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(hostname) FLAG(--ip-address)
"ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-printf) ARGUMENT(""f %s %p\n"")<Format>"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-exec::;) UTILITY(mv) ARGUMENT({})<File> FLAG(--target-directory) ARGUMENT(Directory)<Directory>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::+) UTILITY(rm) FLAG(-r) FLAG(-f) ARGUMENT({})<File>
ROOT() UTILITY(rsync) FLAG(-p) FLAG(-o) FLAG(-g) FLAG(-t) FLAG(-E) FLAG(-t) FLAG(-v) FLAG(-r) FLAG(--progress) FLAG(--bwlimit) ARGUMENT(Bandwidth)<Bandwidth> ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-path) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(yes) ARGUMENT(Regex)<Regex> UTILITY(nl) UTILITY(tee) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(wc) FLAG(-c)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-amin) ARGUMENT(-Quantity)<Quantity>
"ROOT(root) T(find) T(.) T(-type) T(d) T(-exec) T(sh) T(-c) T(cd) T(-P) T(--) T(""{}"") T(&&) T(pwd) T(-P) T(;)"
ROOT() PIPELINE() UTILITY(df) FLAG(-P) ARGUMENT(File)<File> UTILITY(tail) FLAG(-) ARGUMENT(Quantity)<Quantity> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT(root) T(find) T(.) T(-name) T(sample*_1.txt) T(|) T(perl) T(-pe) T(s/_1\.txt$//) T(|) T(parallel) T(program) T({}-out) T({}_1.txt) T({}_2.txt)
ROOT(root) T(find) T(.) T(-type) T(f) T(-exec) T(md5sum) T({}) T(;) T(>) T(MD5SUMS)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-regex) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(ls) ARGUMENT({})<File>
ROOT() UTILITY(rsync) FLAG(-a) FLAG(-v) FLAG(-z) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(ln) FLAG(-s) ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() PIPELINE() UTILITY(diff) FLAG(-U) ARGUMENT(Quantity)<Quantity> ARGUMENT(File)<File> ARGUMENT(File)<File> UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(wc) FLAG(-l)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-newer) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-atime) ARGUMENT(+Timespan)<Timespan> FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-print)
ROOT() UTILITY(rmdir) FLAG(--ignore-fail-on-non-empty) ARGUMENT(Directory)<Directory>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-delete)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-ctime) ARGUMENT(-Timespan)<Timespan>
ROOT() PIPELINE() UTILITY(ls) UTILITY(column) FLAG(-c) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan>
ROOT() PIPELINE() UTILITY(ls) ARGUMENT(File)<File> UTILITY(rev) UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number> UTILITY(rev)
ROOT() PIPELINE() UTILITY(du) FLAG(-s) FLAG(-h) ARGUMENT(File)<File> UTILITY(sort) FLAG(-n)
ROOT() UTILITY(split) FLAG(--bytes) ARGUMENT(Size)<Size> ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> BRACKET() FLAG(-perm) ARGUMENT(-Permission)<Permission> FLAG(-fprintf) ARGUMENT(File)<File> ARGUMENT('%#m %u %p\n')<Format> BINARYLOGICOP(-and) BRACKET() FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-fprintf) ARGUMENT(File)<File> ARGUMENT('%-10s %p\n')<Format>
ROOT() PIPELINE() UTILITY(hostname) FLAG(-i) UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(grep) FLAG(-I) FLAG(-q) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> BINARYLOGICOP(-and) FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(basename) ARGUMENT({})<Regex>
ROOT(root) T(find) T(.) T(-name) T(AssemblyInfo.cs) T(-print0) T(|) T(xargs) T(-0) T(git) T(diff) T(--)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(ls) FLAG(-l) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-ctime) ARGUMENT(+Timespan)<Timespan> FLAG(-exec::;) UTILITY(ls) FLAG(-l) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(head) FLAG(-n) ARGUMENT(Quantity)<Quantity> FLAG(-v) ARGUMENT({})<File>
ROOT() UTILITY(gunzip) ARGUMENT(Regex)<Regex>
ROOT(root) T(comm) T(-12) T(<(find) T(.) T(-maxdepth) T(1) T(|) T(sed) T(-e) T(s/^.\///)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-atime) ARGUMENT(+Timespan)<Timespan> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-and) BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT(root) T(find) T(|) T(xargs) T(-i) T(-I) T({}) T(sh) T(-c) T(echo) T({}) T({}) T({})
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(Size)<Size> FLAG(-print)
ROOT(root) T(tmux) T(new) T(-d) T(bash) T(-c) T('$CMD')
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan>
"ROOT(root) T(seq) T(1) T(10) T(|) T(xargs) T(-n1) T(-P2) T(bash) T(-c) T(i=$0;) T(url=""http://example.com/?page${i}.html"";) T(curl) T(-O) T(-s) T($url)"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(grep) FLAG(-H) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type> UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-n) ARGUMENT(Quantity)<Quantity> FLAG(-I) ARGUMENT({})<Regex> UTILITY(cp) FLAG(-i) ARGUMENT(File)<File> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(cal) UTILITY(awk) ARGUMENT(Program)<Program> ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(cp) FLAG(-r) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(!) FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(!) FLAG(-path) ARGUMENT(Regex)<Regex> UNARYLOGICOP(!) FLAG(-path) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) FLAG(-r) FLAG(-f) ARGUMENT({})<File>
ROOT() UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
ROOT() COMMANDSUBSTITUTION() UTILITY(mktemp) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print) BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-daystart) FLAG(-atime) ARGUMENT(Timespan)<Timespan>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(Size)<Size>
ROOT(root) T(find) T(.) T(-name) T(Lemon*.mp3) T(-print0) T(|) T(xargs) T(-0) T(mplayer)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-l) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT(root) T(echo) T($() T(ls)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(awk) FLAG(-F) ARGUMENT(Regex)<Regex> ARGUMENT(Program)<Program> UTILITY(sort) FLAG(-t) ARGUMENT(Regex)<Regex> FLAG(-k) ARGUMENT(Number)<Number> UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(echo) T($(($(date) T(+%s)) T(/) T(60) T(/) T(60) T(/) T(24)))
ROOT() PIPELINE() UTILITY(sort) ARGUMENT(File)<File> ARGUMENT(File)<File> UTILITY(uniq)
ROOT() PIPELINE() UTILITY(sort) FLAG(--merge) ARGUMENT(File)<File> UTILITY(split) FLAG(-l) ARGUMENT(Quantity)<Quantity> ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(sed) FLAG(-i) ARGUMENT(Program)<Program> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-user) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(ls) FLAG(-l) FLAG(-s) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-atime) ARGUMENT(+Timespan)<Timespan>
ROOT() UTILITY(mkdir) ARGUMENT(Directory)<Directory>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(grep) FLAG(-i) ARGUMENT(Regex)<Regex> UTILITY(more)
ROOT() UTILITY(echo) ARGUMENT(Regex)<Regex> COMMANDSUBSTITUTION() UTILITY(pwd)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UTILITY(env) FLAG(-i) ARGUMENT(Program)<Program> ARGUMENT(Program)<Program>
ROOT() UTILITY(chown) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT(root) T(find) T(originals) T(-name) T(*.jpg) T(|) T(xargs) T(-1) T(makeallsizes)
ROOT() UTILITY(set) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(ls) FLAG(-l) COMMANDSUBSTITUTION() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(./program) T(|) T(tee) T(a.txt)
ROOT() UTILITY(rsync) FLAG(-a) FLAG(-f) ARGUMENT(Program)<Program> FLAG(-f) ARGUMENT(Program)<Program> ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT(root) T(find) T(~) T(-type) T(d) T(-exec) T(mkdir) T(junk) T({}) T(;) T(2>) T(/dev/null)
ROOT(root) T(find) T(/path/to/directory/folder{1..50}) T(-name) T(*.txt) T(-exec) T(basename) T({}) T(;) T(2>/dev/null)
ROOT() UTILITY(join) FLAG(-t) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT(root) T(/bin/true) T($(seq) T(1) T(100000))
ROOT() PIPELINE() UTILITY(zcat) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-i) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(shopt) ARGUMENT(globstar)<Option>
ROOT() UTILITY(chown) FLAG(-v) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(history) UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-xtype) ARGUMENT(f)<Type> UNARYLOGICOP(!) FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(mv) FLAG(-i) FLAG(-v) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT() UTILITY(ln) FLAG(-s) ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(paste) FLAG(-s) FLAG(-d) ARGUMENT(Regex)<Regex> UTILITY(sed) FLAG(-e) ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(df) FLAG(-P) FLAG(-h) UTILITY(column) FLAG(-t)
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(tee) FLAG(-a) ARGUMENT(File)<File>
ROOT() UTILITY(who)
ROOT() UTILITY(gzip) FLAG(-d) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(bzip2) FLAG(-k) FLAG(-v) ARGUMENT(File)<File>
ROOT(root) T(alias) T(your_env=source) T(~/scripts/your_env.sh)
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(md5sum)
ROOT(root) T(find) T(-mtime) T(+7) T(-print) T(>) T(found.lst)
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(wc) FLAG(-l)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> FLAG(-f) FLAG(-amin) ARGUMENT(-Quantity)<Quantity>
ROOT() UTILITY(mktemp) FLAG(-d) FLAG(-p) ARGUMENT(Directory)<Directory>
ROOT() PIPELINE() UTILITY(od) FLAG(-t) ARGUMENT(x1)<Type> FLAG(--skip-bytes) ARGUMENT(Size)<Size> FLAG(--read-bytes) ARGUMENT(Size)<Size> ARGUMENT(File)<File> UTILITY(head) FLAG(-) ARGUMENT(Quantity)<Quantity> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-regex) ARGUMENT(Regex)<Regex> FLAG(-print0)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-nouser) FLAG(-nogroup)
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(tr) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(cal) UTILITY(sed) ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(crontab) FLAG(-l) UTILITY(grep) FLAG(-E) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(d)<Type>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-regextype) ARGUMENT(posix-egrep)<Type> FLAG(-regex) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-n) ARGUMENT(Quantity)<Quantity> FLAG(-I) ARGUMENT({})<Regex> UTILITY(ls) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(gzip) FLAG(-d) FLAG(-c) ARGUMENT(Regex)<Regex> UTILITY(tar) FLAG(-x) FLAG(-f) ARGUMENT(File)<File>
ROOT(root) T(tar) T(-c) T(--checkpoint=.1000) T(/var)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(chown) T(-R) T($() T(whoami)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-path) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() UTILITY(column) FLAG(-t) FLAG(-s) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(f)<Type>
ROOT(root) T(php) T(-i) T(|) T(more)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> UTILITY(wc) FLAG(-l)
ROOT() PIPELINE() UTILITY(yes) ARGUMENT(Regex)<Regex> UTILITY(nl) FLAG(-b) ARGUMENT(a)<Option> UTILITY(sed) FLAG(-n) FLAG(-e) ARGUMENT(Program)<Program> FLAG(-e) ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> UTILITY(more)
ROOT(root) T(zcat) T(/usr/share/man/man1/man.1.gz) T(|) T(groff) T(-mandoc) T(-Thtml)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-ctime) ARGUMENT(-Timespan)<Timespan> FLAG(-exec::;) UTILITY(sed) FLAG(-i) ARGUMENT(Regex)<Program> FLAG(-e) ARGUMENT(Program)<Program> FLAG(-e) ARGUMENT(Program)<Program> ARGUMENT({})<File>
ROOT(root) T(yum) T(--help)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mnewer) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(cp) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT(root) T(comm) T(-2) T(-3) T(<() T(sort) T(-u) T(File)
ROOT() UTILITY(awk) ARGUMENT(Program)<Program> PROCESSSUBSTITUTION(<) UTILITY(w)
ROOT(root) T(su) T(-) T(postgres)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(cd) T($() T(dirname) T($() T(which) T(Regex)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(-prune) FLAG(-empty)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(tar) FLAG(-c) FLAG(-v) FLAG(-f) ARGUMENT(File)<File> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> ARGUMENT({})<File> UTILITY(sed) ARGUMENT(Program)<Program>
ROOT() UTILITY(mount) FLAG(-o) ARGUMENT(remount)<Option> ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(tail) FLAG(-c) ARGUMENT(+Quantity)<Quantity> UTILITY(head) FLAG(-c) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(cat) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(awk) FLAG(-F) ARGUMENT(Regex)<Regex> ARGUMENT(Program)<Program>
"ROOT() UTILITY(join) FLAG(-1) ARGUMENT(Regex)<Regex> FLAG(-2) ARGUMENT(Regex)<Regex> FLAG(-o) ARGUMENT(1.1,1.2,1.3,2.3)<Format> ARGUMENT(File)<File> ARGUMENT(File)<File>"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(!) FLAG(-path) ARGUMENT(Regex)<Regex> UNARYLOGICOP(!) FLAG(-path) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-print) UTILITY(grep) FLAG(-i) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::+) UTILITY(echo) ARGUMENT(Regex)<Regex> ARGUMENT({})<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(grep) FLAG(-l) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(l)<Type>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-empty) FLAG(-type) ARGUMENT(d)<Type> FLAG(-delete)
ROOT() UTILITY(date) FLAG(--date) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(mv) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(mv) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) FLAG(-r) FLAG(-f) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(wc) FLAG(-l) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(gunzip)
ROOT() PIPELINE() UTILITY(echo) FLAG(-n) UTILITY(md5sum)
ROOT() UTILITY(history) FLAG(-n)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::+) UTILITY(grep) FLAG(-H) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(ping) FLAG(-c) ARGUMENT(Quantity)<Quantity> ARGUMENT(Regex)<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(awk) ARGUMENT(Program)<Program> UTILITY(sed) ARGUMENT(Program)<Program>
ROOT(root) T(ls) T(2>&1) T(|) T(tee) T(-a) T(/tmp/ls.txt)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-amin) ARGUMENT(+Quantity)<Quantity> FLAG(-amin) ARGUMENT(-Quantity)<Quantity>
ROOT() UTILITY(gzip) FLAG(-d) FLAG(--force) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(curl) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(d)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-r) FLAG(-I) ARGUMENT({})<Regex> UTILITY(mv) FLAG(-t) ARGUMENT(Directory)<Directory> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(/path) T(-name) T(pattern) T(-exec) T(somecommand) T({}) T(;)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(qstat) T(-xml) T(|) T(tr) T(\n) T(|) T(sed) T(s#<job_list[^>]*>#\n#g) T(|) T(sed) T(s#<[^>]*>##g) T(|) T(grep) T(|) T(column) T(-t)
ROOT() UTILITY(tar) FLAG(-c) FLAG(-z) FLAG(-v) FLAG(-f) ARGUMENT(File)<File> FLAG(-C) ARGUMENT(Directory)<Directory> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::+) UTILITY(cp) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT() UTILITY(crontab) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(wc) FLAG(-l) ARGUMENT({})<File>
ROOT() UTILITY(rm) FLAG(-f) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(crontab) FLAG(-u) ARGUMENT(Regex)<Regex> FLAG(-e)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-daystart) FLAG(-ctime) ARGUMENT(Timespan)<Timespan> FLAG(-ls) FLAG(-type) ARGUMENT(f)<Type>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::+) UTILITY(sed) ARGUMENT(Program)<Program> ARGUMENT({})<File> UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-empty)
ROOT() UTILITY(nl) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan>
ROOT(root) T(find) T(/mnt/zip) T(-name) T(*prefs) T(copy) T(-print0) T(|) T(xargs>) T(-0) T(rm)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mmin) ARGUMENT(-Quantity)<Quantity> UNARYLOGICOP(-not) FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(history) UTILITY(sed) ARGUMENT(Program)<Program>
ROOT() UTILITY(read) FLAG(-p) ARGUMENT(Regex)<Regex> FLAG(-n) ARGUMENT(Quantity)<Quantity> FLAG(-r)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(Size)<Size>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-exec::;) UTILITY(rename) ARGUMENT(Regex)<Regex> ARGUMENT({})<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-user) ARGUMENT(Regex)<Regex>
"ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-newermt) ARGUMENT(Regex)<Regex> UNARYLOGICOP(!) FLAG(-newermt) ARGUMENT(Regex)<Regex> FLAG(-printf) ARGUMENT(""%T+\t%p\n"")<Format> UTILITY(sort) UTILITY(awk) ARGUMENT(Program)<Program>"
ROOT() PIPELINE() UTILITY(w) UTILITY(head) FLAG(-) ARGUMENT(Quantity)<Quantity> UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number> UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number> UTILITY(tr) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
"ROOT(root) T(alias) T(git-root=if) T([) T(""`git) T(rev-parse) T(--show-cdup`"") T(!=) T("""") T(];) T(then) T(cd) T(`git) T(rev-parse) T(--show-cdup`;) T(fi)"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(c)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT(root) T(find) T(-type) T(f) T(-name) T(*.txt) T(-print0) T(|) T(xargs) T(--null) T(perl) T(-pi) T(-e) T(s/Windows/Linux/)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-exec::+) UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) FLAG(-r) FLAG(-d) FLAG(-f) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(wc) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type> FLAG(-exec::+) UTILITY(mv) FLAG(-t) ARGUMENT(Directory)<Directory> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(who) UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(tr) FLAG(-d) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(echo) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT({})<Regex> ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UNARYLOGICOP(!) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rename) ARGUMENT(Regex)<Regex> ARGUMENT({})<Regex>
ROOT(root) T(export) T(PS1=\[\e]0;`hostname`\a\]${debian_chroot:+($debian_chroot)}\u@\h:\w\$)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type>
"ROOT() UTILITY(date) ARGUMENT(""+%Y-%m-%d %H:%M:%S"")<Format>"
ROOT(root) T(find) T(~/code) T(-name) T(.*) T(-prune) T(-o) T(-type) T(f) T(-a) T(-perm) T(/u+x) T(-printf) T(:%h\n) T(|sort) T(|uniq) T(|tr) T(-d) T(\n) T(>) T(~/.codepath)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type> UTILITY(sed) ARGUMENT(Program)<Program>
ROOT() UTILITY(chown) FLAG(-R) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT() UTILITY(split) FLAG(-n) ARGUMENT(Quantity)<Quantity> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-newer) ARGUMENT(File)<File> BINARYLOGICOP(-and) UNARYLOGICOP(!) FLAG(-newer) ARGUMENT(File)<File>
ROOT(root) T(find) T(Path) T(-name) T(Regex) T(!) T(-exec) T(sh) T(-c) T(find) T(Path) T(-name) T(Regex) T(\;)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) FLAG(-f) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> BRACKET() FLAG(-iname) ARGUMENT(Regex)<Regex> UNARYLOGICOP(!) FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) FLAG(-r) FLAG(-f) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-delete)
ROOT() UTILITY(mkdir) ARGUMENT(Directory)<Directory> ARGUMENT(Directory)<Directory> ARGUMENT(Directory)<Directory> ARGUMENT(Directory)<Directory>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mmin) ARGUMENT(-Quantity)<Quantity>
ROOT() PIPELINE() UTILITY(yes) ARGUMENT(Regex)<Regex> UTILITY(rm) FLAG(-i) FLAG(-r) ARGUMENT(File)<File> ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type>
ROOT(root) T(kill) T($(ps) T(aux) T(|) T(grep) T([p]ython) T(csp_build.py) T(|) T(awk) T({print) T($2}))
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-print) UTILITY(wc) FLAG(-l)
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(wc) FLAG(-l)
ROOT() PIPELINE() UTILITY(wc) FLAG(-l) ARGUMENT(File)<File> UTILITY(tr) FLAG(-s) ARGUMENT(Regex)<Regex> UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(cut) FLAG(-f) ARGUMENT(Number)<Number> FLAG(-d) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(column) FLAG(-t) FLAG(-s) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT() UTILITY(env) FLAG(-u) ARGUMENT(Regex)<Regex> ARGUMENT(Program)<Program>
ROOT() UTILITY(uname) FLAG(-n)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-ls)
ROOT() PIPELINE() UTILITY(ls) FLAG(-l) FLAG(-R) ARGUMENT(File)<File> UTILITY(tee) ARGUMENT(File)<File>
ROOT() UTILITY(read) FLAG(-p) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::+) UTILITY(grep) FLAG(-n) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT(root) T(screen) T(-R) T(-O) T(-t) T(mysession) T(-S) T(mysession) T(-f)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan>
ROOT(root) T(find) T(-print0) T(|) T(while) T(IFS=) T(read) T(-rd) T($\0) T(f) T(;) T(do) T(echo) T([$f]) T(;) T(done)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(sed) ARGUMENT(Program)<Program> UTILITY(xargs) FLAG(-n) ARGUMENT(Quantity)<Quantity> FLAG(-I) ARGUMENT({})<Regex> UTILITY(wget) ARGUMENT({})<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(l)<Type> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(ls) FLAG(-l) FLAG(-d) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(awk) FLAG(-f) ARGUMENT(File)<File> ARGUMENT(Program)<Program> UTILITY(column) FLAG(-t)
ROOT() PIPELINE() UTILITY(rev) ARGUMENT(File)<File> UTILITY(sort) UTILITY(uniq) FLAG(-f) ARGUMENT(Quantity)<Quantity> UTILITY(rev)
ROOT() PIPELINE() UTILITY(yes) UTILITY(cp) FLAG(-r) FLAG(-f) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> ARGUMENT(Path)<Path>
ROOT() PIPELINE() UTILITY(df) FLAG(-P) FLAG(-h) ARGUMENT(File)<File> UTILITY(tail) FLAG(-) ARGUMENT(Quantity)<Quantity> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) FLAG(-r) FLAG(-f) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mmin) ARGUMENT(-Quantity)<Quantity>
ROOT() UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(sed) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-exec::;) UTILITY(rm) FLAG(-f) ARGUMENT({})<File>
ROOT(root) T(sudo) T(yum) T(update) T(openssl)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(f)<Type>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(-Size)<Size> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT(root) T(find) T(.) T(-type) T(f) T(-name) T(*.*) T(-print0) T(|) T(while) T(IFS=) T(read) T(-r) T(-d) T(file;) T(do) T(printf) T(%s\n) T($file) T(done)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(sed) ARGUMENT(Program)<Program> UTILITY(wc) FLAG(-l)
ROOT() PIPELINE() UTILITY(history) UTILITY(vim) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(!) FLAG(-path) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(!) FLAG(-newermt) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-print)
ROOT() UTILITY(read) FLAG(-r) FLAG(-p) ARGUMENT(Regex)<Regex> FLAG(-e) FLAG(-i) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(cd) COMMANDSUBSTITUTION() UTILITY(uname) FLAG(-r)
ROOT(root) T(shopt) T(-s) T(extglob;) T(cd) T(bar2;) T(ln) T(-s) T(../bar1/foo!(*.cc)) T(.)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-print) UTILITY(cpio) FLAG(-d) FLAG(-u) FLAG(-m) FLAG(-p) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(grep) FLAG(-H) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type>
ROOT() UTILITY(hostname) FLAG(-I)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(f)<Type> FLAG(-printf) ARGUMENT('%TY-%Tm\n')<Format> UTILITY(sort) UTILITY(uniq) FLAG(-c)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(!) FLAG(-iname) ARGUMENT(Regex)<Regex> ARGUMENT(Path)<Path>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(wc) FLAG(-w) ARGUMENT({})<File> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(rename) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT() UTILITY(rsync) FLAG(-a) FLAG(-v) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT(root) T(ssh) T(host) T(test) T(-e) T(/path/to/file)
ROOT() UTILITY(tar) FLAG(-c) FLAG(-v) FLAG(-z) FLAG(-f) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-newermt) ARGUMENT(Regex)<Regex> FLAG(-ls)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(f)<Type>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(.) T(-depth) T(-name) T(*.zip) T(-exec) T(/usr/bin/unzip) T(-n) T({}) T(;) T(-exec) T(rm) T({}) T(;)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(rsync) FLAG(-r) FLAG(-t) FLAG(-v) FLAG(-p) FLAG(-l) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(seq) FLAG(-w) ARGUMENT(Number)<Number>
ROOT(root) T(find) T(Path) T($() T(ls) T(-d) T(File)
ROOT() UTILITY(chmod) FLAG(-R) ARGUMENT(Permission)<Permission> ARGUMENT(File)<File>
ROOT(root) T(IFS=) T(read) T(-r) T(line)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-empty) FLAG(-print) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) FLAG(-f) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> UTILITY(od) FLAG(-t) ARGUMENT(x1)<Type> FLAG(-t) ARGUMENT(c)<Type>
ROOT(root) T(xargs) T(rm) T(-f) T(<<<) T($(find) T(.) T(-name) T(.txt))
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(cat) ARGUMENT({})<File>
ROOT() UTILITY(diff) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(echo) PROCESSSUBSTITUTION(<) UTILITY(yes)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-exec::+) UTILITY(rm) ARGUMENT({})<File>
ROOT(root) T(tmux) T(send-keys) T(-t) T(cf) T(cd) T(~/server) T(C-m)
ROOT(root) T(seq) T(0) T(20) T(|) T(xargs) T(-n1) T(tssh) T(MYBOXES)
ROOT(root) T(seq) T(Number) T(Number) T(|) T(sort) T(-R) T(|) T(tee) T(File) T(|) T(cat) T(<() T(cat) T(File)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune)
ROOT(root) T(gunzip) T(-c) T(blah.gz) T(|) T(some_command)
ROOT() UTILITY(chown) FLAG(-v) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT() UTILITY(comm) FLAG(-1) FLAG(-2) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(wc) FLAG(-l) ARGUMENT(File)<File> UTILITY(cut) FLAG(-f) ARGUMENT(Number)<Number> FLAG(-d) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(split) FLAG(-l) ARGUMENT(Quantity)<Quantity> FLAG(-d) FLAG(-a) ARGUMENT(Quantity)<Quantity> ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(wc) FLAG(-l) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(d)<Type>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(-Size)<Size>
ROOT(root) T(find) T($1) T(-type) T(f) T(-print0) T(|) T(parallel) T(-0) T(-X) T(md5) T(>) T(checksums.md5)
ROOT() UTILITY(cat) COMMANDSUBSTITUTION() UTILITY(which) ARGUMENT(Regex)<Regex>
ROOT(root) T(comm) T(<() T(sort) T(File)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(ls) FLAG(-l) ARGUMENT({})<File>
ROOT() UTILITY(mv) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-newer) ARGUMENT(File)<File> FLAG(-user) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(chown) FLAG(-R) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT(root) T(find) T(/) T(-type) T(f) T(-name) T(lilo.conf) T(2>/dev/null) T(-exec) T(cat) T({}) T(;) T(>lilo.txt)
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(read) FLAG(-a) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(/tmp) T(-size) T(0) T(-atime) T(+10) T(-exec) T(ls) T(-l) T({}) T(;) T(>) T(/tmp/checkold.txt)
ROOT(root) T(ssh) T(-t) T(genja.org) T(ssh) T(raptor.lan) T(hostname\;) T(uptime)
ROOT(root) T(env) T($() T(cat) T(File)
ROOT() UTILITY(chmod) ARGUMENT(Permission)<Permission> COMMANDSUBSTITUTION() UTILITY(which) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(date) FLAG(-r) ARGUMENT(File)<File> ARGUMENT(+\ %s)<Format>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
"ROOT(root) T(eval) T(`find) T(-type) T(f) T(-name) T(*.htm) T(|awk) T(-F/) T('{print) T(cp) T($0) T($2) T(-) T($3) T(-) T($4) T(-) T(substr($5,5)) T(;) T(}'`)"
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> ARGUMENT(File)<File> ARGUMENT(File)<File> UTILITY(sort) UTILITY(comm) FLAG(-2) FLAG(-3) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-regex) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(ls) FLAG(-l) FLAG(-r) FLAG(-t) UTILITY(tail) FLAG(-n) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-regex) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> UTILITY(sort)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(!) FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-mtime) ARGUMENT(Timespan)<Timespan> FLAG(-exec::;) UTILITY(ls) FLAG(-l) FLAG(-t) FLAG(-r) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::+) UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-perm) ARGUMENT(Permission)<Permission> FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> UTILITY(wc) FLAG(-l)
ROOT() PIPELINE() UTILITY(shopt) FLAG(-p) UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-user) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(!) FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-print)
ROOT() UTILITY(ln) FLAG(-f) ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-iwholename) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(grep) FLAG(-H) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT(root) T(find) T(.) T(-name) T(*.php) T(-type) T(f) T(-print0) T(|) T(xargs) T(-0) T(-grep) T(-Hn) T($test) T(|) T(wc) T(-l)
ROOT() PIPELINE() UTILITY(ls) UTILITY(tee) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::+) UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT(root) T(find) T(.) T(-type) T(f) T(-print0) T(|) T(parallel) T(-0) T(-X) T(md5sum)
ROOT(root) T(ps) T(-fp) T(<pid>)
ROOT(root) T(rsync) T(-rvz) T(--progress) T(--remove-sent-files) T(./dir) T(user@host:/path)
ROOT() PIPELINE() UTILITY(man) ARGUMENT(Regex)<Regex> UTILITY(less) FLAG(-p) ARGUMENT(Regex)<Regex>
ROOT(root) T(cat) T($() T(uname) T(-r)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-execdir::;) UTILITY(echo) ARGUMENT({})<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(kill) T(`ps) T(ax) T(|) T(grep) T(python) T(csp_build.py) T(|) T(awk) T({print) T($1}`)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(-Permission)<Permission>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> UTILITY(grep) FLAG(-i) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-i) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(w) FLAG(-h) UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number> UTILITY(sort) UTILITY(uniq)
ROOT(root) T(find) T(.) T(-type) T(l) T(-daystart) T(-mtime) T($date_dif) T(-exec) T(copy_it.sh) T($verbose) T(-s) T({}) T(-t) T($to_dir) T(;)
ROOT() UTILITY(ln) FLAG(-s) FLAG(-f) ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(!) FLAG(-user) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-size) ARGUMENT(-Size)<Size>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT(root) T(fg) T(`jobs) T(|) T(tr) T([]) T(\n) T(|) T(zenity) T(--list) T(--column) T(--column) T(`)
ROOT() UTILITY(df) FLAG(-h) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UTILITY(grep) FLAG(-o) FLAG(-E) ARGUMENT(Regex)<Regex> UTILITY(sort) FLAG(-u)
ROOT() PIPELINE() UTILITY(tac) ARGUMENT(File)<File> UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(env)
ROOT(root) T(rsync) T(-avz) T(-e) T(ssh) T(--progress) T(user@source-server:/somedirA/) T(somedirB/)
ROOT(root) T(find) T($SOURCE) T(-type) T(f) T(-iname) T(*.jpg) T(-exec) T(/path/to/filecopy.sh) T({}) T(+)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(readlink) FLAG(-f) COMMANDSUBSTITUTION() UTILITY(which) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(head) FLAG(-) ARGUMENT(Quantity)<Quantity> ARGUMENT(File)<File> UTILITY(tr) FLAG(-s) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> UTILITY(nl) FLAG(-n) ARGUMENT(ln)<Format> UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(cut) FLAG(-f) ARGUMENT(Number)<Number>
ROOT() UTILITY(cd) COMMANDSUBSTITUTION() PIPELINE() UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> UTILITY(cut) FLAG(-f) ARGUMENT(Number)<Number> FLAG(-d) ARGUMENT(Regex)<Regex> UTILITY(tr) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> UTILITY(tr) FLAG(-d) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mmin) ARGUMENT(-Quantity)<Quantity>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-ipath) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(du) FLAG(-h) FLAG(-c) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(jobs) FLAG(-p) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(kill) ARGUMENT({})<Regex>
ROOT(root) T(alias) T(restart_rails=kill) T(-9) T(`cat) T(tmp/pids/server.pid`;) T(rails) T(server) T(-d)
ROOT() UTILITY(mkdir) ARGUMENT(Directory)<Directory> ARGUMENT(Directory)<Directory> ARGUMENT(Directory)<Directory>
ROOT() UTILITY(ping) FLAG(-c) ARGUMENT(Quantity)<Quantity> FLAG(-t) ARGUMENT(Timespan)<Timespan> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(d)<Type> UTILITY(paste) FLAG(-s) FLAG(-d) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(.) T(-type) T(f) T(-print) T(|) T(xargs) T(agrep) T(-2) T(-il) T(^Subject:.*unique) T(subject)
ROOT() PIPELINE() UTILITY(ifconfig) UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-v) ARGUMENT(Regex)<Regex> UTILITY(awk) ARGUMENT(Program)<Program> UTILITY(sed) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-atime) ARGUMENT(+Timespan)<Timespan> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(seq) ARGUMENT(Number)<Number> UTILITY(xargs) FLAG(-P) ARGUMENT(Quantity)<Quantity> FLAG(-I) ARGUMENT({})<Regex> UTILITY(echo) ARGUMENT({})<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(!) FLAG(-perm) ARGUMENT(Permission)<Permission>
ROOT() UTILITY(ssh) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(finger) FLAG(-l) UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> FLAG(-f) FLAG(-ctime) ARGUMENT(+Timespan)<Timespan>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(sed) ARGUMENT(Program)<Program> UTILITY(xargs) FLAG(-0) FLAG(-n) ARGUMENT(Quantity)<Quantity> FLAG(-I) ARGUMENT({})<Regex> UTILITY(mv) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(which) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(file) ARGUMENT({})<File>
ROOT(root) T(date) T(-d) T($() T(date) T(+%F)
ROOT() UTILITY(shopt) FLAG(-s) ARGUMENT(cdable_vars)<Option>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-regex) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) FLAG(-L) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type> UNARYLOGICOP(!) FLAG(-group) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(l)<Type> FLAG(-exec::;) UTILITY(file) ARGUMENT({})<File> UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-xdev) FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-exec::;) UTILITY(ls) FLAG(-l) ARGUMENT({})<File>
ROOT() UTILITY(wc) FLAG(-l) ARGUMENT(File)<File>
ROOT() UTILITY(kill) FLAG(-) ARGUMENT(Regex)<Regex> COMMANDSUBSTITUTION() UTILITY(cat) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(-prune) FLAG(-newer) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(echo) FLAG(-e) ARGUMENT(Regex)<Regex> UTILITY(nl)
ROOT(root) T(ls) T(!(*foo))
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-delete)
ROOT(root) T(find) T(.) T(-type) T(f) T(-exec) T(dos2unix) T({}) T(;)
ROOT(root) T(cd) T(/nfs/office/) T(&&) T(find) T(.) T(-name) T(file.txt) T(|) T(sed) T(-r) T(s|(\./([^/]*/)?).*|\1|)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-user) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(chown) FLAG(-R) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) FLAG(-d) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(d)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) FLAG(-r) FLAG(-f) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type> UTILITY(sed) ARGUMENT(Program)<Program> UTILITY(xargs) FLAG(-n) ARGUMENT(Quantity)<Quantity> FLAG(-I) ARGUMENT({})<Regex> UTILITY(mv) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-delete)
ROOT() PIPELINE() UTILITY(df) ARGUMENT(File)<File> UTILITY(tail) FLAG(-) ARGUMENT(Quantity)<Quantity> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(gunzip) ARGUMENT({})<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(-f)<Type> FLAG(-cmin) ARGUMENT(+Quantity)<Quantity> FLAG(-delete)
ROOT(root) T(rsync) T(--list-only) T(--include) T(*2012*.xml) T(-exclude) T(*.xml) T(serveripaddress::pt/dir/files/) T(--port=111) T(>) T(output.txt)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-printf) ARGUMENT('%Tc %p\n')<Format>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-ctime) ARGUMENT(+Timespan)<Timespan>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(-not) FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-user) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT(root) T(find) T(.) T(-type) T(f) NT(<n>) T(-exec) T(sh) T(-c) T(echo) T(first;) T(false) T(;) T(-false) T(-o) T(-exec) T(echo) T(second) T(;)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT(root) T(find) T(.) T(-depth=1) T(-exec) T(mv) T({}) T(/tmp/blah/) T(;)
ROOT() UTILITY(which) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(ls) FLAG(-i) ARGUMENT(File)<File> UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number>
ROOT(root) T(mount) T(|) T(grep) T($(blkid) T(-U) T(09b8f1ab-8d4b-4c5f-b395-40be09c090b0)) T(|) T(grep) T(/media/WD_Disk_1)
ROOT() UTILITY(find) FLAG(-E) ARGUMENT(Path)<Path> FLAG(-iregex) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(mount) UTILITY(grep) FLAG(-q) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(mkdir) FLAG(-p) COMMANDSUBSTITUTION() UTILITY(dirname) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(mkdir) ARGUMENT(Directory)<Directory>
ROOT() UTILITY(pstree) FLAG(-a) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(.) T(-exec) T(command) T({}) T(+)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-exec::;) UTILITY(basename) ARGUMENT({})<Regex> UTILITY(wc) FLAG(-l)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(cat) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(cat) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(sed) ARGUMENT(Program)<Program> FLAG(-i) ARGUMENT(Regex)<File> ARGUMENT({})<File> FLAG(-exec::;) UTILITY(rm) ARGUMENT(File)<File>
ROOT() UTILITY(ls) FLAG(-m)
ROOT() PIPELINE() UTILITY(echo) FLAG(-n) ARGUMENT(Regex)<Regex> UTILITY(md5sum)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UNARYLOGICOP(-not) FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) UNARYLOGICOP(-not) FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
ROOT(root) T(export) T(JAVA_HOME=$(readlink) T(-ze) T(/usr/bin/javac) T(|) T(xargs) T(-0) T(dirname) T(-z) T(|) T(xargs) T(-0) T(dirname))
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-xdev) FLAG(-type) ARGUMENT(f)<Type> FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(gzip) ARGUMENT({})<Regex> FLAG(-exec::;) UTILITY(echo) ARGUMENT({})<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(du) FLAG(-h) FLAG(-s) ARGUMENT(File)<File>
ROOT(root) T(echo) T(-e) T(-n) T(Regex) T(Regex) T($() T(md5sum) T(File)
ROOT() PIPELINE() UTILITY(who) UTILITY(awk) ARGUMENT(Program)<Program> UTILITY(sort) UTILITY(uniq) FLAG(-c) UTILITY(sort) FLAG(-n)
ROOT(root) T(tree) T(--du) T(-h) T(-L) T(2)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-user) ARGUMENT(Regex)<Regex> FLAG(-mtime) ARGUMENT(Timespan)<Timespan>
ROOT() UTILITY(tar) FLAG(-C) ARGUMENT(Directory)<Directory> FLAG(-z) FLAG(-c) FLAG(-v) FLAG(-f) ARGUMENT(File)<File> ARGUMENT(File)<File> ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(mktemp) FLAG(-t) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(rm) FLAG(-r) FLAG(-f) ARGUMENT(File)<File> ARGUMENT(File)<File> ARGUMENT(File)<File> ARGUMENT(File)<File> ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type>
ROOT(root) T(find) T(whatever) T(-print0) T(|) T(xargs) T(-0) T(command)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-not) FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(watch) FLAG(-n) ARGUMENT(Quantity)<Quantity> UTILITY(ls) FLAG(-l)
ROOT(root) T({) T(time) T(sleep) T(1) T(;) T(}) T(2>) T(time.txt)
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(ssh) ARGUMENT(Regex)<Regex>
ROOT(root) T(yum) T(-y) T(groupinstall) T(Development) T(Tools)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT(root) T(find) T(/) T(-name) T(grub.conf) T(2>/dev/null)
"ROOT(root) T(echo) T($() T(date) T(+""%a) T(%x) T(%X"")"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(md5) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(Timespan)<Timespan> FLAG(-daystart)
ROOT() PIPELINE() UTILITY(ifconfig) ARGUMENT(Regex)<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(awk) ARGUMENT(Program)<Program> UTILITY(awk) FLAG(-F) ARGUMENT(Regex)<Regex> ARGUMENT(Program)<Program>
ROOT(root) T(find) T(.) T(-name) T(*.txt) T(-print0) T(|) T(xargs) T(-0) T(-n) T(1) T(process_one)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-regex) ARGUMENT(Regex)<Regex> UTILITY(wc) FLAG(-l)
ROOT(root) T(find) T(-name) T(.git) T(-prune) T(-o) T(-exec) T(git) T(log) T(--pretty=tformat:) T(--numstat) T(--follow) T(--find-copies-harder) T(--reverse) T({}) T(;) T(|) T(cut) T(-f3-) T(|) T(grep) T(.*) T(=>) T(.*)
ROOT() UTILITY(sed) FLAG(-i) ARGUMENT(Program)<Program> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> UTILITY(cpio) FLAG(-p) FLAG(-d) FLAG(-u) FLAG(-m) FLAG(-v) ARGUMENT(Regex)<Regex>
ROOT(root) T(ls) T(-1) T(|) T((for) T(((x=0;x<N;x++))) T(;) T(do) T(read) T(;) T(done) T(;) T(head) T(-n1))
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-printf) ARGUMENT('%h\n')<Format> UTILITY(uniq) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(ls) FLAG(-l) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(pwd) UTILITY(grep) FLAG(-o) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(.) T(-iname) T(*.mov) T(-printf) T(%p) T(%f\n) T(|) T(xargs) T(-r) T(-n2) T(ffmpeg) T(-f) T(flv) T(-i)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::+) UTILITY(zcat) ARGUMENT({})<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(ps) FLAG(-e) FLAG(-f) UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(grep) COMMANDSUBSTITUTION() UTILITY(whoami)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(cpio) FLAG(-p) FLAG(-d) FLAG(-m) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(f)<Type> FLAG(-perm) ARGUMENT(Permission)<Permission>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print) UTILITY(xargs) FLAG(-n) ARGUMENT(Quantity)<Quantity>
ROOT(root) T(cat) T(<() T(grep) T(-v) T(-x) T(-F) T(-f) T(File) T(Regex)
ROOT() UTILITY(mktemp) FLAG(-d) FLAG(--tmpdir) ARGUMENT(Directory)<Directory>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(dig) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT(root)
"ROOT(root) T(find) T(.) T(-type) T(f) T(-printf) T(%p) T(%s\n) T(|) T(perl) T(-n) T(-a) T(-e) T($sum+=$F[1];) T(print) T(""$sum\n"") T(|) T(tail) T(-n) T(1)"
ROOT() UTILITY(ls) COMMANDSUBSTITUTION() UTILITY(pwd)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-exec::+) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() UTILITY(chown) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(join) FLAG(-t) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> ARGUMENT(File)<File> UTILITY(join) FLAG(-t) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> ARGUMENT(File)<File> UTILITY(join) FLAG(-t) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT(root) T(find) T(.) T(-type) T(f) T(-name) T(.*) T(-print0) T(|) T(while) T(IFS=) T(read) T(-r) T(-d) T(f;) T(do) T(basename) T($f;) T(done)
ROOT() UTILITY(pushd) COMMANDSUBSTITUTION() UTILITY(dirname) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-type) ARGUMENT(d)<Type> FLAG(-printf) ARGUMENT('%p:')<Format>
ROOT() PIPELINE() UTILITY(sed) ARGUMENT(Program)<Program> ARGUMENT(File)<File> UTILITY(tee) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-print)
"ROOT() PIPELINE() UTILITY(ps) FLAG(-e) FLAG(-o) ARGUMENT(rss=,args=)<Format> UTILITY(sort) FLAG(-n) FLAG(-r) UTILITY(head)"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
"ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(l)<Type> FLAG(-printf) ARGUMENT(""%p$IFS"")<Format>"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-perm) ARGUMENT(Permission)<Permission>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity>
ROOT(root) T(unset) T(GNUPLOT_DRIVER_DIR)
ROOT() PIPELINE() UTILITY(echo) FLAG(-e) ARGUMENT(Regex)<Regex> UTILITY(awk) FLAG(-v) ARGUMENT(Program)<Program> ARGUMENT(Program)<Program> UTILITY(od) FLAG(-a)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(sed) ARGUMENT(Program)<Program> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(touch) ARGUMENT({})<File>
ROOT() UTILITY(cd) COMMANDSUBSTITUTION() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> UTILITY(sed) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() UTILITY(cd) COMMANDSUBSTITUTION() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(l)<Type> FLAG(-xtype) ARGUMENT(l)<Type>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> UTILITY(sed) ARGUMENT(Program)<Program>
ROOT(root) T(find) T(/tmp/foo) T(-exec) T(/tmp/echoargs) T({}) T(;)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-n) ARGUMENT(Quantity)<Quantity> FLAG(-I) ARGUMENT({})<Regex> UTILITY(md5sum) ARGUMENT({})<File> UTILITY(sort) FLAG(-k) ARGUMENT(Number)<Number> UTILITY(uniq) FLAG(-w) ARGUMENT(Quantity)<Quantity> FLAG(-d) FLAG(--all-repeated) ARGUMENT(separate)<Option> UTILITY(sed) FLAG(-e) ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-print0) UTILITY(sort) FLAG(-z) UTILITY(cpio) FLAG(-p) FLAG(-d) FLAG(-v) FLAG(-0) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT(root) T(find) T(/res/values-en-rUS) T(/res/xml) T(-iname) T(*.xml) T(|) T(while) T(read) T(file;) T(do) T(grep) T(-i) T(hovering_msg) T($file;) T(done)
ROOT(root) T(diff) T(File) T(<() T(sort) T(File)
ROOT() PIPELINE() UTILITY(cal) UTILITY(awk) ARGUMENT(Program)<Program> ARGUMENT(Program)<Program> ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(pstree) FLAG(--show-parents) FLAG(-p) ARGUMENT(Regex)<Regex> UTILITY(head) FLAG(-n) ARGUMENT(Quantity)<Quantity> UTILITY(sed) ARGUMENT(Program)<Program> UTILITY(wc) FLAG(-l)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-atime) ARGUMENT(+Timespan)<Timespan> FLAG(-exec::;) UTILITY(ls)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UNARYLOGICOP(-not) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rename) ARGUMENT(Regex)<Regex> ARGUMENT({})<Regex>
ROOT(root) T(alias) T(no=ls) T(-f)
ROOT(root) T(find) T(.) T(-type) T(f) T(-name) T(*.txt) T(|) T(xargs) T(-I) T({}) T(ksh) T(-c) T(echo) T(deleting) T({};) T(rm) T({})
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-o) ARGUMENT(Regex)<Regex> UTILITY(wc) FLAG(-w)
ROOT() UTILITY(sort) ARGUMENT(File)<File> FLAG(-o) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(sed) FLAG(-r) ARGUMENT(Program)<Program>
ROOT(root) T(cat) T(somefile) T(|) T(splitter) T(16224-16482)
ROOT() UTILITY(date) FLAG(-d) ARGUMENT(Regex)<Regex>
"ROOT() PIPELINE() UTILITY(ps) FLAG(-o) ARGUMENT(uid,pid,cmd)<Format> UTILITY(awk) ARGUMENT(Program)<Program> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(kill) FLAG(-) ARGUMENT(Regex)<Regex> ARGUMENT({})<Regex>"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(-Size)<Size> FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-ls)
ROOT(root) T(host) T(`hostname`) T(|) T(awk) T({print) T($4})
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(sort) FLAG(-V) FLAG(-r) UTILITY(rename) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(echo) FLAG(-e) COMMANDSUBSTITUTION() PIPELINE() UTILITY(echo) FLAG(-n) FLAG(-e) ARGUMENT(Regex)<Regex> UTILITY(wc) FLAG(-m)
ROOT(root) T(find) T(.) T(-name) T(x*) T(-print0) T(|) T(strace) T(xargs) T(-0) T(-I) T({}) T(mv) T({}) T(/tmp/other)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-delete)
ROOT() UTILITY(shopt) FLAG(-s) ARGUMENT(autocd)<Option>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type>
ROOT() UTILITY(mktemp) FLAG(--tmpdir) ARGUMENT(Directory)<Directory>
ROOT() UTILITY(diff) FLAG(-r) FLAG(-q) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT(root) T(source) T(<(./script.sh) T(|) T(sed) T(-rn) T(/volume/{s#/dev/([^[:space:]]+)[[:space:]]+#\1=#;p}))
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(xargs) FLAG(-i) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File> ARGUMENT({})<File>
"ROOT(root) T(find) T(…) T(-exec) T(sh) T(-c) T(trap) T(""echo) T(\$?"") T(EXIT;) T(invalid_command) T(""$0"") T({}) T(;)"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(d)<Type>
ROOT() UTILITY(chown) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(!) FLAG(-path) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT(root) T(find) T(…) T(-print0) T(|) T(xargs) T(-0) T(-n1) T(invalid_command)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(rsync) FLAG(-a) FLAG(--delete) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(env) UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(seq) FLAG(-s) ARGUMENT(Regex)<Regex> ARGUMENT(Number)<Number> UTILITY(tr) FLAG(-d) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() UTILITY(split) FLAG(--lines) ARGUMENT(Quantity)<Quantity> FLAG(--suffix-length) ARGUMENT(Quantity)<Quantity> ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(comm) FLAG(-2) ARGUMENT(File)<File> ARGUMENT(File)<File> UTILITY(awk) FLAG(-F) ARGUMENT(Regex)<Regex> ARGUMENT(Program)<Program>
ROOT() UTILITY(echo) FLAG(-n) COMMANDSUBSTITUTION() UTILITY(pwd)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-path) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) BRACKET() FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(dirname) ARGUMENT({})<Regex> UTILITY(sort) FLAG(-u)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(!) FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(tail) FLAG(-n) ARGUMENT(+Quantity)<Quantity> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-group) ARGUMENT(Regex)<Regex> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT(root) T(unset) T(-v) T(penultimate)
ROOT() PIPELINE() UTILITY(tar) FLAG(-c) FLAG(-f) ARGUMENT(File)<File> ARGUMENT(File)<File> UTILITY(tar) ARGUMENT(-File)<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(md5sum) ARGUMENT({})<File> UTILITY(sort) UTILITY(uniq) FLAG(-D) ARGUMENT(w32)<Option> UTILITY(awk) FLAG(-F) ARGUMENT(Regex)<Regex> ARGUMENT(Program)<Program> UTILITY(sort) FLAG(-f) UTILITY(uniq) FLAG(-D) ARGUMENT(i)<Option>
"ROOT(root) T(bind) T(-P) T(|) T(grep) T(--fixed-strings) T(can) T(be) T(found) T(on) T(|) T(perl) T(-pe) T(s/((?<!\\)(?:\\\\)*)\\C/\1Ctrl/g;s/((?<!\\)(?:\\\\)*)\\e/\1Esc,/g)"
ROOT() UTILITY(shopt) FLAG(-u) ARGUMENT(nocasematch)<Option>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-ls) UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> ARGUMENT(File)<File> UTILITY(crontab)
ROOT(root) T(yum) T(-y) T(install) T(mono-devel)
ROOT() UTILITY(gzip) FLAG(-k) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(~/junk) T(-name) T(cart[1-6]) T(-exec) T(ls) T(-l) T({}) T(;) T(2>) T(/dev/null)
ROOT() UTILITY(ln) ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(date) ARGUMENT(+%Y:%m:%d)<Format> FLAG(-d) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(rev) UTILITY(cut) FLAG(-c) ARGUMENT(Number)<Number> UTILITY(rev)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(!) FLAG(-user) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(chown) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(history) FLAG(-s) ARGUMENT(Quantity)<Quantity>
ROOT() PIPELINE() UTILITY(top) FLAG(-b) FLAG(-n) ARGUMENT(Quantity)<Quantity> UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(-Permission)<Permission>
ROOT(root) T(ps) T(-u) T($(whoami)) T(--no-header) T(-o) T(vsz) T(|) T(dc) T(-f) T(-) T(-e) T([+z1<r]srz1<rp)
ROOT() PIPELINE() UTILITY(ifconfig) UTILITY(grep) FLAG(-i) ARGUMENT(Regex)<Regex> UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number>
ROOT() UTILITY(man) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(curl) ARGUMENT(Regex)<Regex>
ROOT(root) T(nohup) T(java) T(-jar) T(program.jar) T(&)
ROOT(root) T(find) T(.) T(-type) T(f) T(-print0) T(|) T(xargs) T(-0) T(stat) T(-f) T(%m) T(%N) T(|) T(sort) T(-rn) T(|) T(head) T(-1) T(|) T(cut) T(-f2-) T(-d)
"ROOT(root) T(find) T(temp/large/*) T(-maxdepth) T(2) T(-iname) T(*.jpg) T(-print0) T(|) T(xargs) T(-0) T(mogrify) T(-resize) T(800x800>) T(-quality) T(85) T(-compress) T(JPEG) T(-monitor) T(-strip) T(-gravity) T(SouthEast) T(-draw) T(text) T(10,10) T(""www.kmstools.com"")"
ROOT() UTILITY(cat) COMMANDSUBSTITUTION() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-path) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-print)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-and) FLAG(-perm) ARGUMENT(-Permission)<Permission> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) FLAG(-r) FLAG(-f) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(awk) ARGUMENT(Program)<Program> ARGUMENT({})<Program>
ROOT() UTILITY(ssh) FLAG(-v) FLAG(-Y) ARGUMENT(Regex)<Regex> FLAG(-p) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(sort) FLAG(-u) UTILITY(nl)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> FLAG(-f) FLAG(-mtime) ARGUMENT(+Timespan)<Timespan>
ROOT(root) T(time) T(find) T(/usr/src) T(-name) T(*.html) T(-exec) T(grep) T(-H) T(foo) T({}) T(;) T(|) T(wc) T(-l)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rename) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(ssh) FLAG(-i) ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-E) FLAG(-o) ARGUMENT(Regex)<Regex> UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number>
ROOT(root) T(screen) T(-list) T(|) T(grep) T(-q) T(myscreen)
ROOT() UTILITY(chown) FLAG(-R) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT() UTILITY(read) FLAG(-p) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(paste) FLAG(-s) FLAG(-d) ARGUMENT(File)<Regex>
"ROOT(root) T(find) T(/path/to/dir) T(-type) T(f) T(|) T(perl) T(-ne) T(chomp(@files) T(=) T(<>);) T(my) T($p) T(=) T(9;) T(foreach) T(my) T($f) T((sort) T({) T((stat($a))[$p]) T(<=>) T((stat($b))[$p]) T(}) T(@files)) T({) T(print) T(scalar) T(localtime((stat($f))[$p]),) T(""\t"",) T($f,) T(""\n"") T(}) T(|) T(tail)"
ROOT(root) T(for) T(a) T(in) T(`find) T(.) T(-name) T(*.py`) T(;) T(do) T(cp) T($a) T($a.cp) T(;) T(echo) T(Added) T(line) T(>) T($a) T(;) T(cat) T($a.cp) T(>>) T($a) T(;) T(rm) T($a.cp) T(;) T(done)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-fstype) ARGUMENT(nfs)<Type> FLAG(-print)
ROOT() PIPELINE() UTILITY(history) UTILITY(tail) FLAG(-n) ARGUMENT(Quantity)<Quantity>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mount) FLAG(-type) ARGUMENT(d)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-n) ARGUMENT(Quantity)<Quantity> UTILITY(sort) FLAG(-n)
ROOT() UTILITY(ln) FLAG(-s) FLAG(-f) ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(Permission)<Permission>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(grep) FLAG(-l) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(gzip) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(rev) UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number> UTILITY(rev)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::+) UTILITY(tar) FLAG(-u) FLAG(-f) ARGUMENT(File)<File> ARGUMENT({})<File>
ROOT() UTILITY(rsync) FLAG(-z) FLAG(-v) FLAG(-r) FLAG(--exclude) ARGUMENT(Regex)<Regex> FLAG(--include) ARGUMENT(Regex)<Regex> FLAG(--include) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT(root) T(top) T(-b) T(-n) T(1) T(|) T(mail) T(-s) T(any) T(subject) T(your_email@domain.com)
ROOT() PIPELINE() UTILITY(env) UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-o) FLAG(-e) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan> UTILITY(head)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(ls) FLAG(-l) FLAG(-d) ARGUMENT({})<File>
ROOT() UTILITY(split) FLAG(-b) ARGUMENT(Size)<Size> ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT(root) T(screen) T(-dmS) T(title) T(executable)
ROOT() PIPELINE() UTILITY(ping) ARGUMENT(Regex)<Regex> UTILITY(awk) FLAG(-f) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UTILITY(grep) FLAG(-P) ARGUMENT(Regex)<Regex> UTILITY(sed) FLAG(-r) FLAG(-e) ARGUMENT(Program)<Program> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(ls) FLAG(-l) ARGUMENT({})<File>
"ROOT(root) T(files) T(=) T(`find) T(""$dirs"") T(-type) T(f) T(|&) T(grep) T(-v) T('^find:) T('`)"
"ROOT() UTILITY(join) FLAG(-t) ARGUMENT(Regex)<Regex> FLAG(-o) ARGUMENT(1.2,2.2,2.3)<Format> FLAG(-a) ARGUMENT(Quantity)<Quantity> FLAG(-a) ARGUMENT(Quantity)<Quantity> FLAG(-e) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> PROCESSSUBSTITUTION(<) UTILITY(sort) ARGUMENT(File)<File>"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(cp) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT(root) T(comm) T(-1) T(-2) T(<() T(ls) T(File)
ROOT(root) T(su) T(-) T(jetty) T(sh) T(./runprogram.sh)
ROOT() UTILITY(env) FLAG(-i) ARGUMENT(Program)<Program> ARGUMENT(Program)<Program>
ROOT(root) T(find) T(/) T(-iname) T(*.mp3) T(-type) T(f) T(-print0) T(|) T(xargs) T(-0) T(-I) T({}) T(/usr/bin/rsync) T(-avR) T({}) T(/mnt/mp3/)
ROOT(root) T(shopt) T(-s) T(extglob) T(find) T(!(D)) T(-name) T(hi.dat)
ROOT(root) T(find) T(/) T(-type) T(l) T(-print) T(|) T(perl) T(-nle) T(-e) T(||) T(print;)
ROOT(root) T(find) T(/) T(-name) T(*.dbf) T(-print0) T(2>/dev/null) T(|) T(xargs) T(-0) T(-n1) T(dirname) T(|) T(sort) T(|) T(uniq)
ROOT() UTILITY(tar) FLAG(-x) FLAG(-v) FLAG(-f) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> UNARYLOGICOP(!) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(ln) FLAG(-s) ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-nouser)
ROOT() PIPELINE() UTILITY(history) UTILITY(awk) ARGUMENT(Program)<Program> UTILITY(awk) ARGUMENT(Program)<Program> UTILITY(sort) UTILITY(uniq) FLAG(-c) UTILITY(sort) FLAG(-n) FLAG(-r) UTILITY(head)
ROOT() UTILITY(rsync) FLAG(-a) FLAG(-v) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(ifconfig) UTILITY(grep) FLAG(-A) ARGUMENT(Quantity)<Quantity> ARGUMENT(Regex)<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(sed) FLAG(-r) ARGUMENT(Program)<Program> UTILITY(head) FLAG(-) ARGUMENT(Quantity)<Quantity>
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(od) FLAG(-t) ARGUMENT(x1)<Type> FLAG(-w) ARGUMENT(Size)<Size>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(!) FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-perm) ARGUMENT(-Permission)<Permission> UTILITY(sed) ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(dig) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT(localdomain.com)<Type> UTILITY(grep) FLAG(-i) ARGUMENT(Regex)<Regex> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-newer) ARGUMENT(File)<File> UNARYLOGICOP(-not) FLAG(-newer) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(ls) FLAG(-1) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(readlink) FLAG(-f) ARGUMENT({})<File>
ROOT() UTILITY(df) FLAG(-i)
ROOT(root) T(find) T(/mnt/hda1/zdjecia/test1/) T(-type) T(f) T(-iname) T(‘*.jpg’) T(-printf) T(‘%’h’'”0″) T(|) T(xargs) T(-0) T(-I) T(‘{}’) T(mkdir) T(-p) T(/mnt/hda1/test/{}) T(;)
ROOT(root) T(cd) T($()
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
ROOT(root) T(export) T(MYPROGRAMNAME_KERNEL_VERSION=$(uname) T(-r))
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-user) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(tr) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) FLAG(-f) ARGUMENT({})<File>
ROOT() UTILITY(cd) COMMANDSUBSTITUTION() UTILITY(dirname) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(head) FLAG(-) ARGUMENT(Quantity)<Quantity> ARGUMENT(File)<File> UTILITY(tail) FLAG(-) ARGUMENT(Quantity)<Quantity> UTILITY(tr) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT(root) T(zcat) T($(cat) T(list.txt)) T(|) T(./a.out)
ROOT(root) T(comm) T(-1) T(-2) T(<() T(echo) T(Regex) T(|) T(awk) T(-F) T(Regex) T(Program)
ROOT() UTILITY(wc) FLAG(-l) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(md5sum)
ROOT() UTILITY(mkdir) FLAG(-p) COMMANDSUBSTITUTION() UTILITY(dirname) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-exec::;) UTILITY(rm) FLAG(-f) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(zcat) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-o) ARGUMENT(Regex)<Regex> UTILITY(sed) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(Permission)<Permission>
ROOT(root) T(paste) T(<() T(paste) T(-d) T(Regex) T(File) T(File)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-regextype) ARGUMENT(posix-extended)<Type> FLAG(-regex) ARGUMENT(Regex)<Regex> FLAG(-fprint) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-size) ARGUMENT(Size)<Size> FLAG(-exec::;) UTILITY(ls) FLAG(-l) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(ifconfig) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-o) FLAG(-E) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(cd) ARGUMENT(Directory)<Directory>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(mv) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-regex) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT(root) T(find) T(/some/parrent/dir) T(-type) T(d) T(|) T(while) T(read) T(d) T(;) T(do) T(ls) T($d/*) T(&>/dev/null) T(||) T(rm) T(-r) T($d;) T(done)
ROOT() PIPELINE() UTILITY(history) UTILITY(tail)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iregex) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(ifconfig) ARGUMENT(Regex)<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number> UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number>
"ROOT() UTILITY(date) ARGUMENT(""+%Y-%m-%d"")<Format>"
ROOT() UTILITY(echo) COMMANDSUBSTITUTION() UTILITY(pwd)
ROOT() UTILITY(sed) FLAG(-f) ARGUMENT(File)<File> ARGUMENT(Program)<Program>
ROOT(root) T(yum) T(-y) T(groupinstall) T(MYSQL) T(Database) T(Client)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan> UNARYLOGICOP(!) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-printf) ARGUMENT('%f\n')<Format>
ROOT(root) T(yes) T(|) T(tr) T(\n) T(x) T(|) T(head) T(-c) T($((1024*1024*1024))) T(|) T(pv) T(-L) T($((1024*1024))) T(|) T(grep) T(n)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-n) ARGUMENT(Quantity)<Quantity> FLAG(-I) ARGUMENT({})<Regex> UTILITY(dirname) ARGUMENT({})<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(mv) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT() UTILITY(tail) FLAG(-n) ARGUMENT(+Quantity)<Quantity> ARGUMENT(File)<File> ARGUMENT(File)<File> ARGUMENT(File)<File>
"ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-printf) ARGUMENT(""%s\t%p\n"")<Format> UTILITY(sort) FLAG(-n) UTILITY(tail) FLAG(-) ARGUMENT(Quantity)<Quantity>"
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(ls) FLAG(-l) FLAG(-S) FLAG(-h) ARGUMENT({})<File>
"ROOT(root) T(find) T($dir) T(-not) NT(<n>) T(-path) T($dir/prune_me) T(-prune) T(-exec) T(bash) T(-c) T(echo) T(""$0"") T({}) T(;)"
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan> UTILITY(wc) FLAG(-l)
ROOT(root) T(getent) T(`uname) T(-n`)
ROOT(root) T(join) T(-1) T(Regex) T(-2) T(Regex) T(-a) T(Quantity) T(<() T(cat) T(-n) T(File) T(|) T(sort) T(-k) T(Number)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-L) ARGUMENT(Quantity)<Quantity> FLAG(-I) ARGUMENT({})<Regex> UTILITY(wc) FLAG(-l) ARGUMENT({})<File>
ROOT(root) T(find) T(.) T(-type) T(f) T(-name) T(*.html) T(>) T(html_files.txt)
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(sed) FLAG(-e) ARGUMENT(Program)<Program> UTILITY(column) FLAG(-s) ARGUMENT(Regex)<Regex> FLAG(-t) UTILITY(less) ARGUMENT(File)<File> FLAG(-N) FLAG(-S)
ROOT() UTILITY(rm) FLAG(-f) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(-not) BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(file) FLAG(-I) FLAG(-n) ARGUMENT({})<File> UTILITY(grep) FLAG(-v) ARGUMENT(Regex)<Regex> UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number> UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(sed) FLAG(-i) ARGUMENT(Program)<Program> ARGUMENT(File)<File> ARGUMENT(File)<File> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-n) ARGUMENT(Quantity)<Quantity> FLAG(-P) ARGUMENT(Quantity)<Quantity> FLAG(-I) ARGUMENT({})<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-print) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(chgrp) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT(root) T(tac) T(a.txt) T(>) T(b.txt)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type>
ROOT() PIPELINE() UTILITY(printf) ARGUMENT(foobar\n\377)<Format> UTILITY(tr) FLAG(-d) ARGUMENT(\0-\176)<Regex> UTILITY(od) FLAG(-t) ARGUMENT(c)<Type>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-exec::+) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(sed) FLAG(-i) ARGUMENT(Program)<Program> ARGUMENT(File)<File>
ROOT(root) T(find) T(/path/to/search) T(-type) T(l) T(-exec) T(test) T(!) T(-e) T({}) T(;) T(-print)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-size) ARGUMENT(+Size)<Size> UTILITY(xargs) FLAG(-r) FLAG(-I) ARGUMENT({})<Regex> UTILITY(cp) FLAG(-t) ARGUMENT(Directory)<Directory> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-exec::;) UTILITY(chgrp) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-exec::+) UTILITY(ls) FLAG(-l) FLAG(-S) ARGUMENT({})<File> UTILITY(head) FLAG(-) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(basename) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-i) FLAG(-H) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-daystart) FLAG(-mtime) ARGUMENT(+Timespan)<Timespan>
ROOT() PIPELINE() UTILITY(sed) ARGUMENT(Program)<Program> ARGUMENT(File)<File> UTILITY(less)
ROOT(root) T(find) T(-maxdepth) T(2) T(-type) T(d) T(-ls) T(>dirlist)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(grep) FLAG(-l) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) FLAG(-r) FLAG(-f) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-execdir::;) UTILITY(cp) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-group) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(history) UTILITY(head) FLAG(-n) ARGUMENT(Quantity)<Quantity> UTILITY(tail) FLAG(-n) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(split) FLAG(-n) ARGUMENT(Quantity)<Quantity> ARGUMENT(File)<File>
ROOT() UTILITY(rsync) FLAG(-a) FLAG(-v) FLAG(--progress) FLAG(--exclude) ARGUMENT(Regex)<Regex> FLAG(--exclude) ARGUMENT(Regex)<Regex> FLAG(--exclude) ARGUMENT(Regex)<Regex> FLAG(--exclude) ARGUMENT(Regex)<Regex> FLAG(--exclude) ARGUMENT(Regex)<Regex> FLAG(--exclude) ARGUMENT(Regex)<Regex> FLAG(--exclude) ARGUMENT(Regex)<Regex> FLAG(--exclude) ARGUMENT(Regex)<Regex> FLAG(--exclude) ARGUMENT(Regex)<Regex> FLAG(--exclude) ARGUMENT(Regex)<Regex> FLAG(--exclude) ARGUMENT(Regex)<Regex> FLAG(--exclude) ARGUMENT(Regex)<Regex> FLAG(--exclude) ARGUMENT(Regex)<Regex> FLAG(--exclude) ARGUMENT(Regex)<Regex> FLAG(--exclude) ARGUMENT(Regex)<Regex> FLAG(--exclude) ARGUMENT(Regex)<Regex> FLAG(--exclude) ARGUMENT(Regex)<Regex> FLAG(--exclude) ARGUMENT(Regex)<Regex> FLAG(--exclude) ARGUMENT(Regex)<Regex> FLAG(--exclude) ARGUMENT(Regex)<Regex> FLAG(--exclude) ARGUMENT(Regex)<Regex> FLAG(--exclude) ARGUMENT(Regex)<Regex> FLAG(--exclude) ARGUMENT(Regex)<Regex> FLAG(--exclude) ARGUMENT(Regex)<Regex> FLAG(--exclude) ARGUMENT(Regex)<Regex> FLAG(--exclude) ARGUMENT(Regex)<Regex> FLAG(--exclude) ARGUMENT(Regex)<Regex> FLAG(--exclude) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mmin) ARGUMENT(Quantity)<Quantity> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-r) FLAG(-I) ARGUMENT({})<Regex> UTILITY(ls) FLAG(-l) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::+) UTILITY(grep) FLAG(-H) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT(root) T(find) T(/stuff/*) T(-type) T(d) T(-maxdepth) T(1) T(-print0) T(|) T(xargs) T(-0) T(script.py)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(+Size)<Size>
ROOT() UTILITY(shopt) ARGUMENT(dotglob)<Option>
ROOT() UTILITY(chmod) FLAG(--reference) ARGUMENT(File)<File> ARGUMENT(Permission)<Permission>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-o) ARGUMENT(Regex)<Regex> UTILITY(sort) UTILITY(uniq) FLAG(-c) UTILITY(sort) FLAG(-n) FLAG(-r)
ROOT() UTILITY(read) FLAG(-p) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-ls)
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(ping) FLAG(-c) ARGUMENT(Quantity)<Quantity> ARGUMENT({})<Regex>
ROOT(root) T(find) T(/home/www/) T(-type) T(f|xargs) T(perl) T(-pi) T(-e) T(s/subdomainA\.example\.com/subdomainB.example.com/g)
ROOT() UTILITY(read) FLAG(-r) FLAG(-e) FLAG(-p) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(head) FLAG(-n) ARGUMENT(Quantity)<Quantity> ARGUMENT(File)<File>
ROOT(root) T(find) T(.) T(-iname) T(*.mov) T(-exec) T(ffmpeg) T(-i) T(%p) T(-f) T(flv) T(%f) T(;)
ROOT() UTILITY(set) FLAG(-o) ARGUMENT(pipefail)<Option>
ROOT() PIPELINE() UTILITY(join) ARGUMENT(File)<File> ARGUMENT(File)<File> UTILITY(column) FLAG(-t)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(cat) ARGUMENT({})<File> UTILITY(wc) FLAG(-l)
ROOT() UTILITY(cp) FLAG(-f) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-path) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-path) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-path) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-path) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(.) T(-type) T(f) T(-daystart) T(-mtime) T($date_dif) T(-exec) T(copy_it.sh) T($verbose) T(-s) T({}) T(-t) T($to_dir) T(;)
ROOT() PIPELINE() UTILITY(awk) ARGUMENT(Program)<Program> ARGUMENT(Program)<Program> UTILITY(split) FLAG(-d) FLAG(-a) ARGUMENT(Quantity)<Quantity> FLAG(-l) ARGUMENT(Quantity)<Quantity> ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT(root) T(paste) T(-sd+) T(infile) T(|) T(bc)
ROOT() UTILITY(mkdir) FLAG(-p) ARGUMENT(Directory)<Directory>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> UTILITY(less)
ROOT(root) T(find) T(.) T(-regex) T(xxx-xxx_[a-zA-Z]+_[0-9]+_[0-9]+\.jpg$) T(-exec) T(./rename.sh) T({}) T(;)
ROOT(root) T(ls) T(-d) T(File) T(|) T(xargs) T(-i) T(Regex) T(-I) T({}) T(cp) T(File) T(File) T({})
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> BINARYLOGICOP(-and) FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) FLAG(-r) FLAG(-f) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-print) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT(root) T(ABSOLUTE_PATH=$(cd) T($(dirname) T(${BASH_SOURCE[0]})) T(&&) T(pwd)/$(basename) T(${BASH_SOURCE[0]}))
ROOT() UTILITY(ssh) ARGUMENT(Regex)<Regex> FLAG(-X)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-user) ARGUMENT(Regex)<Regex> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-daystart) FLAG(-mtime) ARGUMENT(-Timespan)<Timespan>
ROOT(root) T(find) T(~/lpi103-2/) T(-depth) T(-print0) T(|) T(cpio) T(--null) T(-o) T(>) T(../lpicpio.2)
ROOT(root) T(find) T(-name) T(*.txt) T(2>>/dev/null)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mmin) ARGUMENT(+Quantity)<Quantity> FLAG(-mmin) ARGUMENT(-Quantity)<Quantity>
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> ARGUMENT(File)<File> UTILITY(sort) FLAG(-u)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT(root) T(alias) T(-g) T(vv=$(date))
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan> FLAG(-print)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(du) FLAG(-s) ARGUMENT({})<File> UTILITY(sort) FLAG(-r) FLAG(-k) ARGUMENT(Number)<Number> UTILITY(head)
ROOT() PIPELINE() UTILITY(tar) FLAG(-x) FLAG(-O) FLAG(-f) ARGUMENT(File)<File> ARGUMENT(File)<File> UTILITY(zless)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-print) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT(root) T(find) T(MyApp.app) T(-name) T(Headers) T(-type) T(d) T(-exec) T(rm) T(-rf) T({}) T(;) T(||) T(true)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> UTILITY(sed) FLAG(-e) ARGUMENT(Program)<Program> FLAG(-e) ARGUMENT(Program)<Program> UTILITY(grep) FLAG(-v) ARGUMENT(Regex)<Regex> UTILITY(awk) ARGUMENT(Program)<Program> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(chgrp) ARGUMENT({})<Regex>
ROOT(root) T(ssh) T(-X) T(-Y) T(-t) T(Regex) T(ssh) T(-X) T(-Y) T(-t) T(Regex)
ROOT(root) T(bash) T(-c) T(test) T(-h) T(/proc/4129/ns/pid) T(&&) T(test) T('$(readlink) T(/proc/4129/ns/pid)') T(!=) T('$(readlink) T(/proc/1/ns/pid)')
ROOT() UTILITY(who) FLAG(-l) FLAG(-a)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(--help)
ROOT(root) T(source) T($(ruby) T(genrc.rb))
ROOT(root) T(alias) T(mkcd=_(){) T(mkdir) T(-pv) T($1;) T(cd) T($1;) T(};) T(_)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(mount) FLAG(-t) ARGUMENT(cpuset)<Option> ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT(root) T(find) T(backup/) T(-type) T(d) T(-print0) T(|) T(xargs) T(-0) T(tar) T(cf) T(directory-structure.tar) T(--no-recursion)
ROOT(root) T(yum) T(search) T(zsh)
ROOT() UTILITY(read) FLAG(-u) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(yes) UTILITY(head) FLAG(-n) ARGUMENT(Quantity)<Quantity> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(ln) FLAG(-s) FLAG(-f) ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(zcat) T(doc.gz) T(|) T(split) T(-l) T(1000) T(--filter=gzip) T(>) T($FILE.gz)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(diff) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT(root) T(screen) T(-X) T(title) T(new) T(title)
ROOT() UTILITY(mv) ARGUMENT(File)<File> ARGUMENT(File)<File>
"ROOT(root) T(find) T(../../$name-module) T(-name) T(Name*) T(-type) T(f) T(-exec) T(bash) T(-c) T(mv) T(""$1"") T(""${1/Name/$Name}"") T(--) T({}) T(;)"
ROOT(root) T(locate) T(labra) T(|) T(xargs) T(-I{}) T(scp) T({}) T(masi@11.11.11.11:~/Desktop/)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-group) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(chown) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(rm) FLAG(-d) ARGUMENT(File)<File>
ROOT(root) T(someCommand) T(2>&1) T(|) T(tee) T(someFile)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(mktemp) COMMANDSUBSTITUTION() UTILITY(pwd)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-size) ARGUMENT(+Size)<Size>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> UTILITY(head)
ROOT() UTILITY(chown) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-group) ARGUMENT(Regex)<Regex> FLAG(-perm) ARGUMENT(-Permission)<Permission> FLAG(-print)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(sort)
ROOT() UTILITY(clear)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
"ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-printf) ARGUMENT(""%y %i %prn"")<Format>"
ROOT() PIPELINE() UTILITY(seq) FLAG(-f) ARGUMENT('some line %g')<Format> ARGUMENT(Number)<Number> UTILITY(nl) UTILITY(sort) FLAG(-R) UTILITY(cut) FLAG(-f) ARGUMENT(Number)<Number> UTILITY(head) FLAG(-) ARGUMENT(Quantity)<Quantity>
ROOT() PIPELINE() UTILITY(history) UTILITY(less)
ROOT() UTILITY(source) ARGUMENT(File)<File>
ROOT(root) T(ldd) T($(which) T(YOURAPPNAME))
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::+) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT(root) T(find) T(backup/) T(-type) T(d) T(|) T(xargs) T(tar) T(cf) T(directory-structure.tar) T(--no-recursion)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(cpio) FLAG(-p) FLAG(-d) ARGUMENT(Regex)<Regex>
"ROOT(root) T(top) T(-p) T($(pgrep) T(-d) T(',') T(java))"
ROOT() PIPELINE() UTILITY(env) UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT(root) T(host) T($(uname) T(-n)) T(|) T(grep) T(address) T(|) T(grep) T(-v) T(IPv6) T(|) T(head) T(-n) T(1) T(|) T(awk) T({print) T($4})
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(chown) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-newermt) ARGUMENT(Regex)<Regex> UNARYLOGICOP(!) FLAG(-newermt) ARGUMENT(Regex)<Regex> FLAG(-ls)
"ROOT() UTILITY(ssh) FLAG(-M) FLAG(-f) FLAG(-N) FLAG(-o) ARGUMENT(ControlPath=""$SSHSOCKET"")<Option> ARGUMENT(Regex)<Regex>"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-group) ARGUMENT(Regex)<Regex> FLAG(-print) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(chgrp) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-print) FLAG(-exec::;) UTILITY(touch) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-group) ARGUMENT(Regex)<Regex> FLAG(-exec::+) UTILITY(chgrp) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT(root) T(myprogram|more)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(Size)<Size> ARGUMENT(Path)<Path>
ROOT(root) T(find) T(.) T(-name) T(.git) T(-type) T(d) T(|) T(sed) T(s/\/.git//) T(|) T(xargs) T(-P10) T(-I{}) T(git) T(-C) T({}) T(pull)
ROOT() PIPELINE() UTILITY(zcat) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-atime) ARGUMENT(-Timespan)<Timespan>
ROOT() UTILITY(cd) ARGUMENT(Directory)<Directory>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(Size)<Size> FLAG(-print)
ROOT(root) T(alias) T(go=GOPATH=$(infer-gopath.sh)) T(go)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-inum) ARGUMENT(Quantity)<Quantity> FLAG(-exec::;) UTILITY(mv) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT(root) T(brew) T(unlink) T(bash-completion)
"ROOT() UTILITY(mv) ARGUMENT(File)<File> COMMANDSUBSTITUTION() UTILITY(date) FLAG(-d) ARGUMENT(Regex)<Regex> ARGUMENT(+""%Y%m%d%H%M"")<Format>"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-ls)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type> FLAG(-empty)
"ROOT(root) T(ifconfig) T(`ip) T(route) T(|) T(grep) T(default) T(|) T(head) T(-1) T(|) T(sed) T(s/\(.*dev) T(\)\([a-z0-9]*\)\(.*\)/\2/g`) T(|) T(grep) T(-oE) T(\b([0-9]{1,3}\.){3}[0-9]{1,3}\b) T(|) T(head) T(-1)"
ROOT() PIPELINE() UTILITY(grep) FLAG(--help) UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(ln) FLAG(-s) ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print)
ROOT() UTILITY(mv) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT(root) T(find) T(/volume1/photo/ipcam) T(-maxdepth) T(1) T(-type) T(d) T(-name) T(????-??-??) T(-mtime) T(+0) T(-exec) T(sh) T(-c) T(echo) T(/home/pi/Dropbox-Uploader/dropbox_uploader.sh) T(move) T(/ipcam/$(basename) T({})) T(/ipcam/archive) T(;)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::+) UTILITY(cat) OPERATOR(--) ARGUMENT({})<File> UTILITY(wc) FLAG(-l)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-print0) UTILITY(sed) FLAG(-e) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-newermt) ARGUMENT(Regex)<Regex> UNARYLOGICOP(!) FLAG(-newermt) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(ls) FLAG(-l) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-nouser) FLAG(-exec::+) UTILITY(rm) ARGUMENT({})<File>
ROOT(root) T(for) T(f) T(in) T(*;) T(do) T([[) T(-f) T($f) T(]]) T(&&) T(mv) T($f) T(unix_$f;) T(done)
ROOT() PIPELINE() UTILITY(df) FLAG(--total) FLAG(-B) ARGUMENT(Size)<Size> UTILITY(tail) FLAG(-n) ARGUMENT(Quantity)<Quantity> UTILITY(sed) ARGUMENT(Program)<Program> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type> FLAG(-exec::;) UTILITY(basename) ARGUMENT({})<Regex>
ROOT() UTILITY(chown) FLAG(-R) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> UTILITY(grep) FLAG(-E) FLAG(-v) ARGUMENT(Regex)<Regex> UTILITY(vim) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-empty) FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(mount) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> FLAG(-o) ARGUMENT(loop)<Option>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-depth) FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-print0) UTILITY(cpio) FLAG(-0) FLAG(-p) FLAG(-d) FLAG(-v) FLAG(--quiet) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(bzip2) FLAG(-z) FLAG(-k) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-empty) FLAG(-exec::;) UTILITY(echo) ARGUMENT({})<Regex> ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(mv) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan> FLAG(-exec::;) UTILITY(gzip) FLAG(-9) FLAG(-f) ARGUMENT({})<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(f)<Type> FLAG(-printf) ARGUMENT('%f\000')<Format>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> UTILITY(xargs) FLAG(-r) FLAG(-t) FLAG(-I) ARGUMENT({})<Regex> UTILITY(sed) FLAG(-i) ARGUMENT(Program)<Program> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-nogroup)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(-Permission)<Permission>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(ln) FLAG(-s) ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(Path) T($() T(pwd)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-atime) ARGUMENT(-Timespan)<Timespan>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-perm) ARGUMENT(Permission)<Permission> FLAG(-print) FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-v) ARGUMENT(Regex)<Regex> UTILITY(wc) FLAG(-l) UTILITY(grep) FLAG(-o) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(.) T(2>/dev/null) T(>) T(files_and_folders)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(-not) FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-ctime) ARGUMENT(-Timespan)<Timespan> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(bzip2) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UNARYLOGICOP(!) FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(!) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(Timespan)<Timespan>
ROOT() PIPELINE() UTILITY(ls) UTILITY(sed) ARGUMENT(Program)<Program> UTILITY(tr) FLAG(-d) ARGUMENT(Regex)<Regex>
ROOT(root) T(cd) T(/var/cron/tabs) T(&&) T(grep) T(-vH) T(^#) T(*)
ROOT() UTILITY(du) FLAG(-s) FLAG(-h) ARGUMENT(File)<File>
ROOT(root) T(find) T(.) T(-name) T(*.java) T(-print0) T(|) T(xargs) T(-0) T(-J) T(%) T(cp) T(%) T(destinationFolder)
ROOT() PIPELINE() UTILITY(printf) ARGUMENT(...)<Format> UTILITY(fold) FLAG(-w) ARGUMENT(80)<Quantity>
ROOT() UTILITY(bg) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(Path) T(-type) T(f) T(-name) T(Regex) T(-exec) T(mv) T({}) T($() T(basename) T({}) T(Regex)
ROOT() UTILITY(tree) ARGUMENT(Directory)<Directory>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(history) FLAG(-w)
ROOT() PIPELINE() UTILITY(sort) ARGUMENT(File)<File> UTILITY(uniq) FLAG(-c) UTILITY(sort) FLAG(-b) FLAG(-g) FLAG(-r)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-print)
ROOT() PIPELINE() UTILITY(ls) UTILITY(xargs) FLAG(-n) ARGUMENT(Quantity)<Quantity> FLAG(-I) ARGUMENT({})<Regex> UTILITY(cp) FLAG(-i) ARGUMENT(File)<File> ARGUMENT({})<File>
ROOT() UTILITY(tail) FLAG(-n) ARGUMENT(+Quantity)<Quantity> ARGUMENT(File)<File>
ROOT() UTILITY(split) FLAG(-l) ARGUMENT(Quantity)<Quantity> ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-printf) ARGUMENT('%k %p\n')<Format> UTILITY(sort) FLAG(-n) UTILITY(tail) FLAG(-n) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(cp) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-version)
"ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-printf) ARGUMENT(""\n%AD %AT %p"")<Format> UTILITY(head) FLAG(-n) ARGUMENT(Quantity)<Quantity> UTILITY(sort) FLAG(-k) ARGUMENT(Number)<Number> FLAG(-k) ARGUMENT(Number)<Number> FLAG(-k) ARGUMENT(Number)<Number>"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(kill) FLAG(-) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(read) FLAG(-e) FLAG(-p) ARGUMENT(Regex)<Regex> FLAG(-i) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) UTILITY(sort)
ROOT() PIPELINE() UTILITY(yes) ARGUMENT(Regex)<Regex> UTILITY(head) FLAG(-) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-cmin) ARGUMENT(-Quantity)<Quantity>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(rm) FLAG(-r) ARGUMENT(File)<File> ARGUMENT(File)<File> ARGUMENT(File)<File> ARGUMENT(File)<File> ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> FLAG(-f) FLAG(-ctime) ARGUMENT(Timespan)<Timespan>
ROOT() UTILITY(mv) FLAG(-n) FLAG(-v) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-newer) ARGUMENT(File)<File>
ROOT(root) T(tar) T(-czf) T(backup.tar.gz) T(--exclude=PATTERN1) T(--exclude=PATTERN2) T(...) T(/path/to/backup)
ROOT() PIPELINE() UTILITY(watch) UTILITY(tail) ARGUMENT(file)<File> UTILITY(grep) ARGUMENT(pattern)<Regex>
ROOT() UTILITY(file) COMMANDSUBSTITUTION() UTILITY(which) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(.) NT(<n>) T(-size) T(100) T(-o) T(-size) T(-100) T(-name) T(*.html) T(-exec) T(ls) T(-l) T({}) T(;) T(2>) T(/dev/null)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity>
"ROOT(root) T(find) T(.) T(-type) T(f) T(-name) T(*.txt) T(-exec) T(sh) T(-c) T(for) T(i;do) T(sed) T(s/[[:space:]]*$//) T(""$i"">/tmp/.$$) T(&&) T(mv) T(/tmp/.$$) T(""$i"";done) T(arg0) T({}) T(+)"
ROOT() UTILITY(find) ARGUMENT(.)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(stat) FLAG(-c) ARGUMENT(%s)<Regex> ARGUMENT(%N)<File> ARGUMENT({})<File>
ROOT() UTILITY(ln) FLAG(-s) FLAG(-F) ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(mkdir) ARGUMENT(Directory)<Directory>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(/usr/ports/)<Path> FLAG(-name) ARGUMENT(Makefile*)<Regex> FLAG(-exec::+) UTILITY(grep) COMMANDSUBSTITUTION() UTILITY(printf) ARGUMENT(\15)<Format> FLAG(-l) ARGUMENT({})<File> UTILITY(wc) FLAG(-l)
ROOT(root) T(git) T(ls-files) T(|) T(grep) T(-vE) T((png|jpg|ico)) T(|) T(xargs) T(wc) T(-l)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-type) ARGUMENT(f)<Type> FLAG(-print)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(wc) FLAG(-l) ARGUMENT({})<File> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT(root) T(nohup) T(php) T(-f) T(yourscript.php)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-and) UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> BRACKET() BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(d)<Type> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::+) UTILITY(grep) FLAG(-i) FLAG(-l) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(f)<Type> FLAG(-execdir::;) UTILITY(mv) ARGUMENT({})<File> ARGUMENT(File)<File>
"ROOT() UTILITY(date) FLAG(--date) ARGUMENT(Regex)<Regex> ARGUMENT(+""%d"")<Format>"
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(wc) FLAG(-l) ARGUMENT({})<File> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(pstree) FLAG(-a) FLAG(-p) FLAG(-l)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-print0) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rename) ARGUMENT(Regex)<Regex> ARGUMENT({})<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> UTILITY(wc) FLAG(-l)
ROOT(root) T(od) T(-An) T(-N2) T(-i) T(/dev/random)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(du) FLAG(-a) ARGUMENT(File)<File> UTILITY(awk) ARGUMENT(Program)<Program> UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex>
"ROOT(root) T(find) T(.) T(-type) T(f) T(-ls) T(2>/dev/null) T(|) T(sort) T(-M) T(-k8,10) T(|) T(head) T(-n5)"
ROOT(root) T(git) T(ls-files) T(|) T(grep) T(-P) T(.*(hpp|cpp)) T(|) T(xargs) T(wc) T(-l)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-user) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(chown) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-ctime) ARGUMENT(+Timespan)<Timespan> FLAG(-exec::;) UTILITY(rm) FLAG(-f) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(+Size)<Size>
ROOT() UTILITY(ssh) FLAG(-i) ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-regex) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(+Permission)<Permission> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-delete)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(mount) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-print) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(set) UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT(root) T(sudo) T(find) T(/) T(-xdev) T(-type) T(f) T(-size) T(+100000) T(-name) T(*.log) T(-exec) T(gzip) T(-v) T({}) T(;) T(2>&1) T(|) T(awk) T({print) T($6})
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(cut) FLAG(-f) ARGUMENT(Number)<Number> FLAG(-d) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(mktemp)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(grep) FLAG(-i) FLAG(-H) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan>
ROOT(root) T(su) T(--login) T(postgres) T(--command) T(createdb) T($DBNAME)
ROOT() UTILITY(chgrp) FLAG(--recursive) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT(root) T(exec) T(>) T(>(tee) T(-a) T($HOME/logfile)) T(2>&1)
ROOT(root) T(ssh) T(-o) T(StrictHostKeyChecking=no) T(-l) T(username) T(hostname) T(pwd;) T(ls)
ROOT() UTILITY(date) FLAG(-u) FLAG(-d) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(pstree) UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(sed) ARGUMENT(Program)<Program> UTILITY(grep) FLAG(-v) ARGUMENT(Regex)<Regex> UTILITY(sh)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-empty)
ROOT(root) T(yes) T(|) T(execute_command)
ROOT() UTILITY(split) FLAG(--help)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-ctime) ARGUMENT(+Timespan)<Timespan> FLAG(-ctime) ARGUMENT(-Timespan)<Timespan>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UTILITY(xargs) UTILITY(wc) FLAG(-c)
ROOT() UTILITY(seq) FLAG(-s) ARGUMENT(Regex)<Regex> ARGUMENT(Number)<Number> ARGUMENT(Number)<Number>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print) FLAG(-exec::;) UTILITY(cat) ARGUMENT({})<File>
ROOT(root) T(find) T(.) T(-name) T(filename) T(including) T(space) T(-print0) T(|) T(xargs) T(-0) T(-I) T({}) T(sh) T(-c) T(ls) T(-aldF) T({}) T(>>) T(log.txt;) T(rm) T(-rdf) T({})
ROOT() UTILITY(find) ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> FLAG(-xdev) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT(root) T(alias) T(ff=find) T(.) T(-name) T($1)
ROOT(root) T(alias) T(prettyjson=python) T(-m) T(json.tool)
ROOT() UTILITY(chgrp) FLAG(-R) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT() UTILITY(ln) FLAG(-s) FLAG(-f) ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(echo) FLAG(-n) FLAG(-e) COMMANDSUBSTITUTION() UTILITY(whoami)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-exec::+) UTILITY(grep) FLAG(-l) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(d)<Type> UTILITY(rename) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-l) FLAG(-i) FLAG(-I) ARGUMENT({})<Regex> UTILITY(echo) ARGUMENT({})<Regex> ARGUMENT({})<Regex>
ROOT(root) T(ps) T(aux) T(|) T(less) T(-S)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-print0) UTILITY(awk) FLAG(-v) ARGUMENT(Program)<Program> FLAG(-v) ARGUMENT(Program)<Program> ARGUMENT(Program)<Program> UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(pwd) UTILITY(cut) FLAG(-f) ARGUMENT(Number)<Number> FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(--output-delimiter) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(tree) FLAG(-f) FLAG(-i) UTILITY(grep) FLAG(-v) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-n) ARGUMENT(Quantity)<Quantity> FLAG(-I) ARGUMENT({})<Regex> UTILITY(dirname) ARGUMENT({})<Regex> UTILITY(sort) FLAG(--unique)
ROOT(root) T(find) T(-name) T(*.bmp) T(-type) T(f) T(-exec) T(convert) T({}) T({}.jpg) T(;)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) FLAG(-v) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT(root) T(set) T(-o) T(allexport;) T(source) T(conf-file;) T(set) T(+o) T(allexport)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(Size)<Size>
"ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(l)<Type> FLAG(-printf) ARGUMENT(""%Y %p\n"")<Format> UTILITY(grep) FLAG(-w) ARGUMENT(Regex)<Regex>"
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(Timespan)<Timespan> FLAG(-type) ARGUMENT(f)<Type> FLAG(-ls)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-i) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(ln) FLAG(-s) ARGUMENT(File)<File>
ROOT(root) T(find) T(/) T(-name) T(core) T(-group) T(mycomp) T(-print) T(-exec) T(rm) T(-f) T({}) T(;) T(>>) T(mycompcore)
ROOT() UTILITY(read) FLAG(-p) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number>
"ROOT(root) T(find) T(.) T(-name) T(*.jpg) T(-exec) T(bash) T(-c) T(d=""${1%/*}"";) T(mv) T(""$1"") T(""$d/$d-${1##*/}"") T(-) T({}) T(;)"
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-print0) UTILITY(xargs) FLAG(--null)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-print) UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(file) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-print) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT(root) T(cd) T($() T(dirname) T($() T(dirname) T($() T(which) T(Regex)
ROOT() UTILITY(read) FLAG(-p) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-regextype) ARGUMENT(posix-extended)<Type> BRACKET() UNARYLOGICOP(!) FLAG(-regex) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(cp) FLAG(-p) FLAG(--target-directory) ARGUMENT(Directory)<Directory> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(tr) FLAG(-c) FLAG(-d) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(sed) FLAG(-i) ARGUMENT(Program)<Program> ARGUMENT({})<File>
ROOT() COMMANDSUBSTITUTION() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(md5sum)
ROOT() UTILITY(date) ARGUMENT(+%Y-%m-%d:%H:%M:%S)<Format>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan> UNARYLOGICOP(!) FLAG(-type) ARGUMENT(d)<Type>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-user) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(.) T(-name) T(headdump*) T(>delete.txt)
ROOT(root) T(read) T(sh_lock_lastPID) T(<) T($sh_lock_file)
ROOT(root) T(tar) T(--help) T(|) T(grep) T(lbzip2\|plzip\|pigz)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
ROOT(root) T(yum) T(check-update) T(|) T(awk) T(p;) T(/Updated) T(packages/) T({p=1})
ROOT() PIPELINE() UTILITY(df) FLAG(-h) UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(mkdir) FLAG(-p) ARGUMENT(Directory)<Directory>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(who) UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-n) ARGUMENT(Quantity)<Quantity> FLAG(-P) ARGUMENT(Quantity)<Quantity> FLAG(-I) ARGUMENT({})<Regex> UTILITY(bzip2) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(ls) FLAG(-1) UTILITY(grep) FLAG(-v) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(mv) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT() UTILITY(paste) FLAG(-d) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> PROCESSSUBSTITUTION(<) UTILITY(rev) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(wc) FLAG(-l)
ROOT(root) T(find) T(.) T(-name) T(*.txt) T(-print0) T(|) T(xargs) T(-0) T(python) T(hello.py)
ROOT(root) T(chown) T(-R) T($() T(whoami)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(find) ARGUMENT({})<Path> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> ARGUMENT(Path)<Path>
ROOT() UTILITY(ssh) FLAG(-i) ARGUMENT(File)<File> FLAG(-p) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(top) FLAG(-b) FLAG(-n) ARGUMENT(Quantity)<Quantity> FLAG(-c) UTILITY(grep) FLAG(-A) ARGUMENT(Quantity)<Quantity> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(scp) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(ls) FLAG(-a) FLAG(-l) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(uname) FLAG(-r) UTILITY(sed) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::+) UTILITY(grep) FLAG(-H) FLAG(-n) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT(root) T(find) T(Path) T($() T(mount) T(-t) T(smbfs) T(|) T(awk) T(Program)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UTILITY(grep) FLAG(-E) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(Permission)<Permission> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(ls) FLAG(-l) ARGUMENT({})<File>
ROOT() COMMANDSUBSTITUTION() UTILITY(md5sum) ARGUMENT(File)<File>
ROOT(root) T(su) T(-) T(USER_FOOBAR) T(-c) T(/PATH/TO/MY_APP) T(&)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(-not) BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(sed) FLAG(-i) ARGUMENT(Program)<Program> ARGUMENT(File)<File> ARGUMENT(File)<File> ARGUMENT({})<File>
"ROOT(root) T(find) T(-maxdepth) T(1) T(-name) T(*.sql) T(-print0) T(;) T(|) T(xargs) T(-0) T(sed) T(-e) T(s/) T(,) T();/1,1);/g) T(|) T(mysql) T(-D) T(ootp)"
ROOT(root) T(find) T(.) T(-atime) T(+6) T(-exec) T(ll) T(|) T(more)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-print0)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(ls) FLAG(-l) FLAG(-a) FLAG(-h) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-atime) ARGUMENT(+Timespan)<Timespan> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-samefile) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
ROOT(root) T(local) T(pingResults=$(LANG=C) T(ping) T(-q) T(-c10) T($gateway))
ROOT() PIPELINE() UTILITY(true) UTILITY(sleep) ARGUMENT(Timespan)<Timespan>
ROOT(root) T(pwd) T(mktemp) T(-d)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(grep) FLAG(-l) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT(root) T(ssh) T(-fNR) T(1234:localhost:22) T(root@123.123.123.123)
ROOT(root) T(sudo) T(yum) T(--disablerepo) T(epel) T(update) T(openssl)
ROOT() UTILITY(chown) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT() UTILITY(comm) FLAG(-1) FLAG(-2) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(sed) ARGUMENT(Program)<Program> UTILITY(column) FLAG(-t)
ROOT(root) T(find) T(.) T(-depth) T(-name) T(*) T(*) T(|) T(while) T(IFS=) T(read) T(-r) T(f) T(;) T(do) T(mv) T(-i) T($f) T($(dirname) T($f)/$(basename) T($f|tr) T(') T(') T(_)) T(;) T(done)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) FLAG(-r) FLAG(-f) ARGUMENT({})<File>
ROOT(root) T(getent) T(group) T(|) T(cut) T(-d:) T(-f1) T(|) T(sort)
ROOT() UTILITY(chown) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT(root) T(df) T(--output=target) T($path) T(|) T(tail) T(-1)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type>
ROOT() PIPELINE() UTILITY(finger) UTILITY(awk) FLAG(-F) ARGUMENT(Regex)<Regex> FLAG(-v) ARGUMENT(Program)<Program> ARGUMENT(Program)<Program> UTILITY(sed) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(-not) FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T($DBA/$ORACLE_SID/bdump/*.trc) T(-mtime) T(-1) T(-print) T(>>) T(/tmp/trace_list.lst)
ROOT() UTILITY(chgrp) FLAG(-R) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-iname) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-i) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(df) ARGUMENT(File)<File> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT(root) T(ssh) T(-i) T(File) T(Regex) T(command)
ROOT(root) T(cat) T(`/gnuwin32/bin/find.exe) T(.) T(-name) T(*.php`) T(|) T(wc) T(-l)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-print) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(shopt) FLAG(-u) FLAG(-o) ARGUMENT(history)<Option>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-size) ARGUMENT(-Size)<Size>
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(tr) FLAG(-s) ARGUMENT(Regex)<Regex> UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-iregex) ARGUMENT(Regex)<Regex> UNARYLOGICOP(!) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::+) UTILITY(grep) FLAG(-l) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> UTILITY(wc) FLAG(-l)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type> UTILITY(wc) FLAG(-l)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(Size)<Size>
ROOT(root) T(csvtopretty) T(filename.csv) T(|) T(less) T(-S)
ROOT() PIPELINE() UTILITY(od) UTILITY(cut) FLAG(-b) ARGUMENT(Number)<Number> UTILITY(xargs) FLAG(-n) ARGUMENT(Quantity)<Quantity> UTILITY(sort) UTILITY(uniq) UTILITY(wc) FLAG(-l)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(cp) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-l) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(readlink) FLAG(-f) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(wc) FLAG(-l)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(grep) FLAG(-r) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT(root) T(su) T(-c) T(dbca) T(-silent) T(-createDatabase) T(-templateName) T(General_Purpose.dbc) T(-gdbName) T(qualidade) T(-sysPassword) T(password) T(-systemPassword) T(password) T(-scriptDest) T(/u01/app/oracle/oradata/qualidade) T(-characterSet) T(WE8ISO8859P1) T(-s) T(/bin/sh) T(oracle)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(+Size)<Size>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-atime) ARGUMENT(+Timespan)<Timespan> FLAG(-type) ARGUMENT(f)<Type>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::+) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(ls) FLAG(-l) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
"ROOT() UTILITY(mount) FLAG(-o) ARGUMENT(ro,loop,offset=$OFFSET)<Option> FLAG(-t) ARGUMENT(auto)<Option> ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-exec::;) UTILITY(rm) FLAG(-r) FLAG(-f) ARGUMENT({})<File>
ROOT() UTILITY(mktemp) FLAG(--suffix) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(dig) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT(@resolver1.opendns.com)<Type>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> FLAG(-ls)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(sed) FLAG(-i) FLAG(-e) ARGUMENT(Program)<Program> ARGUMENT({})<Program>
ROOT() PIPELINE() UTILITY(history) UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number> UTILITY(sed) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-print)
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(sort) FLAG(-t) ARGUMENT(Regex)<Regex> FLAG(-k) ARGUMENT(Number)<Number> FLAG(-n)
ROOT() UTILITY(read) ARGUMENT(Regex)<Regex>
ROOT(root) T(screen) T(-S) T(name) T(application)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT(root) T(zcat) T(input.gz) T(|) T(./myscript.pl)
ROOT() UTILITY(basename) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::+) UTILITY(cat) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(md5sum) ARGUMENT(File)<File> UTILITY(sed) FLAG(-e) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-exec::;) UTILITY(rm) FLAG(-r) FLAG(-f) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(bash) UTILITY(tee) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-newer) ARGUMENT(File)<File> FLAG(-exec::;) UTILITY(tar) FLAG(-u) FLAG(-v) FLAG(-f) ARGUMENT(File)<File> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-regex) ARGUMENT(Regex)<Regex>
ROOT(root) T(nslookup) T(`hostname`)
ROOT() UTILITY(awk) ARGUMENT(Program)<Program> ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(tar) FLAG(-r) FLAG(-v) FLAG(-f) ARGUMENT(File)<File> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-e) ARGUMENT(Regex)<Regex> FLAG(-n) ARGUMENT(Quantity)<Quantity> FLAG(-e) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(head) ARGUMENT(1)<File>
ROOT(root) T(find) T(`pwd`) T(-name) T(*rc.conf) T(-execdir) T(/bin/chmod) T(o+r) T({}) T(;)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-xdev) FLAG(-inum) ARGUMENT(Quantity)<Quantity>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> UTILITY(wc) FLAG(-l)
ROOT(root) T(find) T(Path) T(-type) T(f) T(-mtime) T(-Timespan) T(|) T(xargs) T(-I) T({}) T(tar) T(-c) T(-v) T(-f) T($() T(date) T('+%d%m%Y'_archive.tar)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(cp) FLAG(-t) ARGUMENT(Directory)<Directory> ARGUMENT({})<File>
ROOT() UTILITY(head) FLAG(-) ARGUMENT(Quantity)<Quantity> PROCESSSUBSTITUTION(<) UTILITY(sort) ARGUMENT(File)<File>
ROOT() UTILITY(mktemp) FLAG(-d) FLAG(-p) ARGUMENT(Directory)<Directory>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(d)<Type> FLAG(-exec::;) UTILITY(rm) FLAG(-r) FLAG(-f) ARGUMENT({})<File>
ROOT(root) T(alias) T(:=xargs) T(-I{})
ROOT() PIPELINE() UTILITY(set) UTILITY(grep) FLAG(-o) FLAG(-P) ARGUMENT(Regex)<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-nouser)
ROOT() UTILITY(cd) COMMANDSUBSTITUTION() UTILITY(pwd) FLAG(-P)
ROOT() PIPELINE() UTILITY(diff) FLAG(-q) FLAG(-r) ARGUMENT(File)<File> ARGUMENT(File)<File> UTILITY(sort)
ROOT() PIPELINE() UTILITY(shopt) FLAG(-s) UTILITY(grep) FLAG(-E) FLAG(-i) ARGUMENT(Regex)<Regex>
"ROOT(root) T(while) T(true) T(;) T(do) T(nc) T(-l) T(-p) T(1500) T(-c) T(echo) T(-e) T(""HTTP/1.1) T(200) T(OK\n\n) T($(date)"";) T(done)"
ROOT() PIPELINE() UTILITY(grep) FLAG(-n) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> UTILITY(head) FLAG(-n) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(find) FLAG(-P) ARGUMENT(Path)<Path> FLAG(-lname) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan> FLAG(-exec::+) UTILITY(echo) ARGUMENT({})<Regex>
ROOT(root) T(find) T(.) T(-name) T(*.zip) T(|) T(xargs) T(-n1) T(unzip)
ROOT(root) T(find) T(/) T(-name) T(foo.bar) T(-print) T(2>/dev/null)
ROOT(root) T(date) T(-d) T(@$(git) T(log) T(-n1) T(--format=%at)) T(+%Y%m%d%H%M)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(cpio) FLAG(-p) FLAG(-a) FLAG(-m) FLAG(-v) FLAG(-d) FLAG(-0) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(Permission)<Permission> FLAG(-mtime) ARGUMENT(Timespan)<Timespan> FLAG(-print)
ROOT(root) T(find) T(/students) T(-type) T(l) T(-print) T(2>) T(/dev/null) T(|wc) T(-l)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT(root) T(var=`hg) T(st) T(-R) T($path) T(|) T(sed) T(-e) T(s/) T(*$//`)
"ROOT(root) T(perl) T(-e) T(@T=localtime(time-86400);printf(""%02d/%02d/%04d"",$T[3],$T[4]+1,$T[5]+1900)) T(|) T(read) T(dt)"
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(Permission)<Permission> UTILITY(head)
ROOT(root) T(grep) T($() T(dirname) T(Regex)
ROOT() UTILITY(uname) FLAG(-m)
ROOT(root) T(find) T(.) T(-name) T(*.php) T(-type) T(f) T(-print0) T(|) T(xargs) T(-0) T(-n1) T(php) T(-l)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> UTILITY(sort) FLAG(-r)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print) UTILITY(cpio) FLAG(-p) FLAG(-a) FLAG(-v) FLAG(-d) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(f)<Type>
ROOT(root) T(find) T(.) T(-name) T(nameoffile) T(-print) T(|) T(cpio) T(-iv) T(>) T(/dev/fd0)
ROOT(root) T(find) T(/home) T(-type) T(f) T(-name) T(*.ext) T(-print0) T(|) T(while) T(read) T(-r) T(-d) T($(printf) T(000)) T(-r) T(path;) T(do) T(cat) T($path) T(|) T(tr) T(-d) T(\r) T(>) T($path_new;) T(done)
ROOT() PIPELINE() UTILITY(ifconfig) ARGUMENT(Regex)<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-v) ARGUMENT(Regex)<Regex> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-wholename) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-type) ARGUMENT(f)<Type> FLAG(-perm) ARGUMENT(-Permission)<Permission> FLAG(-exec::;) UTILITY(ls) FLAG(-l) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-newer) ARGUMENT(File)<File> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::+) UTILITY(sed) FLAG(-i) ARGUMENT(Program)<Program> ARGUMENT({})<File>
"ROOT(root) T(find) T(.) T(-name) T(*.xml) T(-exec) T(sh) T(-c) T(echo) T(""cp) T($0) T(someWhereElse/$0"") T({}) T(;)"
ROOT() UTILITY(ssh) FLAG(-S) ARGUMENT(Path)<Path> FLAG(-O) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mmin) ARGUMENT(-Quantity)<Quantity> FLAG(-ls)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
ROOT(root) T(find) T(.) T(-type) T(f) T(-print) T(-exec) T(sh) T(-c) T(readelf) T(-s) T({}) T(|) T(grep) T(mysymbol) T(;)
ROOT() UTILITY(rsync) FLAG(-u) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(Timespan)<Timespan>
ROOT() UTILITY(su)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(!) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() UTILITY(popd)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(bzip2) FLAG(-d) FLAG(-c) ARGUMENT(File)<File> UTILITY(tar) FLAG(-x) FLAG(-v) FLAG(-f) ARGUMENT(File)<File> ARGUMENT(File)<File>
"ROOT(root) T(watch) T(-tdn0.5) T(ps) T(-mo) T(pid,tid,%cpu,psr) T(-p) T(`pgrep) T(BINARY-NAME`)"
ROOT() UTILITY(find) ARGUMENT(Path)<Path>
ROOT(root) T(x=$(ifconfig) T(eth0)) T(&&) T(x=${x#*HWaddr) T(}) T(&&) T(echo) T(${x%%) T(*})
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-ctime) ARGUMENT(Timespan)<Timespan> FLAG(-type) ARGUMENT(f)<Type>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(sed) ARGUMENT(Program)<Program>
ROOT(root) T(find) T(/) T(-name) T(*.txt) T(-mount) T(2>) T(/dev/null)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-group) ARGUMENT(Regex)<Regex> FLAG(-perm) ARGUMENT(-Permission)<Permission> FLAG(-print)
ROOT() PIPELINE() UTILITY(ping) FLAG(-c) ARGUMENT(Quantity)<Quantity> FLAG(-q) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-o) FLAG(-P) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(du) UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-regex) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(watch) UTILITY(ls)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(!) FLAG(-path) ARGUMENT(Regex)<Regex> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> BRACKET() FLAG(-iname) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(yes) UTILITY(head) FLAG(-) ARGUMENT(Quantity)<Quantity>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(vim) ARGUMENT({})<File>
ROOT() UTILITY(ln) FLAG(-s) ARGUMENT(File)<File> COMMANDSUBSTITUTION() UTILITY(basename) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(crontab) FLAG(-l) UTILITY(sed) ARGUMENT(Program)<Program> UTILITY(crontab) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(yes) ARGUMENT(Regex)<Regex> UTILITY(head) FLAG(-) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(cat) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(uname) FLAG(-r) UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(mkdir) COMMANDSUBSTITUTION() UTILITY(printf) ARGUMENT($HOME/Labs/lab4a/folder%03g)<Format> ARGUMENT({0..3})<Regex>
ROOT(root) T(read) T(-r) T(-d) T($\0) T(content) T(<<<) T(${some_variable})
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T($INPUT_LOCATION) T(-name) T(*.pdf.marker) T(|) T(xargs) T(-i) T(bash) T(-c) T(mv) T(${0%.marker}) T($0) T($1) T({}) T($OUTPUT_LOCATION)
ROOT() UTILITY(rsync) FLAG(-a) FLAG(-v) FLAG(-h) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(.) T(-name) T(*.xml) T(|) T(while) T(read) T(i;) T(do) T(grep) T(<?xml) T($i) T(>/dev/null;) T([) T($?) T(==) T(0) T(]) T(&&) T(echo) T($i;) T(done)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-exec::;) UTILITY(rm) FLAG(-r) FLAG(-f) ARGUMENT({})<File>
ROOT(root) T(find) T(/dump) T(-type) T(f) T(-name) T(*.xml) T(|) T(parallel) T(-j8) T(java) T(-jar) T(ProcessFile.jar) T({})
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mmin) ARGUMENT(-Quantity)<Quantity> FLAG(-mmin) ARGUMENT(+Quantity)<Quantity> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(ls) FLAG(-l) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(tar) FLAG(-c) FLAG(-v) FLAG(-f) ARGUMENT(File)<File> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) UTILITY(wc) FLAG(-l)
"ROOT() UTILITY(date) FLAG(--date) ARGUMENT(Regex)<Regex> ARGUMENT(+""%Y"")<Format>"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-type) ARGUMENT(d)<Type>
ROOT() UTILITY(mkdir) FLAG(-p) COMMANDSUBSTITUTION() UTILITY(seq) FLAG(-s) ARGUMENT(Regex)<Regex> ARGUMENT(Number)<Number>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(Size)<Size>
ROOT(root) T({) T(time) T(find) T(/) T(&>/dev/null;) T(}) T(2>&1) T(|) T(grep) T(real)
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(sed) FLAG(-e) ARGUMENT(Program)<Program> FLAG(-e) ARGUMENT(Program)<Program> UTILITY(column) FLAG(-t)
ROOT(root) T(tmux) T(show-options) T(-g)
ROOT() PIPELINE() UTILITY(ls) FLAG(-1) UTILITY(tail) FLAG(-n) ARGUMENT(+Quantity)<Quantity> UTILITY(head) FLAG(-n) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(Permission)<Permission> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(ls) FLAG(-l) ARGUMENT({})<File>
ROOT(root) T(join) T(-t) T(Regex) T(-a) T(Quantity) T(-a) T(Quantity) T(<() T(sort) T(File)
ROOT(root) T(watch) T(bash) T(-c) T(your_script)
ROOT(root) T(find) T(Path) T($() T(pwd) T(-P)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(perl) T(-p) T(-i) T(-e) T(s/oldstring/newstring/g) T(`find) T(./) T(-name) T(*.html`)
"ROOT(root) T(getent) T(group) T(<groupname>) T(|) T(cut) T(-d:) T(-f4) T(|) T(tr) T(,) T(\n)"
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(ls) FLAG(-l) FLAG(-d) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(tar) FLAG(-r) FLAG(-v) FLAG(-f) ARGUMENT(File)<File> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(echo) ARGUMENT({})<Regex> FLAG(-exec::;) UTILITY(rm) FLAG(-r) FLAG(-f) ARGUMENT({})<File>
ROOT() UTILITY(mv) ARGUMENT(File)<File> COMMANDSUBSTITUTION() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(rev) UTILITY(cut) FLAG(-f) ARGUMENT(Number)<Number> FLAG(-d) ARGUMENT(Regex)<Regex> UTILITY(rev)
"ROOT(root) T(find) T(.) T(-type) T(d) T(-iname) T(*foo*) T(-depth) T(-exec) T(bash) T(-c) T(echo) T(mv) T(""$1"") T(""${1//[Ff][Oo][Oo]/BAr}"") T(--) T({}) T(;)"
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UTILITY(env) FLAG(-i) ARGUMENT(Program)<Program> ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan> BINARYLOGICOP(-or) FLAG(-newer) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(echo) FLAG(-e) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(touch) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) FLAG(-r) FLAG(-f) ARGUMENT({})<File>
ROOT(root) T(xxd) T(-p) T(file) T(|) T(tr) T(-d) T(\n)
ROOT() UTILITY(cd) COMMANDSUBSTITUTION() PIPELINE() UTILITY(ls) FLAG(-r) FLAG(-d) ARGUMENT(File)<File> UTILITY(tail) FLAG(--lines) ARGUMENT(Quantity)<Quantity>
ROOT(root) T(find) T(.) T(-type) T(f) T(!) T(-iregex) T(.\|./.git) T(-exec) T(perl) T(-i) T(-pe) T(s/$lower1/$lower2/g) T({}) T(+)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(wc) FLAG(-l) ARGUMENT({})<File> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(ls) FLAG(-l) FLAG(-r) FLAG(-t) ARGUMENT({})<File> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(sort) FLAG(-u)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(wc) FLAG(-l) ARGUMENT({})<File>
ROOT() UTILITY(cp) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT(root) T(find) T(.) T(-atime) T(+7) T(-o) T(-size) T(+`expr) T(10) T(*) T(1024) T(*) T(2`) T(-print)
ROOT() UTILITY(rename) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(awk) ARGUMENT(Program)<Program> ARGUMENT(Program)<Program> ARGUMENT(Program)<Program> UTILITY(rev) UTILITY(column) FLAG(-t) UTILITY(rev)
ROOT() PIPELINE() UTILITY(yes) ARGUMENT(Regex)<Regex> UTILITY(head) FLAG(-) ARGUMENT(Quantity)<Quantity> UTILITY(nl) UTILITY(sort) FLAG(-R) UTILITY(cut) FLAG(-f) ARGUMENT(Number)<Number> UTILITY(head) FLAG(-) ARGUMENT(Quantity)<Quantity>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(tr) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(kill) ARGUMENT(Regex)<Regex>
ROOT(root) T(hostname) T(-a) T(-l) T(mydomain.com) T(|) T(sed) T(-n) T(/;;) T(ANSWER/{n;N;p;q})
ROOT() UTILITY(mount)
ROOT(root) T(dpkg) T(-S) T(`which) T(command`)
ROOT() UTILITY(rsync) FLAG(-r) FLAG(-v) FLAG(-v) FLAG(--recursive) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT(File)<File> FLAG(-R)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(md5sum) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(grep) FLAG(-l) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT(root) T(true) T(|) T(echo) T(`tty) T(|) T(sed) T(s:/dev/::`)
"ROOT(root) T(find) T(.) T(-type) T(f) T(-name) T(*.m4a) T(-exec) T(bash) T(-c) T(avconv) T(-i) T(""$0"") T(""${0/%m4a/mp3}"") T({}) T(;)"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mount) FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(comm) T(<() T(sort) T(-n) T(File)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-print0)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-atime) ARGUMENT(+Timespan)<Timespan> FLAG(-exec::;) UTILITY(rm) FLAG(-f) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(rename) FLAG(-v) FLAG(-n) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-inum) ARGUMENT(Quantity)<Quantity> FLAG(-exec::;) UTILITY(rm) FLAG(-i) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-regex) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(grep) FLAG(-H) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT(root) T(find) T(/home) T(-user) T(<usernmae>) T(-print)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan> UTILITY(wc)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-group) ARGUMENT(Regex)<Regex> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(mv) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT() UTILITY(tail) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(join) FLAG(-j) ARGUMENT(2)<Regex> PROCESSSUBSTITUTION(<) UTILITY(seq) ARGUMENT(0)<Number> ARGUMENT(255)<Number> PROCESSSUBSTITUTION(<) UTILITY(seq) ARGUMENT(0)<Number> ARGUMENT(255)<Number> UTILITY(xargs) FLAG(-n) ARGUMENT(256)<Quantity> FLAG(-I) ARGUMENT({})<ReservedWord> UTILITY(printf) ARGUMENT(%02x/%02x\n)<Format> ARGUMENT({})<ReservedWord> UTILITY(xargs) FLAG(-I) ARGUMENT({})<ReservedWord> UTILITY(mkdir) FLAG(-p) ARGUMENT({})<ReservedWord>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(l)<Type> FLAG(-print)
ROOT() PIPELINE() UTILITY(ifconfig) ARGUMENT(Regex)<Regex> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(df) FLAG(-P) FLAG(-h)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-user) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() UTILITY(chgrp) FLAG(-R) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(-not) BRACKET() FLAG(-path) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-path) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) FLAG(-type) ARGUMENT(f)<Type>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::+) UTILITY(grep) FLAG(-H) FLAG(-c) FLAG(-m) ARGUMENT(Quantity)<Quantity> ARGUMENT(Regex)<Regex> ARGUMENT({})<File> UTILITY(sed) FLAG(-n) ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(yes) OPERATOR(--) ARGUMENT(Regex)<Regex> UTILITY(head) FLAG(-n) ARGUMENT(Quantity)<Quantity>
ROOT() PIPELINE() UTILITY(who) FLAG(-s) FLAG(-u) UTILITY(sort) UTILITY(uniq) UTILITY(column)
ROOT(root) T(brew) T(install) T(git) T(bash-completion)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-regex) ARGUMENT(Regex)<Regex>
ROOT(root) T(ssh) T(-fL) T(127.0.0.1:someport:host.in.the.remote.net:22) T(proxy.host)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-delete)
ROOT(root) T(cp) T($() T(which) T(Regex)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-exec::;) UTILITY(du) FLAG(-k) FLAG(-s) ARGUMENT({})<File> UTILITY(cut) FLAG(-f) ARGUMENT(Number)<Number> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(tr) FLAG(-s) ARGUMENT(Regex)<Regex> UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number>
ROOT() PIPELINE() UTILITY(cal) FLAG(-h) UTILITY(cut) FLAG(-c) ARGUMENT(Number)<Number> UTILITY(tail) FLAG(-n) ARGUMENT(+Quantity)<Quantity>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> UNARYLOGICOP(!) FLAG(-perm) ARGUMENT(-Permission)<Permission>
ROOT(root) T(wget) T($() T(hostname) T(-I)
"ROOT(root) T(find) T(.) T(-type) T(d) T(-execdir) T(sh) T(-c) T(test) T(-z) T(""$(find) T(""{}"") T(-mindepth) T(1) T(-type) T(d)"") T(&&) T(echo) T($PWD/{}) T(;)"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-empty) FLAG(-type) ARGUMENT(-f)<Type>
ROOT(root) T(find) T(/some/path) T(-name) T(*.coffee) T(-print0) T(|) T(xargs) T(-0) T(perl) T(/path/to/your/program)
ROOT() UTILITY(cat) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(wc) FLAG(-l)
ROOT() UTILITY(od) FLAG(-t) ARGUMENT(c)<Type> ARGUMENT(File)<File>
ROOT() UTILITY(read) FLAG(-r) FLAG(-s) FLAG(-p) ARGUMENT(Regex)<Regex> FLAG(-n) ARGUMENT(Quantity)<Quantity> FLAG(-t) ARGUMENT(Quantity)<Quantity>
ROOT() PIPELINE() UTILITY(true) UTILITY(false) UTILITY(true)
ROOT(root) T(find) T(/mnt/naspath) T(-mtime) T(0) T(-print0) T(|) T(du) T(--files0-from=-) T(-hc) T(|) T(tail) T(-n1) T(>>) T(/tmp/size.log)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-mtime) ARGUMENT(Timespan)<Timespan>
ROOT(root) T(su) T(-c) T(bash) T(--rcfile) T(myfile)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-not) FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-not) FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-atime) ARGUMENT(+Timespan)<Timespan>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::+) UTILITY(cp) FLAG(-t) ARGUMENT(Directory)<Directory> OPERATOR(--) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-n) ARGUMENT(Quantity)<Quantity> FLAG(-I) ARGUMENT({})<Regex> UTILITY(cp) ARGUMENT(File)<File> ARGUMENT({})<File>
ROOT() UTILITY(cat) FLAG(-n) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-user) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(!) ARGUMENT(Path)<Path> UNARYLOGICOP(-prune)
ROOT(root) T(perl) T(-ple) T(`find) T(.) T(-name) T(file*`)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(Permission)<Permission> FLAG(-type) ARGUMENT(f)<Type> UTILITY(sed) ARGUMENT(Program)<Program> UTILITY(sort) UTILITY(diff) FLAG(-u) ARGUMENT(Quantity)<Quantity> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::+) UTILITY(grep) FLAG(-i) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(set) OPERATOR(--) COMMANDSUBSTITUTION() UTILITY(cal) ARGUMENT(DateTime)<DateTime> ARGUMENT(DateTime)<DateTime>
"ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-printf) ARGUMENT(""unzip -c %p | grep -q '<stringWithOrWithoutSpacesToFind>' && echo %p\n"")<Format> UTILITY(sh)"
ROOT() UTILITY(dig) FLAG(-x) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-group) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT(root) T(find) T(.) T(-exec) T(program) T({}) T(+)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::+) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File> FLAG(-printf) ARGUMENT('.')<Format> UTILITY(wc) FLAG(-c)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UNARYLOGICOP(-not) FLAG(-path) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(cp) FLAG(--parents) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(sed) FLAG(-i) ARGUMENT(Program)<Program> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-t) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(chmod) FLAG(-v) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type>
ROOT() UTILITY(dig) FLAG(-x) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(tar) FLAG(-u) FLAG(-f) ARGUMENT(File)<File> ARGUMENT({})<File>
"ROOT() UTILITY(mount) FLAG(-o) ARGUMENT(remount,ro)<Option> FLAG(-t) ARGUMENT(yaffs2)<Option> ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>"
ROOT() PIPELINE() UTILITY(who) UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number>
ROOT(root) T(ssh) T(-t) T(remotehost) T(sudo) T(<cmd>)
ROOT() PIPELINE() UTILITY(ls) FLAG(-1) UTILITY(tr) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> UTILITY(sed) ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type> UTILITY(cut) FLAG(-c) ARGUMENT(Number)<Number> UTILITY(sort) FLAG(-k) ARGUMENT(Number)<Number> UTILITY(tail) FLAG(-n) ARGUMENT(Quantity)<Quantity> UTILITY(xargs) FLAG(-r) FLAG(-I) ARGUMENT({})<Regex> UTILITY(echo) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT({})<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-v) FLAG(-F) FLAG(-f) ARGUMENT(Regex)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-size) ARGUMENT(+Size)<Size>
ROOT() UTILITY(shopt) ARGUMENT(compat31)<Option>
ROOT() PIPELINE() UTILITY(yes) UTILITY(awk) ARGUMENT(Program)<Program> UTILITY(more)
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(wc) FLAG(-l)
ROOT() UTILITY(df) FLAG(-B) ARGUMENT(Size)<Size>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() UTILITY(readlink) FLAG(-f) COMMANDSUBSTITUTION() UTILITY(ls) FLAG(--dereference) ARGUMENT(File)<File>
ROOT(root) T(echo) T(ee) T(|) T(tee) T(/dev/tty) T(|) T(foo)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-printf) ARGUMENT('%h\n')<Format> UTILITY(sort) FLAG(-u)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(apropos) T(-r) T(^std) T(|) T(vi) T(-)
ROOT() PIPELINE() UTILITY(set) UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number> UTILITY(grep) ARGUMENT(Regex)<Regex>
"ROOT(root) T(df) T(-Ph) T(|) T(perl) T(-ne) T(chomp;) T(printf) T(""\n%-40s) T(%8s) T(%8s) T(%8s) T(%8s) T(%-20s"",) T(split) T(/) T(+/,) T($_,) T(6) T(;)"
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(dirname) ARGUMENT({})<Regex> UTILITY(sort) FLAG(-u) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(mkdir) FLAG(-p) ARGUMENT({})<Directory>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-exec::+) UTILITY(mv) FLAG(-t) ARGUMENT(Directory)<Directory> ARGUMENT({})<File>
"ROOT(root) T(find) T(.) T(-type) T(l) T(-exec) T(sh) T(-c) T(echo) T($(readlink) T(-f) T(""{}"")) T(""<--) T({}"") T(;) T(|) T(grep) T(-v) T(^$(readlink) T(-f) T(${PWD}))"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(sed) FLAG(-i) ARGUMENT(Program)<Program> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-cmin) ARGUMENT(Quantity)<Quantity> FLAG(-print)
ROOT(root) T(seq) T(10) T(|) T(parallel) T(-j4) T(echo) T({})
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-empty) FLAG(-exec::;) UTILITY(cp) ARGUMENT(File)<File> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(awk) FLAG(-F) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(File)<File> UTILITY(paste) FLAG(-s) FLAG(-d) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> BRACKET() FLAG(-user) ARGUMENT(Regex)<Regex> ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> FLAG(-print)
ROOT(root) T(alias) T(unsetvar=source) T(/your/path/to/the/script/unsetvar)
ROOT(root) T(lspci) T(-v) T(-v) T(|) T(less)
ROOT() UTILITY(set) COMMANDSUBSTITUTION() UTILITY(od) FLAG(-j) ARGUMENT(Size)<Size> FLAG(-N) ARGUMENT(File)<File> FLAG(-t) ARGUMENT(u1)<Type> ARGUMENT(File)<File>
ROOT(root) T(find) T(Path) T($() T(pwd)
ROOT() UTILITY(awk) ARGUMENT(Program)<Program> ARGUMENT(Program)<Program>
ROOT() UTILITY(echo) COMMANDSUBSTITUTION() UTILITY(basename) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(unset) T(array[$RANDOM%4])
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-path) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-print)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(file) FLAG(-b) ARGUMENT({})<File> FLAG(-printf) ARGUMENT('%s\n')<Format> UTILITY(awk) FLAG(-F) ARGUMENT(Regex)<Regex> ARGUMENT(Program)<Program> UTILITY(sort) FLAG(-n) FLAG(-r)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-ctime) ARGUMENT(Timespan)<Timespan>
ROOT() PIPELINE() UTILITY(mount) FLAG(-v) UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT(root) T(df) T(-kt<type>)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-size) ARGUMENT(-Size)<Size>
ROOT() UTILITY(dig) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT(SRV)<Type>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-links) ARGUMENT(Quantity)<Quantity> FLAG(-print)
ROOT(root) T(alias) T(|) T(grep) T(xlogs)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(l)<Type>
ROOT() UTILITY(env) FLAG(-i) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-empty) FLAG(-delete)
ROOT() UTILITY(cd) FLAG(-P) ARGUMENT(Directory)<Directory>
ROOT(root) T(find) T(.) T(-type) T(f) T(-and) T(-iname) T(*.deb) T(|) T(xargs) T(-n) T(1) T(dpkg) T(-I)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> UNARYLOGICOP(!) FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(readlink) FLAG(-f) ARGUMENT(File)<File>
ROOT() UTILITY(kill) FLAG(-) ARGUMENT(HUP)<Regex> COMMANDSUBSTITUTION() UTILITY(lsof) FLAG(-t) FLAG(-c) ARGUMENT(sshd)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-n) ARGUMENT(Quantity)<Quantity> FLAG(-I) ARGUMENT({})<Regex> UTILITY(echo) ARGUMENT({})<Regex>
ROOT() UTILITY(set) ARGUMENT(Regex)<Regex>
ROOT(root) T(mount) T(--rbind) T(/sys) T(/var/snmp3/sys)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UTILITY(grep) FLAG(-i) ARGUMENT(Regex)<Regex> UTILITY(sort)
ROOT(root) T(find) T(/) T(-fstype) T(ext3) T(-name) T(zsh) T(-ls) T(2>) T(/dev/null)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-depth)
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-exec::+) UTILITY(grep) FLAG(-E) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> UTILITY(wc) FLAG(-l)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-print)
ROOT() UTILITY(shopt) FLAG(-s) ARGUMENT(extglob)<Option> ARGUMENT(progcomp)<Option>
ROOT() UTILITY(bg) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-atime) ARGUMENT(-Timespan)<Timespan>
ROOT(root) T(find) T(.) T(-iname) T(*.mov) T(-printf) T(%p) T(%f\n) T(|) T(while) T(read) T(-a) T(HR) T(;) T(do) T(echo) T(ffmpeg) T(-i) T(${HR[0]}) T(-f) T(flv) T(${HR[1]}) T(;done)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-newer) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT(root) T(find) T(/target/dir) T(-type) T(l) T(!) T(-exec) T(test) T(-e) T({}) T(;) T(-exec) T(rm) T({}) T(;)
"ROOT(root) T(find) T(../../$name-module) T(-name) T(Name*) T(-type) T(f) T(-exec) T(bash) T(-c) T(mv) T(""\$1"") T(""\${1/Name/$Name}"") T(--) T({}) T(;)"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(bzip2) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(grep) FLAG(-i) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print) FLAG(-exec::;) UTILITY(false)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> UTILITY(xargs) FLAG(-r) FLAG(-I) ARGUMENT({})<Regex> UTILITY(ls) FLAG(-l) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(seq) ARGUMENT(Number)<Number> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(echo) FLAG(-n) ARGUMENT({})<Regex>
ROOT() UTILITY(readlink) FLAG(-f) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-print) UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-i) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(+Permission)<Permission>
ROOT() PIPELINE() UTILITY(ls) ARGUMENT(File)<File> UTILITY(more)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-t) FLAG(-i) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT(root) T(find) T(-iregex) T(.*\.py$\|.*\.xml$) T(|) T(xargs) T(egrep) T(-niH) T(a.search.pattern) T(|) T(vi) T(-R) T(-)
ROOT() UTILITY(set) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(ssh) FLAG(-O) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path>
ROOT() PIPELINE() UTILITY(whoami) UTILITY(tr) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-ctime) ARGUMENT(-Timespan)<Timespan>
ROOT() PIPELINE() UTILITY(pstree) FLAG(-s) FLAG(-A) ARGUMENT(Regex)<Regex> UTILITY(head) FLAG(-n) ARGUMENT(Quantity)<Quantity> UTILITY(sed) FLAG(-e) ARGUMENT(Program)<Program> FLAG(-e) ARGUMENT(Program)<Program> FLAG(-e) ARGUMENT(Program)<Program> UTILITY(wc) FLAG(-l)
ROOT(root) T(cat) T($(find) T(src/js) T(-type) T(f) T(-name) T(*.js) T(-printf) T(%d\t%p\n) T(|) T(sort) T(-n) T(|) T(sed) T(-e) T(s|[0-9]*\t||)>min.js)
ROOT(root) T(tar) T(--strip-components) T(1) T(-xvf) T(my_directory.tar.gz)
ROOT(root) T(find) T(/private/) T(2>/dev/null) T(|) T(grep) T(/Flash)
ROOT() UTILITY(mktemp) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT(root) T(grep) T(OK) T(<filename>) T(|) T(wc) T(-l)
ROOT(root) T(find) T(.) T(-iname) T(.#*) T(-print) T(|) T(while) T(read) T(-r) T(i;) T(do) T(foobar) T($i;) T(done)
ROOT() UTILITY(cat) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(rename) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-print0)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
ROOT(root) T(find) T(/home/musicuser/Music/) T(-type) T(f) T(-iname) T(*$1*) T(-iname) T(*$2*) T(-exec) T(mplayer) T({}) T(;)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-ctime) ARGUMENT(-Timespan)<Timespan> UTILITY(cpio) FLAG(-p) FLAG(-v) FLAG(-d) FLAG(-m) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(Permission)<Permission>
ROOT(root) T(find) T(.) T(-type) T(f) T(-exec) T(stat) T({}) T(+) T(>) T(/dev/null)
ROOT(root) T(find) T(.) T(-type) T(f) T(|) T(xargs) T(grep) T(string_to_find) T(-sl) T(|) T(xargs) T(perl) T(-pi) T(-w) T(-e) T(s/string_to_find//g;)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(Timespan)<Timespan> UTILITY(grep) FLAG(-v) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-v) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-v) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-mindepth) ARGUMENT(+Quantity)<Quantity> FLAG(-print)
ROOT() UTILITY(top) FLAG(-c)
ROOT() PIPELINE() UTILITY(cat) FLAG(-n) ARGUMENT(File)<File> UTILITY(sort) FLAG(-u) FLAG(-k) ARGUMENT(Number)<Number> UTILITY(sort) FLAG(-n) FLAG(-k) ARGUMENT(Number)<Number> UTILITY(cut) FLAG(-f) ARGUMENT(Number)<Number>
ROOT() UTILITY(ssh) FLAG(-i) ARGUMENT(File)<File> FLAG(-R) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-ls)
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(tr) FLAG(-c) FLAG(-d) ARGUMENT(Regex)<Regex> UTILITY(od) FLAG(-c)
ROOT() UTILITY(bind) FLAG(-P)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) FLAG(-f) ARGUMENT({})<File>
"ROOT(root) T(ps) T(aux) T(|) T(awk) T({print) T($4""\t""$11}) T(|) T(sort) T(|) T(uniq) T(-c) T(|) T(awk) T({print) T($2"") T(""$1"") T(""$3}) T(|) T(sort) T(-nr)"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type> FLAG(-print0)
ROOT() PIPELINE() UTILITY(finger) ARGUMENT(Regex)<Regex> UTILITY(awk) ARGUMENT(Program)<Program>
"ROOT(root) T(files2) T(=) T(`find) T(""$dirs"") T(-type) T(f`)"
ROOT(root) T(cp) T(-r) T(-v) T($() T(ls) T(-A) T(|) T(grep) T(-v) T(-E) T(Regex)
ROOT() PIPELINE() UTILITY(diff) FLAG(-q) ARGUMENT(File)<File> ARGUMENT(File)<File> UTILITY(cut) FLAG(-f) ARGUMENT(Number)<Number> FLAG(-d) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-exec::+) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT(root) T(su) T(-) T(jetty) T(./runprogram.sh)
ROOT() PIPELINE() UTILITY(bind) FLAG(-p) UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT(root) T(echo) T(foo) T(|) T(tee) T(>(sha1sum)) T(>(md5sum))
ROOT() PIPELINE() UTILITY(env) UTILITY(sed) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-ok::;) UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-exec::;) UTILITY(ls) FLAG(-s) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-perm) ARGUMENT(Permission)<Permission> FLAG(-print) FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::+) UTILITY(grep) FLAG(-l) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> UTILITY(wc) FLAG(-l)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
"ROOT(root) T(echo) T(hey) T(hey,) T(we're) T(the) T(monkees) T(|) T((exec) T(1>&3) T(&&) T(tee) T(/proc/self/fd/3) T(|) T(gzip) T(--stdout) T(>) T(my_log.gz))"
ROOT() UTILITY(column) FLAG(-x) FLAG(-c) ARGUMENT(Quantity)<Quantity> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(-not) BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(file) FLAG(-n) ARGUMENT({})<File> UTILITY(grep) FLAG(-v) ARGUMENT(Regex)<Regex> UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number>
ROOT() UTILITY(split) FLAG(-l) ARGUMENT(Quantity)<Quantity> ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(tree) FLAG(-p) FLAG(-u) FLAG(-g) FLAG(-f)
ROOT() UTILITY(grep) FLAG(-E) FLAG(-w) FLAG(-R) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT() UTILITY(ssh) FLAG(-F) ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(/path/to/dir/*) T(-printf) T(%T@|%p|%l) T(-exec) T(stat) T(-Lc) T(|%Y.0000000000) T({}) T(;)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::+) UTILITY(sed) FLAG(-i) ARGUMENT(Program)<Program> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(ln) FLAG(-s) ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-n) ARGUMENT(Quantity)<Quantity> FLAG(-I) ARGUMENT({})<Regex> UTILITY(cp) ARGUMENT(File)<File> ARGUMENT({})<File>
"ROOT(root) T(find) T(-name) T(*.flac) T(-exec) T(bash) T(-c) T(ffmpeg) T(-i) T(""{}"") T(-y) T(-acodec) T(libmp3lame) T(-ab) T(128k) T(""${0/.flac}.mp3"") T({}) T(;)"
ROOT() UTILITY(cat) ARGUMENT(File)<File> ARGUMENT(tee)<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(echo) ARGUMENT({})<Regex>
ROOT(root) T(find) T(.) T(-exec) T(sh) T(-c) T(echo) T({}) T(|) T(grep) T(-qi) T(/path/to/something) T(;) T(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-atime) ARGUMENT(+Timespan)<Timespan> FLAG(-exec::;) UTILITY(rm) FLAG(-i) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(xargs) FLAG(-n) ARGUMENT(Quantity)<Quantity>
ROOT(root) T(mv) T($() T(basename) T(Regex)
ROOT() PIPELINE() UTILITY(printf) ARGUMENT(%100s)<Format> UTILITY(tr) ARGUMENT(=)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-size) ARGUMENT(+Size)<Size>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print) UTILITY(xargs) FLAG(-l) FLAG(-i) FLAG(-I) ARGUMENT({})<Regex> UTILITY(wc) ARGUMENT({})<File> ARGUMENT({})<File>
ROOT(root) T(echo) T($() T(hostname)
ROOT(root) T(chmod) T(+x) T($(brew) T(--prefix)/etc/bash_completion)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-empty)
"ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-printf) ARGUMENT(""%C@ %p\n"")<Format> UTILITY(sort) FLAG(-r) UTILITY(head) FLAG(-n) ARGUMENT(Quantity)<Quantity>"
ROOT() UTILITY(chown) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-exec::+) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::+) UTILITY(ln) FLAG(-s) FLAG(-t) ARGUMENT(File)<Directory> ARGUMENT({})<File>
ROOT() UTILITY(ping) FLAG(-c) ARGUMENT(Quantity)<Quantity> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(!) FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-ctime) ARGUMENT(+Timespan)<Timespan> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(mkdir) FLAG(-p) ARGUMENT(Directory)<Directory>
ROOT() PIPELINE() UTILITY(history) UTILITY(tail) FLAG(-) ARGUMENT(Quantity)<Quantity>
"ROOT(root) T(find) T(.) T(-type) T(d) T(-print0) T(|) T(xargs) T(-0) T(-I) T({}) T(sh) T(-c) T(echo) T(""{}:) T(\c"") T(;) T(find) T({}) T(-maxdepth) T(1) T(-type) T(f) T(|) T(wc) T(-l) T(;) T(find) T({}) T(-maxdepth) T(1) T(-type) T(f) T(-print)"
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(f)<Type> UTILITY(xargs) FLAG(-x) FLAG(-I) ARGUMENT({})<Regex> UTILITY(ls) FLAG(-t) ARGUMENT({})<File> UTILITY(awk) ARGUMENT(Program)<Program> UTILITY(xargs) FLAG(-L) ARGUMENT(Quantity)<Quantity> FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(cat) FLAG(-v) FLAG(-e) ARGUMENT(File)<File>
ROOT() UTILITY(awk) FLAG(-F) ARGUMENT(Regex)<Regex> ARGUMENT(Program)<Program> ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(fold) ARGUMENT(File)<File> ARGUMENT(File)<File> UTILITY(awk) FLAG(-f) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(screen) T(-x) T(screen) T(id)
ROOT() PIPELINE() UTILITY(tac) ARGUMENT(File)<File> UTILITY(sed) ARGUMENT(Program)<Program> UTILITY(tac)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::+) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
"ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-printf) ARGUMENT(""%f accessed %AF %Ar, modified %TF %Tr\n"")<Format>"
ROOT(root) T(tr) T(-s) T(\t) T(<) T(thefile.txt) T(|) T(tr) T(\t) T(>) T(the_modified_copy.txt)
ROOT() PIPELINE() UTILITY(tac) ARGUMENT(File)<File> UTILITY(awk) ARGUMENT(Program)<Program> UTILITY(tac)
ROOT() UTILITY(mkdir) ARGUMENT(Directory)<Directory>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(grep) FLAG(-B) ARGUMENT(Quantity)<Quantity> FLAG(-A) ARGUMENT(Quantity)<Quantity> ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-inum) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(cal) FLAG(-3)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) FLAG(-r) FLAG(-f) ARGUMENT({})<File>
ROOT(root) T(find) T($HOME) T(-type) T(f) T(|) T(samefile) T(-r)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(-not) FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(alias) T(rm2g=find) T(/) T(-type) T(f) T(-name) T(*.tar) T(-size) T(+2G) T(-exec) T(rm) T(-i) T({}) T(\;)
ROOT() UTILITY(vim) COMMANDSUBSTITUTION() UTILITY(which) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(tr) FLAG(-d) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(sed) FLAG(-i) ARGUMENT(Regex)<Program> ARGUMENT(Program)<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-lname) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-exec::+) UTILITY(du) FLAG(-h) ARGUMENT({})<File> UTILITY(sort) FLAG(-h) FLAG(-r)
ROOT() UTILITY(ln) FLAG(-s) FLAG(-f) FLAG(-n) ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-newermt) ARGUMENT(Regex)<Regex> UNARYLOGICOP(!) FLAG(-newermt) ARGUMENT(Regex)<Regex> FLAG(-printf) ARGUMENT('%T@ %p\n')<Format> UTILITY(sort) FLAG(-k) ARGUMENT(Number)<Number> FLAG(-n) UTILITY(sed) ARGUMENT(Program)<Program>
ROOT() UTILITY(readlink) FLAG(-m) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(ping) FLAG(-W) ARGUMENT(Quantity)<Quantity> FLAG(-c) ARGUMENT(Quantity)<Quantity> ARGUMENT(Regex)<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(rsync) FLAG(-r) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-printf) ARGUMENT('%T+ %p\n')<Format> UTILITY(sort) UTILITY(head) FLAG(-n) ARGUMENT(Quantity)<Quantity>
ROOT(root) T(yum) T(-y) T(update)
ROOT() UTILITY(mktemp) FLAG(-d) FLAG(-t)
ROOT(root) T(find) T(/home/jassi/) T(-name) T(aliencoders.[0-9]+) T(2>&1) T(|) T(xargs) T(ls) T(-lrt) T(|) T(awk) T({print) T($9})
ROOT() UTILITY(source) PROCESSSUBSTITUTION(<) UTILITY(wget) FLAG(-q) FLAG(-O) ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT(root) T(sshpass) T(-p) T(YOUR_PASSWORD) T(ssh) T(-o) T(StrictHostKeyChecking=no) T(YOUR_USERNAME@SOME_SITE.COM)
ROOT() PIPELINE() UTILITY(rev) ARGUMENT(File)<File> UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number> UTILITY(rev)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT(root) T(screen) T(-D) T(-m) T(yourEvilProgram)
ROOT(root) T(for) T(file) T(in) T(*.html;) T(do) T(mv) T($file) T(${file%.html}.txt;) T(done)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-newer) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(d)<Type> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> BRACKET() FLAG(-type) ARGUMENT(d)<Type> FLAG(-regex) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) FLAG(-false) BINARYLOGICOP(-or) FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(basename) ARGUMENT({})<Regex> UTILITY(wc) FLAG(-l)
ROOT() UTILITY(file) FLAG(-i) ARGUMENT(File)<File>
ROOT(root) T(find) T(.) T(-type) T(f) NT(<n>) T(-perm) T(-u=x) T(-o) T(-perm) T(-g=x) T(-o) T(-perm) T(-o=x) T(-exec) T(test) T(-x) T({}) T(;) T(-print)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(du) FLAG(-h) FLAG(-c) FLAG(--files0-from) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(file) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(cat) ARGUMENT({})<File> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(split) FLAG(-l) ARGUMENT(Quantity)<Quantity> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-and) BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-delete)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(rev) UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number> UTILITY(rev)
ROOT(root) T(find) T(-type) T(d) T(-empty) T(-exec) T(rmdir) T(-vp) T(--ignore-fail-on-non-empty) T({}) T(`;`)
ROOT() PIPELINE() UTILITY(sort) ARGUMENT(File)<File> UTILITY(grep) FLAG(-v) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(tee) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(Permission)<Permission>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(basename) ARGUMENT({})<Regex> UTILITY(uniq) FLAG(-u)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(+Size)<Size>
ROOT(root) T(find) T(.) T(-type) T(f) T(-name) T(*.gz) T(-exec) T(zgrep) T(string) T({}) T(;)
ROOT() UTILITY(rsync) FLAG(-a) FLAG(-v) FLAG(-z) FLAG(--progress) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(getent) T(passwd) T(`whoami`) T(|) T(cut) T(-d) T(:) T(-f) T(5)
ROOT() UTILITY(mount) FLAG(-n) FLAG(-o) ARGUMENT(remount)<Option> ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(du) FLAG(-s) ARGUMENT(File)<File> UTILITY(sort) FLAG(-n)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(sed) FLAG(-n) ARGUMENT(Program)<Program> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(bind) FLAG(-p) UTILITY(grep) FLAG(-i) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(ln) FLAG(-s) ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(tac) ARGUMENT(File)<File> UTILITY(grep) FLAG(-m) ARGUMENT(Quantity)<Quantity> ARGUMENT(Regex)<Regex>
ROOT(root) T(time) T(sleep) T(1)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::+) UTILITY(grep) FLAG(-H) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(mktemp) FLAG(-u) FLAG(-t) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan> FLAG(-exec::;) UTILITY(grep) FLAG(-H) FLAG(-c) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> UTILITY(grep) FLAG(-v) ARGUMENT(Regex)<Regex>
ROOT() ARGUMENT(~find)<>
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(tr) FLAG(-s) ARGUMENT(Regex)<Regex> UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number>
ROOT(root) T(echo) T($() T(date)
ROOT() UTILITY(paste) FLAG(-s) FLAG(-d) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity>
"ROOT(root) T(find) T(.) T(-name) T(*.zip) T(-exec) T(sh) T(-c) T(unzip) T(-d) T(""`dirname) T(\""{}\""`"") T(""{}"") T(;)"
ROOT() UTILITY(ln) FLAG(-f) FLAG(-s) ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(ls) FLAG(-l) FLAG(-d) ARGUMENT(File)<File> ARGUMENT(File)<File> UTILITY(sed) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(!) FLAG(-path) ARGUMENT(Regex)<Regex> UNARYLOGICOP(!) FLAG(-path) ARGUMENT(Regex)<Regex> FLAG(-exec::+) UTILITY(grep) FLAG(-I) FLAG(-w) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> FLAG(-user) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(chown) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0)
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-n) ARGUMENT(Quantity)<Quantity> FLAG(-I) ARGUMENT({})<Regex> UTILITY(cp) ARGUMENT(File)<File> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-n) ARGUMENT(Quantity)<Quantity> FLAG(-P) ARGUMENT(Quantity)<Quantity> FLAG(-I) ARGUMENT({})<Regex> UTILITY(bzip2) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-uid) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mmin) ARGUMENT(+Quantity)<Quantity>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> UTILITY(tee) PROCESSSUBSTITUTION(>) UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(f)<Type> UTILITY(sort) UTILITY(tail) FLAG(-n) ARGUMENT(Quantity)<Quantity> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(md5sum) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(rev) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-exec::+) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(sort) FLAG(-n)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan>
ROOT(root) T(version=$(mvn) T(org.apache.maven.plugins:maven-help-plugin:2.1.1:evaluate) T(-Dexpression=project.version) T(|) T(egrep) T(-v) T(^\[|Downloading:) T(|) T(tr) T(-d) T(\n) T(|) T(sed) T(-E) T(s/\[.*\]//g))
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(-not) FLAG(-path) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> BRACKET() UNARYLOGICOP(!) FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(su) ARGUMENT(Regex)<Regex>
ROOT(root) T(wc) T(-l) T($(git) T(ls-files))
ROOT() PIPELINE() UTILITY(history) UTILITY(vim) FLAG(-R) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(tr) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-m) ARGUMENT(Quantity)<Quantity> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(mv) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(rm) FLAG(-r) FLAG(-f) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UTILITY(grep) FLAG(-P) ARGUMENT(Regex)<Regex> UTILITY(sed) FLAG(-r) FLAG(-e) ARGUMENT(Program)<Program> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(ls) ARGUMENT({})<File>
ROOT(root) T(find) T(dir) T(-name) T(pattern) T(2>/dev/null)
ROOT(root) T(paste) T(-d) T(Regex) T(>() T(grep) T(Regex) T(File) T(|) T(sed) T(-e) T(Program)
ROOT() UTILITY(find) FLAG(-type) ARGUMENT(d)<Type> ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> ARGUMENT({})<Path> ARGUMENT(+)<Path>
ROOT() UTILITY(mv) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(ls) UTILITY(more)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(mount) FLAG(-l) UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(sort) ARGUMENT(File)<File> ARGUMENT(File)<File> ARGUMENT(File)<File> ARGUMENT(File)<File> ARGUMENT(File)<File> ARGUMENT(File)<File> ARGUMENT(File)<File> ARGUMENT(File)<File> ARGUMENT(File)<File> ARGUMENT(File)<File> ARGUMENT(File)<File> UTILITY(more)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(grep) FLAG(-i) FLAG(-l) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-n) ARGUMENT(Quantity)<Quantity> FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-H) FLAG(-n) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> UTILITY(wc) FLAG(-l)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(grep) FLAG(--color) ARGUMENT(-aHn)<Option> ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) FLAG(-L) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-print0)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-print)
ROOT() UTILITY(read) FLAG(-p) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT(root) T(ssh) T(-n) T(Regex) T(touch) T(File)
ROOT(root) T(echo) T(Regex) T(Regex) T($() T(whoami)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
ROOT(root) T(find) T(.) T(-name) T(*.bak) T(-type) T(f) T(-atime) T(+30) T(-exec) T(csh) T(-c) T(test) T(-s) T($1:r) T(&&) T(rm) T($1) T({}) T(;)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(grep) FLAG(-l) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(rsync) FLAG(-a) FLAG(-v) FLAG(--exclude) ARGUMENT(Regex)<Regex> FLAG(--exclude) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT(root) T(count=$(grep) T(-c) T(^) T(<) T($FILE))
ROOT() PIPELINE() UTILITY(env) UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(cat) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(tree) FLAG(-i) FLAG(-f) UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-n) ARGUMENT(Quantity)<Quantity> FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-n) FLAG(-H) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(sed) ARGUMENT(Program)<Program> UTILITY(xargs) FLAG(-i) FLAG(-I) ARGUMENT({})<Regex> UTILITY(echo) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT({})<Regex> UTILITY(sh)
ROOT() UTILITY(mkdir) ARGUMENT(Directory)<Directory>
ROOT() UTILITY(echo) COMMANDSUBSTITUTION() PIPELINE() UTILITY(yes) ARGUMENT(Regex)<Regex> UTILITY(head) FLAG(-n) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-perm) ARGUMENT(Permission)<Permission> FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(nl) FLAG(-n) ARGUMENT(rz)<Format> FLAG(-w) ARGUMENT(Quantity)<Quantity> FLAG(-s) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> UTILITY(sed) ARGUMENT(Program)<Program> ARGUMENT(File)<File>
ROOT(root) T(ps) T(aux) T(|) T(awk) T({print) T($11}) T(|) T(grep) T(-x) T(-e) T(/.*) T(|) T(xargs) T(dirname)
ROOT(root) T(source) T(<(./generate_commands))
ROOT(root) T(find) T(.) T(-name) T(.git) T(-prune) T(-o) T(type) T(f) T(-name) T(*$lower1*) T(-exec) T(mmv) T(*$lower1*) T(#1$lower2#2) T({}) T(+)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(sed) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(.)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(stat) FLAG(-f) ARGUMENT(%z)<File> ARGUMENT(%N)<File> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(whoami) UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> UTILITY(sort) UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-H) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(tr) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> UTILITY(sort) FLAG(-n) FLAG(-u) FLAG(-t) ARGUMENT(Regex)<Regex> FLAG(-k) ARGUMENT(Number)<Number> FLAG(-k) ARGUMENT(Number)<Number> FLAG(-k) ARGUMENT(Number)<Number> FLAG(-k) ARGUMENT(Number)<Number> UTILITY(tr) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(/) T(-perm) T(+6000) T(-type) T(f) T(-exec) T(ls) T(-ld) T({}) T(;) T(>) T(setuid.txt) T(&)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-exec::;) UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(awk) FLAG(-f) ARGUMENT(File)<File> ARGUMENT(Program)<Program> UTILITY(column) FLAG(-t)
ROOT(root) T(cat) T(foo.md) T(|) T(pandoc) T(-f) T(markdown_github) T(|) T(lynx) T(-stdin)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(.) T(-type) T(f) T(-print0) T(|) T(xargs) T(-0) T(./group.sed) T(--separate)
ROOT(root) T(find) T(/path) T(-name) T(pattern) T(-exec) T(somecommand) T({}) T(+)
ROOT() PIPELINE() UTILITY(printf) UTILITY(ssh-keygen) FLAG(-b) ARGUMENT(1024)<Quantity> FLAG(-f) ARGUMENT(ball)<File> FLAG(-t) ARGUMENT(dsa)<Type>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-empty) FLAG(-delete)
ROOT(root) T(ssh) T(USER@REMOTE) T(cat) T(file|xclip) T(-i)
ROOT(root) T(join) T(-t) T(Regex) T(<() T(sort) T(File)
ROOT() UTILITY(chown) FLAG(-R) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan>
ROOT() PIPELINE() UTILITY(who) UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(w) UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-ls)
ROOT(root) T(cd) T(B) T(&&) T(find) T(.) T(>>) T(../tmp.txt)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-I) FLAG(-R) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-delete)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(cp) FLAG(-a) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-size) ARGUMENT(-Size)<Size>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UTILITY(sort)
ROOT() UTILITY(gzip) ARGUMENT({})<Regex>
"ROOT(root) T(find) T(.) T(...) T(-exec) T(sh) T(-c) T(printf) T(""%s\n"") T(""$1"";) T(kill) T(""$PPID"") T(sh) T({}) T(;)"
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(tr) FLAG(-d) FLAG(-c) ARGUMENT(Regex)<Regex> UTILITY(fold) FLAG(-w) ARGUMENT(Quantity)<Quantity> UTILITY(head) FLAG(-) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(whoami)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-fstype) ARGUMENT(ext3)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-ls)
ROOT() UTILITY(df) FLAG(-H) FLAG(--total) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-newer) ARGUMENT(File)<File> UNARYLOGICOP(-not) FLAG(-newer) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-ls) UTILITY(awk) ARGUMENT(Program)<Program> UTILITY(sort) FLAG(-r) FLAG(-n) UTILITY(head)
ROOT(root) T([[) T(!) T(-z) T(`find) T(Dir/) T(-name) T(something`) T(]]) T(&&) T(echo) T(found) T(||) T(echo) T(not) T(found)
ROOT() PIPELINE() UTILITY(crontab) FLAG(-l) UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-regex) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-and) UNARYLOGICOP(-not) FLAG(-regex) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(Path) T($() T(pwd)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(grep) FLAG(-E) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> UTILITY(grep) FLAG(-v) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-daystart) FLAG(-mtime) ARGUMENT(Timespan)<Timespan>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(f)<Type> FLAG(-daystart) FLAG(-mtime) ARGUMENT(-Timespan)<Timespan>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-not) FLAG(-path) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() UTILITY(tree) FLAG(-p)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-and) FLAG(-ctime) ARGUMENT(-Timespan)<Timespan> FLAG(-exec::;) UTILITY(ln) ARGUMENT({})<File> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() PIPELINE() UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number> ARGUMENT(File)<File> UTILITY(sort)
ROOT() UTILITY(touch) FLAG(-t) ARGUMENT(DateTime)<DateTime> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(cal) FLAG(-m) ARGUMENT(DateTime)<DateTime> ARGUMENT(DateTime)<DateTime> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT(root) T([[) T($(find) T(/path/to/file) T(-type) T(f) T(-size) T(+51200c) T(2>/dev/null)) T(]]) T(&&) T(echo) T(true) T(||) T(echo) T(false)
ROOT(root) T(find) T(.) T(-name) T(filename) T(including) T(space) T(-print0) T(|) T(tee) T(my_teed_file) T(|) T(xargs) T(-0) T(ls) T(-aldF) T(>) T(log.txt)
ROOT(root) T(cal) T(-h) T(|) T(sed) T(s/\<$(date) T(+%d)\>/$\033\[94m&\033\[0m/g)
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(rev)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::+) UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-newermt) ARGUMENT(Regex)<Regex> UNARYLOGICOP(!) FLAG(-newermt) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0)
ROOT(root) T(find) T(.) T(-name) T(openssl) T(2>&1) T(|) T(sed) T(/Permission) T(denied/d;)
ROOT(root) T(ifconfig) T($(netstat) T(-rn) T(|) T(grep) T(-E) T(^default|^0.0.0.0) T(|) T(head) T(-1) T(|) T(awk) T({print) T($NF})) T(|) T(grep) T(inet) T(|) T(awk) T({print) T($2}) T(|) T(grep) T(-Eo) T(([0-9]*\.){3}[0-9]*)
ROOT() UTILITY(dig) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT(o-o.myaddr.l.google.com)<Type> ARGUMENT(@8.8.8.8)<Option>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(file) ARGUMENT(File)<File> UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT(root) T(tar) T(cvf) T(-) T(`find) T(.) T(-print`) T(>) T(backup.tar)
ROOT(root) T(ls) T(-d) T(!(*@(.c|.h)))
ROOT(root) T(alias) T(la=ls) T(-a) T(-l)
ROOT() UTILITY(readlink) FLAG(-e) ARGUMENT(File)<File>
ROOT() UTILITY(date)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> BRACKET() FLAG(-user) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT(root) T(./series.bc) T(|) T(tr) T(-d) T(\n) T(|) T(sed) T(s.\\..g)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(!) FLAG(-perm) ARGUMENT(Permission)<Permission>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(head) FLAG(-) ARGUMENT(Quantity)<Quantity> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(mv) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(join) FLAG(-t) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(comm) FLAG(-1) FLAG(-3) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT(root) T(echo) T($(false;) T(echo) T(foo))
ROOT(root) T(diff) T(<() T(sort) T(File)
ROOT() PIPELINE() UTILITY(tac) ARGUMENT(File)<File> UTILITY(sed) ARGUMENT(Program)<Program> UTILITY(tac)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UTILITY(grep) FLAG(-i) ARGUMENT(Regex)<Regex> UTILITY(sort) UTILITY(tee) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(history) UTILITY(sed) ARGUMENT(Program)<Program>
ROOT(root) T(unset) T(DUALCASE)
ROOT() PIPELINE() UTILITY(cal) UTILITY(sed) FLAG(-e) ARGUMENT(Program)<Program> FLAG(-e) ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(fold) FLAG(-w) ARGUMENT(Quantity)<Quantity> UTILITY(head) FLAG(-n) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-size) ARGUMENT(-Size)<Size> FLAG(-print)
ROOT() PIPELINE() UTILITY(grep) FLAG(-a) FLAG(-r) FLAG(-e) ARGUMENT(Regex)<Regex> FLAG(--include) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> UTILITY(md5sum) UTILITY(cut) FLAG(-c) ARGUMENT(-Number)<Number>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-mtime) ARGUMENT(Timespan)<Timespan>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> ARGUMENT({})<File> UTILITY(wc) FLAG(--bytes)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-atime) ARGUMENT(Timespan)<Timespan>
ROOT() UTILITY(tail) FLAG(-) ARGUMENT(Quantity)<Quantity> PROCESSSUBSTITUTION(<) UTILITY(sort) ARGUMENT(File)<File>
ROOT() UTILITY(chown) COMMANDSUBSTITUTION() UTILITY(stat) FLAG(-c) ARGUMENT(%U)<Regex> ARGUMENT(originalfile)<File> UTILITY(stat) FLAG(-c) ARGUMENT(%G)<Regex> ARGUMENT(originalfile)<File> ARGUMENT(newfile)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-f) PROCESSSUBSTITUTION(<) UTILITY(sed) ARGUMENT(Program)<Program> ARGUMENT(File)<File>
"ROOT(root) T(find) T(.performance_test) T(-not) NT(<n>) T(-path) T(.performance_test/prune_me) T(-prune) T(-exec) T(bash) T(-c) T(echo) T(""$0"") T({}) T(;)"
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(mv) FLAG(--target-directory) ARGUMENT(Directory)<Directory> ARGUMENT({})<File>
ROOT() UTILITY(md5sum) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(rm) FLAG(-f) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(echo) FLAG(-n) ARGUMENT(Regex)<Regex> UTILITY(md5sum) UTILITY(tr) FLAG(-d) ARGUMENT(Regex)<Regex>
ROOT(root) T(cat) T($() T(which) T(Regex)
ROOT(root) T(sort) T(<() T(ls) T(File)
ROOT() UTILITY(chown) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(!) FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(shopt) FLAG(-s) ARGUMENT(cmdhist)<Option>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(tar) FLAG(-r) FLAG(-v) FLAG(-f) ARGUMENT(File)<File> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-path) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(chmod) FLAG(-R) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT(root) T(find) T(.) T(-name) T(*.txt) T(-exec) T(process) T({}) T(+)
ROOT() UTILITY(column) FLAG(-t) FLAG(-s) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
"ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-printf) ARGUMENT(""mv '%h/%f' '%h/lib%f'\n"")<Format> UTILITY(sh)"
ROOT(root) T(ln) T(-f) T(-s) T(-T) T($() T(readlink) T(File) T(|) T(sed) T(Program)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(grep) FLAG(-s) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> FLAG(-print)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print) UTILITY(head) FLAG(-n) ARGUMENT(Quantity)<Quantity>
ROOT(root) T(ssh) T(remote_host) T(test) T(-f) T(/path/to/file) T(&&) T(echo) T(found) T(||) T(echo) T(not) T(found)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-atime) ARGUMENT(+Timespan)<Timespan> BINARYLOGICOP(-or) FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-print)
ROOT() UTILITY(mkdir) FLAG(-p) ARGUMENT(Directory)<Directory> ARGUMENT(Directory)<Directory> ARGUMENT(Directory)<Directory>
ROOT() UTILITY(ln) FLAG(-s) FLAG(-f) ARGUMENT(File)<File> COMMANDSUBSTITUTION() UTILITY(basename) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(w) UTILITY(awk) ARGUMENT(Program)<Program> UTILITY(sed) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(/) T(-type) T(f) T(-name) T(dummy) T(2>/dev/null)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-group) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(shopt) FLAG(-s) ARGUMENT(compat31)<Option>
ROOT() UTILITY(split) FLAG(-l) ARGUMENT(Quantity)<Quantity> ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT(root) T(cat) T(infile) T(|) T(dos2unix) T(-U) T(|) T(od) T(-c)
ROOT() PIPELINE() UTILITY(ifconfig) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-E) FLAG(-o) FLAG(-i) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(l)<Type>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan>
"ROOT(root) T(alias) T(s=it=$($(history) T(|) T(tail) T(-2) T(|) T(head) T(-1) T(|) T(cut) T(-d"") T("") T(-f4-)))"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-exec::+) UTILITY(mv) FLAG(-t) ARGUMENT(Directory)<Directory> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> UNARYLOGICOP(-not) FLAG(-iwholename) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print)
ROOT() UTILITY(bzip2) FLAG(-k) FLAG(-v) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(tail) FLAG(-n) ARGUMENT(+Quantity)<Quantity> ARGUMENT(File)<File> UTILITY(head) FLAG(-n) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(comm) FLAG(-2) FLAG(-3) ARGUMENT(File)<File> ARGUMENT(File)<File>
"ROOT(root) T(tail) T(-f) T(/path/to/log) T(|) T(perl) T(-pne) T(print) T(scalar(localtime()),) T("") T("";) T(>) T(/path/to/log-with-timestamps)"
ROOT(root) T(join) T(-j) T(2) T(-o) T(1.1) T(1.2) T(2.1) T(<(sort) T(-k2) T(1)) T(<(sort) T(-k2) T(2))
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(mv) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> UTILITY(wc) FLAG(-l)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-user) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(read) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number> ARGUMENT(File)<File> UTILITY(uniq) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-m) ARGUMENT(Quantity)<Quantity> ARGUMENT({})<Regex> ARGUMENT(File)<File>
ROOT() UTILITY(groups) ARGUMENT(Regex)<Regex>
ROOT(root) T(awk) T(-f) T($() T(which) T(Regex)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(f)<Type> UTILITY(wc) FLAG(-l)
ROOT() UTILITY(ssh) FLAG(-o) ARGUMENT(ConnectTimeout=3)<Option> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(set) FLAG(-e) FLAG(-x)
ROOT(root) T(find) T(.) T(-name) T(*.fq.gz) T(-exec) T(gunzip) T(-c) T({}) T(;) T(|) T(fastqc) T(/dev/stdin)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-atime) ARGUMENT(Timespan)<Timespan>
ROOT(root) T(exec) T(2) T(|) T(tee) T(${LOG_FILE})
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-perm) ARGUMENT(Permission)<Permission> FLAG(-print)
ROOT() UTILITY(su) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(echo) ARGUMENT({})<Regex> BINARYLOGICOP(-or) FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(echo) ARGUMENT({})<Regex>
ROOT() PIPELINE() UTILITY(ls) UTILITY(sort) FLAG(-f) UTILITY(uniq) FLAG(-i) FLAG(-d)
ROOT() UTILITY(date) ARGUMENT(+'%d%m%Y-%H-%M')<Format> ARGUMENT(whoami)<Format>
ROOT(root) T(find) T(-depth) T(-type) T(d) T(|) T(while) T(read) T(dir;) T(do) T([[) T(!) T($prev) T(=~) T($dir) T(]]) T(&&) T(echo) T(${dir}) T(;) T(prev=$dir;) T(done)
ROOT(root) T(find) T(plsql) T(-type) T(f) T(-perm) T(-ug=rw) T(-exec) T(ls) T(-l) T({}) T(;) T(2>/dev/null)
ROOT(root) T(screen) T(-d) T(-m) T(sh) T(-c) T(while) T(:;) T(do) T(./myCommand;) T(done;)
ROOT() UTILITY(cd) COMMANDSUBSTITUTION() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type> UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(which) FLAG(-a) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(readlink) FLAG(-f) ARGUMENT({})<File> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(file) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(grep) FLAG(-f) ARGUMENT(File)<File> ARGUMENT(Regex)<Regex> UTILITY(sort) UTILITY(uniq)
ROOT(root) T(yum) T(install) T(packagename)
ROOT() UTILITY(rmdir) ARGUMENT(Directory)<Directory>
ROOT() UTILITY(source) COMMANDSUBSTITUTION() UTILITY(dirname) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> BRACKET() FLAG(-iname) ARGUMENT(Regex)<Regex> UNARYLOGICOP(!) FLAG(-perm) ARGUMENT(-Permission)<Permission>
ROOT() UTILITY(cat) FLAG(-v) FLAG(-e) FLAG(-t) ARGUMENT(File)<File>
ROOT(root) T(find) T(.) T(-type) T(f) T(-print0) T(|) T(xargs) T(-0) T(perl) T(-pi) T(-e) T(s/) T(+$//)
ROOT(root) T(find) T(/dump) T(-type) T(f) T(-name) T(*.xml) T(-exec) T(java) T(-jar) T(ProcessFile.jar) T({}) T(;)
ROOT() UTILITY(tar) FLAG(-x) FLAG(-p) FLAG(-v) FLAG(-f) ARGUMENT(File)<File> FLAG(-C) ARGUMENT(Directory)<Directory>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> UTILITY(awk) FLAG(-F) ARGUMENT(Regex)<Regex> ARGUMENT(Program)<Program> UTILITY(sort) FLAG(-k) ARGUMENT(Number)<Number> FLAG(-n) FLAG(-r) UTILITY(awk) ARGUMENT(Program)<Program> UTILITY(sed) ARGUMENT(Program)<Program> UTILITY(xargs) FLAG(-n) ARGUMENT(Quantity)<Quantity> FLAG(-I) ARGUMENT({})<Regex> UTILITY(mv) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-regex) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(dir/) T(-type) T(f) T(-exec) T(mv) T({}) T($(echo) T({}.fix) T(|) T(iconv) T(-f) T(UTF8) T(-t) T(ASCII//TRANSLIT)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(find) ARGUMENT({})<Path> FLAG(-type) ARGUMENT(f)<Type>
ROOT() UTILITY(echo) COMMANDSUBSTITUTION() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(sort) UTILITY(uniq) UTILITY(wc) FLAG(-l)
ROOT(root) T(find) T(.) T(-type) T(f) T(-exec) T(grep) T(-l) T(ExtJSLogin) T({}) T(;) T(|) T(grep) T(-v) T(change-app-name.sh) T(>) T(files.txt)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(-Permission)<Permission> FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() UTILITY(diff) FLAG(-y) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UNARYLOGICOP(!) FLAG(-perm) ARGUMENT(Permission)<Permission> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() UTILITY(basename) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print) FLAG(-exec::;) UTILITY(cat) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-l) FLAG(-E) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rmdir) ARGUMENT({})<Directory>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-newer) ARGUMENT(File)<File>
"ROOT(root) T(find) T(/dir/dir) T(-type) T(f) T(-mtime) T(+540) T(-mtime) T(-720) T(-printf) T(”%p”,”%s”,”%AD”,|”%TD”\n) T(>) T(/dir/dir/output.csv)"
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(chmod) FLAG(-R) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type>
ROOT() UTILITY(mkdir) FLAG(-p) ARGUMENT(Directory)<Directory>
ROOT() UTILITY(mkdir) FLAG(-p) ARGUMENT(Directory)<Directory>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(.)<Path> FLAG(-name) ARGUMENT(*.txt)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<ReservedWord> UTILITY(zip) ARGUMENT(-9)<File> ARGUMENT(txt.zip)<File> ARGUMENT({})<ReservedWord>
ROOT(root) T(find) T(/tmp/foo) T(-exec) T(/tmp/echoargs) T({}) T(+)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-regex) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(sort) FLAG(-r)
ROOT() PIPELINE() UTILITY(cat) FLAG(-n) ARGUMENT(File)<File> UTILITY(tail) FLAG(-n) ARGUMENT(Quantity)<Quantity> UTILITY(cut) FLAG(-f) ARGUMENT(Number)<Number> UTILITY(xargs)
ROOT(root) T(if) T(find) T(`echo) T($some_dir`) T(-maxdepth) T(0) T(-empty) T(|) T(read) T(v;) T(then) T(echo) T(Empty) T(dir;) T(fi)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(!) FLAG(-regex) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UNARYLOGICOP(-not) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-exec::;) UTILITY(ls) ARGUMENT({})<File>
ROOT(root) T(find) T(/) T(-type) T(f) T(-size) T(-10k) T(2>/dev/null) T(-print0) T(|) T(xargs) T(-0) T(egrep) T(\bsomeknowncontent\b)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print) ARGUMENT(Path)<Path> UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(cp) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT(root) T(find) T(.) T(-type) T(f) T(-name) T(*html) T(-exec) T(perl) T(-pi) T(-e) T(s|pibeta.psi.ch/~stefan|midas.psi.ch/~stefan|g) T({}) T(;)
ROOT() UTILITY(chgrp) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT(root) T(find) T(/) T(-maxdepth) T(1) T(-xdev) T(-type) T(f|xargs) T(grep) T(-l) T(string|) T(xargs) T(perl) T(-pi) T(-e) T(s/.*\n//g)
ROOT(root) T(yes) T(Hidden) T(|) T(dd) T(of=/dev/sdb)
ROOT(root) T(find) T(-name) T(file_*) T(-follow) T(-type) T(f) T(-exec) T(zcat) T({}) T(;) T(|) T(agrep) T(-dEOE) T(grep)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(sed) FLAG(-i) ARGUMENT(Program)<Program> ARGUMENT(File)<File> ARGUMENT(File)<File> ARGUMENT({})<File>
ROOT(root) T(rsync) T(-a) T(-z) T(-P) T(-e) T(ssh) T(-p) T(Regex) T(File) T(File)
ROOT(root) T(cat) T(filname) T(|) T(lua) T(-e) T(sum) T(=) T(0;for) T(i) T(in) T(io.lines()) T(do) T(sum=sum+i) T(end) T(print(sum))
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(l)<Type> FLAG(-exec::;) UTILITY(cp) ARGUMENT({})<File> ARGUMENT(File)<File> FLAG(-exec::;) UTILITY(mv) ARGUMENT(File)<File> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan> FLAG(-print)
ROOT() UTILITY(cd) COMMANDSUBSTITUTION() PIPELINE() UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> UTILITY(cut) FLAG(-f) ARGUMENT(Number)<Number> FLAG(-d) ARGUMENT(Regex)<Regex> UTILITY(tr) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT(root) T(ps) T(-p) T($$)
"ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-printf) ARGUMENT(""\t- It seems that %p wasn't modified during last 30 day\n"")<Format>"
ROOT() PIPELINE() UTILITY(ls) FLAG(-d) ARGUMENT(File)<File> UTILITY(sed) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-ctime) ARGUMENT(+Timespan)<Timespan>
ROOT(root) T(alias) T(j7=JAVA_HOME=`/usr/libexec/java_home) T(-v) T(1.7`)
ROOT(root) T(find) T($DIR) T(-name) T(*.mod) T(-type) T(f) T(-exec) T(remodup) T({}) T(;)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-cnewer) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(Size)<Size>
ROOT() UTILITY(set) FLAG(-o) ARGUMENT(noclobber)<Option>
ROOT(root) T(find) T(.) T(-type) T(f) T(-exec) T(grep) T(California) T({}) T(;) T(-print) T(|) T(grep) T(surfboard) T(>) T(SurfsUp.txt)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(f)<Type> UNARYLOGICOP(-not) FLAG(-regex) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(rsync) FLAG(-a) FLAG(--relative) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::+) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> ARGUMENT(Path)<Path>
ROOT() UTILITY(mount) FLAG(-o) ARGUMENT(bind)<Option> ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT(root) T(ln) T(-s) T($() T(ls) T(-r) T(-t) T(File) T(|) T(tail) T(-n) T(Quantity)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-path) ARGUMENT(Regex)<Regex> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT(root) T(chown) T(-R) T($() T(whoami)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-print0)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::+) UTILITY(grep) FLAG(-H) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(sed) ARGUMENT(Program)<Program>
ROOT(root) T(join) T(<() T(sort) T(File)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> ARGUMENT(Path)<Path> BRACKET() FLAG(-path) ARGUMENT(Regex)<Regex> ARGUMENT(Path)<Path> BINARYLOGICOP(-or) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> UNARYLOGICOP(-prune) ARGUMENT(Path)<Path> BINARYLOGICOP(-or) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() PIPELINE() UTILITY(gzip) FLAG(-c) ARGUMENT(Regex)<Regex> UTILITY(split) FLAG(-b) ARGUMENT(Size)<Size> ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
"ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type> FLAG(-printf) ARGUMENT(""%p %TY-%Tm-%Td %TH:%TM:%TS %Tz\n"")<Format>"
ROOT() UTILITY(readlink) COMMANDSUBSTITUTION() UTILITY(which) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(cp) FLAG(-a) FLAG(-v) FLAG(--target-directory) ARGUMENT(Directory)<Directory> FLAG(--parents) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-printf) ARGUMENT('%s\n')<Format> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(pstree) FLAG(-s) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(ifconfig) UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-v) ARGUMENT(Regex)<Regex> UTILITY(awk) FLAG(-F) ARGUMENT(Regex)<Regex> ARGUMENT(Program)<Program> UTILITY(awk) ARGUMENT(Program)<Program> UTILITY(head) FLAG(-) ARGUMENT(Quantity)<Quantity>
ROOT(root) T(find) T(/) T(-name) T(xyzzy) T(-print0) T(>) T(list)
ROOT() UTILITY(chgrp) FLAG(-R) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT(root) T(comm) T(-1) T(-3) T(<() T(grep) T(Regex) T(File) T(|) T(sort)
ROOT() UTILITY(tree) FLAG(-C) FLAG(-s) FLAG(-u)
ROOT() UTILITY(basename) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(Timespan)<Timespan>
ROOT(root) T(rpm) T(-qf) T(`which) T(sort`)
ROOT() PIPELINE() UTILITY(set) UTILITY(grep) FLAG(-A) ARGUMENT(Quantity)<Quantity> ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-m) ARGUMENT(Quantity)<Quantity> FLAG(-B) ARGUMENT(Quantity)<Quantity> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(du) FLAG(-h) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(fold) ARGUMENT(File)<File> UTILITY(wc) FLAG(-l)
ROOT(root) T(echo) T($() T(dirname) T($() T(readlink) T(-e) T(File)
"ROOT(root) T(find) T(.) T(-type) T(f) T(-exec) T(bash) T(-c) T(f=""{}"";) T(echo) T(""${f:2}"") T(;)"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-ls) FLAG(-delete)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) FLAG(-r) FLAG(-f) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(mkdir) ARGUMENT({})<Directory>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-user) ARGUMENT(Regex)<Regex>
ROOT(root) T(tail) T(-f) T(file) T(|) T(stdbuf) T(-o0) T(grep) T(my_pattern)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-and) UNARYLOGICOP(-not) FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> BRACKET() FLAG(-iname) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-and) FLAG(-perm) ARGUMENT(-Permission)<Permission>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-depth) FLAG(-type) ARGUMENT(d)<Type> FLAG(-exec::;) UTILITY(rmdir) ARGUMENT({})<Directory>
ROOT() UTILITY(split) FLAG(-C) ARGUMENT(Size)<Size> FLAG(-d) ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(dig) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT(soa)<Type> ARGUMENT(yahoo.com)<Option> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-iname) ARGUMENT(Regex)<Regex> UNARYLOGICOP(!) FLAG(-path) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-iname) ARGUMENT(Regex)<Regex> UNARYLOGICOP(!) FLAG(-path) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(file) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(zcat) ARGUMENT(Regex)<Regex> UTILITY(cut) FLAG(-f) ARGUMENT(Number)<Number> FLAG(-d) ARGUMENT(Regex)<Regex> UTILITY(sort) UTILITY(uniq) FLAG(-c) UTILITY(sort) FLAG(-n)
ROOT(root) T(tmpdir=$(mktemp) T(-d)) T(&&) T(cd) T($tmpdir)
ROOT(root) T(echo) T($(() NT(<n>) T($(date) T(-ud) T(2003-08-02) T(17:24:33) T(+%s)) T(-) T($(date) T(-ud) T(2003-04-21) T(22:55:02) T(+%s)) T()/60/60/24) T())) T(days)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() UTILITY(ssh) ARGUMENT(Regex)<Regex> FLAG(-M) FLAG(-S) ARGUMENT(Path)<Path> FLAG(-N)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(!) FLAG(-newermt) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(cat) T(mail.tmp) T(|) T(mail) T(-r) T(noreply@$(hostname)) T(-s) T(Config) T(done!) T(${MAIL})
ROOT(root) T(alias) T(jump=cd) T($(myscript.sh))
ROOT(root) T(seq) T($() T(tail) T(-) T(Quantity) T(File)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-daystart) FLAG(-mtime) ARGUMENT(+Timespan)<Timespan>
ROOT() UTILITY(od) FLAG(--read-bytes) ARGUMENT(Size)<Size> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::+) UTILITY(du) FLAG(-S) FLAG(-h) ARGUMENT({})<File> UTILITY(sort) FLAG(-r) FLAG(-h) UTILITY(head) FLAG(-n) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(sed) FLAG(-i) ARGUMENT(Program)<Program> ARGUMENT(File)<File>
ROOT(root) T(sudo) T(yum) T(update) T(--skip-broken)
ROOT(root) T(find) T(/project/directory) T(-iname) T(*.php) T(-or) T(-iname) T(*.phtml) T(|) T(grep) T(-iv) T(/some/directory) T(|) T(xargs) T(xgettext)
ROOT() UTILITY(su) FLAG(-l)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(.)<Path> FLAG(-maxdepth) ARGUMENT(1)<Quantity> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<ReservedWord> UTILITY(stat) FLAG(-c) ARGUMENT(%i)<Regex> ARGUMENT(%n)<File> ARGUMENT({})<ReservedWord>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(bind) FLAG(-q) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT(root) T(screen) T(-x) T($PROCESS) T(-p) T(0) T(-X) T(stuff) T(`printf) T(stop\r`)
ROOT(root) T(echo) T($() T(dirname) T($() T(readlink) T(-m) T(File)
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(sed) ARGUMENT(Program)<Program> UTILITY(rev) UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number> UTILITY(rev) UTILITY(cut) FLAG(-c) ARGUMENT(Number)<Number>
ROOT(root) T(nohup) T(cmd1) T(|) T(cmd2) T(&)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type>
ROOT() PIPELINE() UTILITY(df) FLAG(-P) ARGUMENT(File)<File> UTILITY(tail) FLAG(-) ARGUMENT(Quantity)<Quantity> UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number>
"ROOT(root) T(ps) T(aux) T(|) T(awk) T({print) T($2,) T($4,) T($11}) T(|) T(sort) T(-k2rn) T(|) T(head) T(-n) T(10)"
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(gzip) FLAG(-l) ARGUMENT({})<Regex> UTILITY(awk) ARGUMENT(Program)<Program> UTILITY(grep) FLAG(-v) ARGUMENT(Regex)<Regex> UTILITY(sort) FLAG(-n) UTILITY(tail) FLAG(-) ARGUMENT(Quantity)<Quantity>
ROOT(root) T(unset) T(`env) T(|) T(awk) T(-F=) T(/^\w/) T({print) T($1}) T(|) T(xargs`)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> ARGUMENT({})<File>
ROOT(root) T(dmidecode) T(|) T(more)
ROOT() PIPELINE() UTILITY(ls) FLAG(-l) ARGUMENT(File)<File> UTILITY(sed) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan>
ROOT(root) T(cat) T(~/.bashrc) T(|) T(pbcopy)
ROOT() UTILITY(mkdir) ARGUMENT(Directory)<Directory> ARGUMENT(Directory)<Directory>
ROOT() UTILITY(tr) FLAG(-c) FLAG(-s) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(scp) ARGUMENT(File)<File> ARGUMENT({})<File>
ROOT(root) T(find) T($STARTDIR) T(-name) T(*.ps) T(-print) T(|) T(sed) T(-e) T(s/.ps$//) T(|) T(xargs) T(-l) T(-i) T(ps2pdf) T({}.ps)
ROOT() UTILITY(chmod) ARGUMENT(Permission)<Permission> COMMANDSUBSTITUTION() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-exec::;) UTILITY(chmod) ARGUMENT(+Permission)<Permission> ARGUMENT({})<File>
ROOT() UTILITY(ssh) FLAG(-O) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(watch) FLAG(-n) ARGUMENT(5)<Quantity> UTILITY(wget) FLAG(-q) FLAG(-O) ARGUMENT(-)<File> ARGUMENT(http://fake.link/file.txt)<Regex> UTILITY(tail)
ROOT() UTILITY(su) ARGUMENT(Regex)<Regex> FLAG(-s) ARGUMENT(/bin/ksh)<Option>
ROOT() PIPELINE() UTILITY(grep) FLAG(-b) FLAG(-o) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> UTILITY(less)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) FLAG(-v) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> UTILITY(wc) FLAG(-l)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-atime) ARGUMENT(+Timespan)<Timespan>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> ARGUMENT(Path)<Path>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-perm) ARGUMENT(Permission)<Permission> FLAG(-exec::;) UTILITY(ls) FLAG(-l) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(ifconfig) UTILITY(awk) FLAG(-F) ARGUMENT(Regex)<Regex> ARGUMENT(Program)<Program>
ROOT(root) T(mail) T(-s) T(Alert:) T(SSH) T(Access) T(from) T(`who) T(|) T(cut) T(-d'(') T(-f2) T(|) T(cut) T(-d')') T(-f1`) T(-a) T(tmpfile) T(user@example.com)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> BRACKET() FLAG(-exec::;) UTILITY(chgrp) FLAG(-v) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> BINARYLOGICOP(-or) FLAG(-exec::;) UTILITY(chmod) FLAG(-v) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() UTILITY(mv) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::+) UTILITY(sed) FLAG(-i) ARGUMENT(Program)<Program> ARGUMENT({})<File>
ROOT() UTILITY(split) FLAG(-a) ARGUMENT(Quantity)<Quantity> FLAG(-d) FLAG(-l) ARGUMENT(Quantity)<Quantity> ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-path) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-printf) ARGUMENT('%h\n')<Format>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) FLAG(-f) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> BRACKET() BRACKET() FLAG(-path) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(d)<Type> BINARYLOGICOP(-or) FLAG(-path) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-type) ARGUMENT(f)<Type> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(f)<Type> FLAG(-delete)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(tar) FLAG(-c) FLAG(-v) FLAG(-z) FLAG(-f) ARGUMENT(File)<File> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(echo) COMMANDSUBSTITUTION() UTILITY(cat)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(wc) FLAG(-l) UTILITY(tr) FLAG(-d) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(hostname) FLAG(-I) UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number>
ROOT(root) T(find) T(/) T(-name) T(*.dbf) T(-exec) T(dirname) T({}) T(;) T(2>) T(/dev/null) T(|) T(sort) T(-u)
ROOT(root) T(find) T(<file) T(path>) T(-name) T(myFile.*) T(-exec) T(rm) T(-f) T({}) T(;)
ROOT() PIPELINE() UTILITY(ls) FLAG(-a) UTILITY(tee) ARGUMENT(File)<File>
ROOT() UTILITY(rm) FLAG(-f) FLAG(-R) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-execdir::+) UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(last) T(-i) T(|) T(grep) T($(whoami)) T(|) T(grep) T(still) T(logged) T(in)
ROOT() UTILITY(chmod) ARGUMENT(Permission)<Permission> COMMANDSUBSTITUTION() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type>
"ROOT() UTILITY(find) FLAG(-L) ARGUMENT(Path)<Path> FLAG(-printf) ARGUMENT(""%TY%Tm%Td%TH%TM%TS|%p\n"")<Format>"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(ls) FLAG(-1) UTILITY(tr) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-exec::;) UTILITY(ls) FLAG(-l) FLAG(-h) ARGUMENT({})<File> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(df) ARGUMENT(File)<File> FLAG(-B) ARGUMENT(Size)<Size> UTILITY(tail) FLAG(-) ARGUMENT(Quantity)<Quantity> UTILITY(awk) ARGUMENT(Program)<Program> UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number>
"ROOT(root) T(find) T(.) T(-maxdepth) T(1) T(-type) T(d) T(-print0) T(|) T(xargs) T(-0) T(-I) T({}) T(sh) T(-c) T(echo) T(-e) T($(find) T(""{}"") T(-printf) T(""\n"") T(|) T(wc) T(-l)) T(""{}"") T(|) T(sort) T(-n)"
ROOT(root) T(find) T(.) T(-name) T(heapdump*) T(-exec) T(rm) T({}) T(;) T(-print) T(>delete.txt)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
"ROOT(root) T(ssh) T(askapache) T(nohup) T(sh) T(-c) T(""() NT(<n>) T(chown) T(-R) T(ask:ask) T(/www/askapache.com) T(&>/dev/null) T(&) T()"")"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-not) FLAG(-path) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT(root) T(find) T($(pwd)) T(-name) T(YourProgram) T(-exec) T(dirname) T({}) T(;) T(|) T(while) T(read) T(d;) T(do) T(cd) T($d) T(&&) T(./YourPrgram;) T(done)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-n) ARGUMENT(Quantity)<Quantity> FLAG(-P) ARGUMENT(Quantity)<Quantity> FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-H) FLAG(-n) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT(root) T(somecommand) T(|) T(true)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type> UTILITY(awk) ARGUMENT(Program)<Program> UTILITY(xargs) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-I) ARGUMENT({})<Regex> UTILITY(tar) FLAG(-c) FLAG(-z) FLAG(-f) ARGUMENT(File)<File> ARGUMENT({})<File>
ROOT() UTILITY(ln) FLAG(-d) ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UNARYLOGICOP(!) FLAG(-perm) ARGUMENT(Permission)<Permission>
ROOT(root) T(find) T(.) T(-type) T(d) T(|) T(sort) T(|) T(xargs) T(-n1) T(-I{}) T(bash) T(-c) T(find) T({}) T(-type) T(f) T(-maxdepth) T(1) T(-executable) T(|) T(sort) T(-r)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(f)<Type> FLAG(-regex) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-not) FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(basename) COMMANDSUBSTITUTION() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(tr) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-ctime) ARGUMENT(-Timespan)<Timespan> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(mv) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT(root) T(find) T(/base/path/of/proj/d‌​ata) T(-name) T(target.txt) T(|) T(xargs) T(simpleGrepScript.sh) T(>) T(overallenergy.out)
ROOT() UTILITY(comm) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT(root) T(source) T(<(export) T(|) T(sed) T(s/gcc.4.2/gcc64/g))
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-l) FLAG(-i) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT(root) T(brew) T(doctor)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-user) ARGUMENT(Regex)<Regex> FLAG(-perm) ARGUMENT(-Permission)<Permission> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(Size)<Size> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(dirname) ARGUMENT(Regex)<Regex> ARGUMENT(basename)<Regex> ARGUMENT(Regex)<Regex> UTILITY(tr) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() UTILITY(jobs) FLAG(-l)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-r) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-L) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT(root) T(yes) T(2>/dev/null) T(|) T(./MyScript.sh)
"ROOT(root) T(find) T(~/junk) T(-exec) T(touch) T(~/junk/cart{1,2,3,4,5,6}) T({}) T(;) T(2>) T(/dev/null)"
ROOT(root) T(comm) T(-3) T(<() T(sort) T(-u) T(-n) T(File)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-depth) FLAG(-print) UTILITY(cpio) FLAG(-d) FLAG(-u) FLAG(-m) FLAG(-p) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(ping) ARGUMENT(Regex)<Regex> FLAG(-n) ARGUMENT(Regex)<Regex> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT(root) T(find) T(/etc) T(-type) T(f) T(-print0) T(2>/dev/null) T(|) T(xargs) T(-0) T(grep) T(--color=AUTO) T(-Hn) T(nameserver) T(2>/dev/null)
ROOT(root) T(rpm2cpio) T(packagename) T(|) T(cpio) T(-ivd)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-iregex) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-iregex) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(ifconfig) UTILITY(grep) FLAG(-v) ARGUMENT(Regex)<Regex> UTILITY(sed) FLAG(-n) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-depth) FLAG(-type) ARGUMENT(d)<Type> FLAG(-empty) FLAG(-exec::;) UTILITY(rmdir) ARGUMENT({})<Directory>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(sed) FLAG(-i) ARGUMENT(Regex)<Program> ARGUMENT(Program)<File> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(grep) FLAG(-H) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT(root) T(alias) T(rm5g=find) T(/) T(-type) T(f) T(-name) T(*.tar) T(-size) T(+5G) T(-exec) T(rm) T(-i) T({}) T(\;)
ROOT() UTILITY(ls) FLAG(-l) FLAG(-d) COMMANDSUBSTITUTION() UTILITY(find) ARGUMENT(Path)<Path>
ROOT(root)
"ROOT(root) T(find) T(.) T(-iname) T(*.jpg) T(-ls) T(|perl) T(-lane) T($t) T(+=) T($F[6];) T(print) T($t/1024/1024/1024) T(.) T("") T(GB"")"
ROOT(root) T(sudo) T(find) T(/) NT(<n>) T(-name) T(firefox) T(-o) T(-name) T(thunderbird) T(-o) T(-name) T(seamonkey) T(-type) T(f) T(2>/dev/null|grep) T(-v) T((10_Recommended|repo))
ROOT(root) T(sudo) T(ls) T(-hal) T(/root/) T(|) T(sudo) T(tee) T(/root/test.out) T(>) T(/dev/null)
ROOT() PIPELINE() UTILITY(history) UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(crontab) FLAG(-l) UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(Size)<Size>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(cat) ARGUMENT({})<File> UTILITY(wc) FLAG(-l)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-xdev) FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(basename) COMMANDSUBSTITUTION() UTILITY(pwd)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(diff) T(-r) T(dir1) T(dir2) T(|) T(grep) T(dir1) T(|) T(awk) T({print) T($4}) T(>) T(difference1.txt)
ROOT(root) T(ssh) T(-t) T(SERVER) T(command;) T(bash) T(-l)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(chmod) FLAG(-v) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT(root) T(find) T(/home/calvin/) T(-name) T(“*.txt”) T(>) T(/tmp/search.log)
ROOT() PIPELINE() UTILITY(seq) ARGUMENT(Number)<Number> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(cal) FLAG(-h) UTILITY(cut) FLAG(-c) ARGUMENT(Number)<Number>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> BINARYLOGICOP(-and) FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) FLAG(-r) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(--version)
ROOT() PIPELINE() UTILITY(du) FLAG(-s) FLAG(-m) FLAG(-c) ARGUMENT(File)<File> UTILITY(sort) FLAG(-n)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> BRACKET() UNARYLOGICOP(!) FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune)
ROOT(root) T(find) T(.) T(-name) T(*.txt) T(|) T(xargs) T(dos2unix)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(grep) FLAG(-i) FLAG(-H) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(cat) ARGUMENT({})<File> UTILITY(tr) FLAG(-c) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(tee) FLAG(--append) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::+) UTILITY(grep) FLAG(-l) OPERATOR(--) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(grep) FLAG(-l) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-size) ARGUMENT(Size)<Size> FLAG(-exec::;) UTILITY(ls) ARGUMENT({})<File>
ROOT() UTILITY(find) FLAG(-E) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-regex) ARGUMENT(Regex)<Regex>
"ROOT(root) T(find) T(.) T(-type) T(d) T(-iname) T(*foo*) T(-exec) T(bash) T(-O) T(nocasematch) T(-c) T([[) T($1) T(=~) T((foo)) T(]]) T(&&) T(mv) T(""$1"") T(""${1//${BASH_REMATCH[1]}/Bar}"") T(--) T({}) T(;)"
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> UTILITY(sort) FLAG(-n) UTILITY(tail) FLAG(-) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT(root) T(find) T(.) T(-type) T(f) T(!) T(-iregex) T(.\|./.git) T(-exec) T(perl) T(-i) T(-pe) T(s/$lower1/$lower2/g) T({}) T(;)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-atime) ARGUMENT(+Timespan)<Timespan> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(uniq) FLAG(-w) ARGUMENT(Quantity)<Quantity> FLAG(-c) ARGUMENT(File)<File>
ROOT() UTILITY(echo) FLAG(-e) COMMANDSUBSTITUTION() PIPELINE() UTILITY(echo) FLAG(-n) FLAG(-e) ARGUMENT(Regex)<Regex> UTILITY(wc) FLAG(-m)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-exec::;)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(echo) ARGUMENT({})<Regex> FLAG(-exec::;) UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT(root) T(curl) T(-X) T(GET) T(-H) T(Authorization:) T(Token) T(wef4fwef54te4t5teerdfgghrtgdg53) T(http://testsite/api/) T(|) T(python) T(-mjson.tool)
ROOT(root) T(nohup) T(php) T(newEmptyPHP.php) T(&)
ROOT() UTILITY(chgrp) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-nouser) FLAG(-exec::;) UTILITY(ls) FLAG(-l) ARGUMENT({})<File> FLAG(-ok::;) UTILITY(chown) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(du) FLAG(-c) FLAG(--files0-from) ARGUMENT(File)<File>
ROOT(root) T(basename) T($() T(pwd)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-depth) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) FLAG(-r) FLAG(-f) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(mount) FLAG(-l) UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(sed) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print) FLAG(-exec::;) UTILITY(cat) ARGUMENT({})<File> FLAG(-exec::;) UTILITY(sleep) ARGUMENT(Timespan)<Timespan>
ROOT() PIPELINE() UTILITY(nl) FLAG(-n) ARGUMENT(rz)<Format> ARGUMENT(File)<File> UTILITY(awk) FLAG(-v) ARGUMENT(Program)<Program> ARGUMENT(Program)<Program> UTILITY(sort) FLAG(-k) ARGUMENT(Number)<Number> UTILITY(cut) FLAG(-f) ARGUMENT(Number)<Number>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(-Size)<Size> FLAG(-print)
ROOT() UTILITY(ls) ARGUMENT(File)<File> ARGUMENT(File)<File>
"ROOT(root) T(echo) T(,s/foo/bar/g;) T(w) T(|) T(tr) T(;) T(\012) T(|) T(ed) T(-s) T(file.txt)"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::+) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-atime) ARGUMENT(+Timespan)<Timespan> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(mv) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(sed) ARGUMENT(Program)<Program> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(f)<Type> UNARYLOGICOP(!) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(gzip) ARGUMENT({})<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(d)<Type>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-mtime) ARGUMENT(Timespan)<Timespan>
ROOT() UTILITY(od) FLAG(-t) ARGUMENT(x2)<Type> ARGUMENT(File)<File>
ROOT() UTILITY(mount) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> FLAG(-o) ARGUMENT(loop)<Option> FLAG(-t) ARGUMENT(vfat)<Option>
ROOT(root) T(find) T(files/) T(-name) T(*.gz) T(|) T(nl) T(-n) T(rz) T(|) T(sed) T(-e) T(s/\t/\n/) T(|) T(xargs) T(--max-args) T(2) T(...)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type>
ROOT() PIPELINE() UTILITY(seq) FLAG(-s) ARGUMENT(Regex)<Regex> ARGUMENT(Number)<Number> UTILITY(tr) FLAG(-d) ARGUMENT(Regex)<Regex>
ROOT(root) T(watch) T(-n) T(60) T(killall) T(-USR1) T(dd)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(-not) BRACKET() FLAG(-path) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(echo) T($() T(basename) T($() T(pwd)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-exec::+) UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(rm) FLAG(-r) ARGUMENT(File)<File>
"ROOT(root) T(find) T($(/usr/ucb/ps) T(auwwx) T(|) T(grep) T(weblogic) T(|) T(tr) T(\n) T(|) T(grep) T(security.policy) T(|) T(grep) T(domain) T(|) T(awk) T(-F=) T({print) T($2}) T(|) T(sed) T(-e) T(s/weblogic.policy//) T(-e) T(s/security\///) T(-e) T(s/dep\///) T(|) T(awk) T(-F/) T({print) T(""/""$2""/""$3""/""$4""/somefile.cf""}) T(|) T(sort) T(|) T(uniq)) T(2>) T(/dev/null) T(-exec) T(ls) T({}) T(;) T(-exec) T(cat) T({}) T(;)"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() UTILITY(top) FLAG(-n) ARGUMENT(Quantity)<Quantity>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(!) FLAG(-user) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0)
ROOT() UTILITY(shopt) FLAG(-s) ARGUMENT(histappend)<Option>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan> FLAG(-exec::;) UTILITY(ln) FLAG(-s) ARGUMENT({})<File> ARGUMENT(Regex)<Regex>
ROOT(root) T(doFirst=) T(true)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(!) FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-s) FLAG(-l) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(sed) FLAG(-i) FLAG(-e) ARGUMENT(Program)<Program> ARGUMENT({})<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::+) UTILITY(echo) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT({})<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(-not) FLAG(-iwholename) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(chown) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-uid) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-c) FLAG(-H) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT(root) T(timeout) T(5) T(ssh) T(user@ip)
ROOT() UTILITY(chown) FLAG(-R) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT() UTILITY(sort) FLAG(-n) FLAG(-r) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT(root) T(find) T(.) T(-type) T(f) T(-exec) T(sh) T(fixname.sh) T({}) T(;)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(sed) FLAG(-i) ARGUMENT(Program)<Program> ARGUMENT(File)<File> ARGUMENT({})<File>
ROOT(root) T(watch) T(-n) T(1) T(mysqladmin) T(-u) T(root) T(-pXXXXX) T(processlist) T(|) T(grep) T(tablename) T(|) T(tee) T(-a) T(/root/plist.log)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UTILITY(awk) FLAG(-F) ARGUMENT(Regex)<Regex> ARGUMENT(Program)<Program> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(grep) FLAG(-v) ARGUMENT(Regex)<Regex> FLAG(-R) ARGUMENT(File)<File>
ROOT(root) T(env) T($() T(cat) T(File) T(|) T(xargs)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(l)<Type> FLAG(-exec::;) UTILITY(readlink) FLAG(-f) ARGUMENT({})<File> UTILITY(grep) FLAG(-v) COMMANDSUBSTITUTION() UTILITY(readlink) FLAG(-f) ARGUMENT(File)<File>
ROOT(root) T(find) T(dir) T(-name) T(*~) T(|) T(xargs) T(echo) T(rm) T(|) T(ksh) T(-s)
ROOT(root) T(echo) T($() T(pwd)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) FLAG(-f) ARGUMENT({})<File>
ROOT(root) T(find) T(Path) T(-type) T(f) T(-mtime) T(+Timespan) T(|) T(xargs) T(-I) T({}) T(tar) T(-c) T(-v) T(-f) T($() T(date) T('+%d%m%Y'_archive.tar)
"ROOT(root) T(ip) T(addr) T(show) T(en0) T(|) T(awk) T($1) T(==) T(""inet"") T({gsub(/\/.*$/,) T("""",) T($2);) T(print) T($2})"
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(cat) ARGUMENT({})<File> UTILITY(wc) FLAG(-l)
ROOT() UTILITY(readlink) FLAG(-f) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::+) UTILITY(grep) FLAG(-q) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(ls) FLAG(-l) UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(awk) FLAG(-F) ARGUMENT(Regex)<Regex> ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> ARGUMENT(Path)<Path> FLAG(-exec::+) UTILITY(sed) FLAG(-i) ARGUMENT(Program)<Program> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(rev) UTILITY(cut) FLAG(-c) ARGUMENT(Number)<Number> UTILITY(rev)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-path) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-print) BINARYLOGICOP(-and) BRACKET() FLAG(-type) ARGUMENT(f)<Type> BINARYLOGICOP(-or) FLAG(-type) ARGUMENT(l)<Type> BINARYLOGICOP(-or) FLAG(-type) ARGUMENT(d)<Type> UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-exec::+) UTILITY(du) FLAG(-b) ARGUMENT({})<File> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(shred) FLAG(-u) FLAG(-z) FLAG(-n) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(awk) ARGUMENT(Program)<Program> ARGUMENT(Program)<Program> UTILITY(sort) FLAG(-t) ARGUMENT(Regex)<Regex> FLAG(-k) ARGUMENT(Number)<Number> UTILITY(uniq) FLAG(-u) FLAG(--skip-fields) ARGUMENT(Quantity)<Quantity> UTILITY(sort) FLAG(-k) ARGUMENT(Number)<Number> FLAG(-t) ARGUMENT(Regex)<Regex> UTILITY(cut) FLAG(-f) ARGUMENT(Number)<Number> FLAG(-d) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(!) FLAG(-user) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(tar) FLAG(-I) ARGUMENT(File)<File> FLAG(-c) FLAG(-f) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(mv) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) FLAG(-P) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(l)<Type> FLAG(-exec::;) UTILITY(echo) FLAG(-n) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(readlink) ARGUMENT({})<File>
ROOT(root) T(alias) T(c1=awk) T('{print) T(\$1}')
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-path) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(d)<Type> FLAG(-delete)
ROOT() UTILITY(hostname)
"ROOT() UTILITY(ssh) FLAG(-o) ARGUMENT(ControlPath=""$MASTERSOCK"")<Option> FLAG(-M) FLAG(-N) FLAG(-f) ARGUMENT(Regex)<Regex>"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-okdir::;) UTILITY(diff) ARGUMENT({})<File> ARGUMENT(File)<File>
"ROOT(root) T(find) T(kat) T(-name) T(dok.txt) T(-exec) T(bash) T(-c) T(echo) T(-e) T(""\nAutor:) T(Jan) T(Kowalski"") T(>>) T({}) T(;)"
ROOT() PIPELINE() UTILITY(dig) ARGUMENT(Regex)<Regex> FLAG(-x) ARGUMENT(Regex)<Regex> UTILITY(sed) ARGUMENT(Program)<Program>
ROOT(root) T(pgrep) T(-u) T(w) T(|) T(grep) T(ssh|) T(awk) T({print) T($1}) T(ssh)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-anewer) ARGUMENT(File)<File>
ROOT() UTILITY(mount) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT(root) T(xargs) T(-n) T(1) T(dirname) T(<somefile.txt) T(|) T(xargs) T(mkdir) T(-p)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UNARYLOGICOP(-not) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) OPERATOR(--) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> UTILITY(cpio) FLAG(-p) FLAG(-d) FLAG(-u) FLAG(-m) FLAG(-v) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mount) FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(zcat) ARGUMENT(Regex)<Regex> UTILITY(awk) FLAG(-F) ARGUMENT(Regex)<Regex> ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(d)<Type> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) FLAG(-r) FLAG(-f) ARGUMENT({})<File>
"ROOT(root) T(find) T(.) T(!) T(-name) T(.) T(-prune) T(-name) T(*.old) T(-exec) T(sh) T(-c) T(mv) T(""$@"") T(../old/) T(sh) T({}) T(+)"
ROOT() UTILITY(mktemp) FLAG(-p) ARGUMENT(Directory)<Directory> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(wc) FLAG(-l) ARGUMENT(File)<File>
ROOT() UTILITY(paste) FLAG(-s) FLAG(-d) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(echo) T($() T(find) T(Path) T(-type) T(f) T(-perm) T(-Permission)
ROOT() UTILITY(mv) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-n) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT(root) T(comm) T(-1) T(-2) T(<() T(ls) T(File)
ROOT() PIPELINE() UTILITY(gzip) FLAG(-d) FLAG(-c) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-P) FLAG(--regexp) ARGUMENT(Regex)<Regex> UTILITY(split) FLAG(-d) FLAG(-l) ARGUMENT(Quantity)<Quantity> ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan> FLAG(-print)
ROOT() UTILITY(mktemp) FLAG(-d) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-daystart) FLAG(-mtime) ARGUMENT(-Timespan)<Timespan>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(mkdir) ARGUMENT(Directory)<Directory>
"ROOT(root) T(alias) T(|) T(awk) T(/^alias) T(/{print) T(substr($2,1,index($2,""="")-1)})"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-mmin) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(which) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(grep) FLAG(-E) FLAG(-l) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UNARYLOGICOP(-prune) BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT(root) T(yes) T(123456789) T(|) T(grep) T(--line-buffered) T(.) T(|) T({) T(head) T(-n) T(1;) T(head) T(-n) T(1;) T(})
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-depth) FLAG(-print0) UTILITY(grep) FLAG(-v) FLAG(-E) FLAG(-z) FLAG(-Z) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) FLAG(-r) FLAG(-v) FLAG(-f) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT(root) T(find) T(/) T(-name) T(program.c) T(2>errors.txt)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-ctime) ARGUMENT(-Timespan)<Timespan>
ROOT() UTILITY(cd) FLAG(-P) ARGUMENT(Directory)<Directory>
ROOT() UTILITY(cp) FLAG(-R) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(chgrp) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-size) ARGUMENT(Size)<Size> FLAG(-exec::;) UTILITY(mv) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-exec::+) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() UTILITY(mv) ARGUMENT(File)<File> ARGUMENT(File)<File> FLAG(-b)
"ROOT(root) T(find) T(-type) T(f) T(-exec) T(perl) T(-e) T(printf) T(qq[%s) T(=>) T(%s\n],) T(scalar) T(@ARGV,) T(length) T(join) T(q[) T(],) T(@ARGV) T({}) T(+)"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-empty) FLAG(-exec::;) UTILITY(rmdir) ARGUMENT({})<Directory>
ROOT(root) T(find) T(.) T(-exec) T(cmd1) T(;) T(-exec) T(cmd2) T(;)
ROOT(root) T(su) T(-s) T(/bin/bash) T(-c) T(set) T(-a;) T(\) T(.) T(/path/to/nullmailer-vars;) T(\) T(set) T(+a;) T(\) T(/usr/sbin/logcheck) T(logcheck)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-user) ARGUMENT(Regex)<Regex> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(fold) ARGUMENT(File)<File> ARGUMENT(File)<File> UTILITY(more)
ROOT(root) T(gunzip) T(<) T(some.file.gz)
ROOT(root) T(whatever) T(|) T(tee) T(logfile.txt)
ROOT() UTILITY(ls) FLAG(-b)
ROOT() UTILITY(chown) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT() UTILITY(bind) FLAG(-f) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-not) FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-perm) ARGUMENT(Permission)<Permission>
"ROOT() UTILITY(join) FLAG(-t) ARGUMENT(Regex)<Regex> FLAG(-o) ARGUMENT(1.2,2.2,2.3)<Format> FLAG(-a) ARGUMENT(Quantity)<Quantity> FLAG(-e) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> PROCESSSUBSTITUTION(<) UTILITY(sort) ARGUMENT(File)<File>"
ROOT() UTILITY(chmod) ARGUMENT(Permission)<Permission> COMMANDSUBSTITUTION() PIPELINE() UTILITY(ls) FLAG(-1) FLAG(-a) UTILITY(grep) FLAG(-v) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print) UTILITY(xargs) FLAG(-L) ARGUMENT(Quantity)<Quantity> FLAG(-I) ARGUMENT({})<Regex> UTILITY(awk) ARGUMENT(Program)<Program> ARGUMENT({})<Program>
ROOT(root) T(find) T(.) T(2>&1) T(|) T(grep) T(-v) T(permission) T(denied) T(>) T(files_and_folders)
"ROOT(root) T(mv) T($() T(find) T(Path) T(-name) T(Regex) T(-printf) T(""%h\n"") T(|) T(uniq)"
ROOT() UTILITY(rsync) FLAG(-a) FLAG(--exclude) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-depth) ARGUMENT(Path)<Path> FLAG(-print)
ROOT(root) T(alias) T(psgrep=ps) T(-ef) T(|) T(grep)
ROOT() PIPELINE() UTILITY(gunzip) FLAG(-c) ARGUMENT(Regex)<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(zcat) ARGUMENT(Regex)<Regex> UTILITY(wc) FLAG(-c)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-type) ARGUMENT(f)<Type> FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT(root) T(find) T(.|xargs) T(perl) T(-p) T(-e) T(s/) T(/\n|xargs) T(grep) T(aaa|wc) T(-l)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-ctime) ARGUMENT(-Timespan)<Timespan> FLAG(-print)
ROOT() UTILITY(paste) FLAG(-s) FLAG(-d) ARGUMENT(Regex)<Regex>
ROOT(root) T(chown) T($() T(whoami)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT(root) T(file) T(--mime) T(myfile.txt)
ROOT(root) T(find) T(./) T(-name) T(*.ogv) T(-exec) T(bash) T(-c) T(myfile) T({}) T(;)
ROOT(root) T(find) T(.) T(-name) T(modules) T(!) T(-exec) T(sh) T(-c) T(find) T({}) T(-mindepth) T(1) T(-name) T(modules|read) T(;) T(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-exec::;) UTILITY(chown) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(echo) COMMANDSUBSTITUTION() UTILITY(whoami)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT(root) T(watch) T(-n) T(1) T(ps) T(aux) T(|) T(grep) T(php)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> UTILITY(tee) ARGUMENT(File)<File> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> FLAG(-P) ARGUMENT(Quantity)<Quantity> UTILITY(compress) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(f)<Type> FLAG(-delete)
ROOT(root) T(find) T(.) T(-iname) T($srch1*) T(-exec) T(grep) T(It) T(took) T({}) T(;) T(-print) T(|sed) T(-r) T(N;s/(.*)\n(.*)/\2) T(\1/) T(>) T(temp1)
ROOT(root) T(ls) T(-d) T(!(*.[ch]))
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print) FLAG(-exec::;) UTILITY(cat) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-newermt) ARGUMENT(Regex)<Regex> UNARYLOGICOP(!) FLAG(-newermt) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(!) FLAG(-perm) ARGUMENT(-Permission)<Permission> UNARYLOGICOP(-prune)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(.) T(-type) T(f) T(-name) T(“k*.*”) T(-mmin) T(-360) T(-exec) T(ls) T(-l) T(‘{}’) T(;) T(|) T(xargs) T(-0) T(/bin/rm) T(-f)
ROOT() PIPELINE() UTILITY(yes) UTILITY(sed) FLAG(-n) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) FLAG(-f) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-delete)
ROOT() UTILITY(date) FLAG(-d) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(apropos) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-depth)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(!) FLAG(-type) ARGUMENT(d)<Type> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(wc) FLAG(-c) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-ls)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(f)<Type> FLAG(-iname) ARGUMENT(Regex)<Regex> UTILITY(sort) FLAG(-n)
ROOT(root) T(find) T(.) T(-name) T(*bmp) T(-print0) T(|) T(xargs) T(-0) T(-l) T(-i) T(basename) T({}) T(.bmp) T(|) T(xargs) T(-0) T(-l) T(-i) T(convert) T({}.bmp) T({}.png)
ROOT(root) T(g++) T(omnitest.cpp) T(-E) T(|) T(less)
ROOT() UTILITY(head) FLAG(-c) ARGUMENT(-Quantity)<Quantity> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-empty) FLAG(-exec::+) UTILITY(rmdir) FLAG(-v) FLAG(-p) FLAG(--ignore-fail-on-non-empty) ARGUMENT({})<Directory>
ROOT() PIPELINE() UTILITY(dig) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT(dragon-architect.com)<Type> UTILITY(awk) ARGUMENT(Program)<Program> ARGUMENT(Program)<Program>
ROOT() UTILITY(crontab) FLAG(-l)
ROOT() PIPELINE() UTILITY(ps) FLAG(-A) UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(gunzip) FLAG(-t) ARGUMENT(Regex)<Regex>
"ROOT(root) T(find) T(project) T(!) T(-type) T(d) T(-print) T(|) T(egrep) T(/,|%$|~$|\.old$|SCCS|/core$|\.o$|\.orig$) T(>) T(Exclude)"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-xdev) FLAG(-type) ARGUMENT(f)<Type> FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(gzip) FLAG(-v) ARGUMENT({})<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::+) UTILITY(ls) FLAG(-s) ARGUMENT({})<File> UTILITY(sort) FLAG(-n) UTILITY(head) FLAG(-) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-print)
ROOT() UTILITY(hostname)
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number>
ROOT() PIPELINE() UTILITY(df) FLAG(-k) ARGUMENT(File)<File> UTILITY(tail) FLAG(-) ARGUMENT(Quantity)<Quantity> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(split) FLAG(-n) ARGUMENT(Quantity)<Quantity> ARGUMENT(File)<File>
ROOT(root) T(cat) T(file) T(|) T(xclip) T(-selection) T(clipboard)
ROOT() PIPELINE() UTILITY(false) UTILITY(echo) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(tr) FLAG(-d) FLAG(-c) ARGUMENT(Regex)<Regex> UTILITY(fold) FLAG(-w) ARGUMENT(Quantity)<Quantity> UTILITY(head) FLAG(-n) ARGUMENT(Quantity)<Quantity> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(mkdir) ARGUMENT({})<Directory>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(-not) FLAG(-empty) FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(ls) FLAG(-s) ARGUMENT({})<File> UTILITY(sort) FLAG(-n) UTILITY(head) FLAG(-) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(chown) FLAG(-R) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-exec::;) UTILITY(echo) ARGUMENT(Regex)<Regex>
ROOT(root) T(sudo) T(yum) T(update) T(openssl) T(--skip-broken)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> BRACKET() FLAG(-iname) ARGUMENT(Regex)<Regex> UNARYLOGICOP(!) FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-E) FLAG(--invert-match) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(sort) FLAG(-z) UTILITY(xargs) FLAG(-r) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(md5sum) ARGUMENT({})<File> UTILITY(md5sum)
ROOT(root) T(find) T(/) T(-name) T(core) T(-print) T(|) T(xargs) T(echo) T(>) T(/tmp/core.log)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) FLAG(-r) FLAG(-f) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> FLAG(-print)
ROOT() UTILITY(find) FLAG(-name) ARGUMENT(Regex)<Regex> ARGUMENT(Path)<Path>
ROOT(root) T(find) T(.) T(|) T(xargs) T(perl) T(-p) T(-i.old) T(-e) T(s/oldstring/newstring/g)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-path) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-type) ARGUMENT(f)<Type> FLAG(-print)
ROOT() UTILITY(df) FLAG(-i) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-atime) ARGUMENT(Timespan)<Timespan>
ROOT() UTILITY(split) FLAG(-l) ARGUMENT(Quantity)<Quantity> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(read) FLAG(-n) ARGUMENT(Quantity)<Quantity> FLAG(-p) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(tar) FLAG(-c) FLAG(-z) FLAG(-f) ARGUMENT(File)<File> COMMANDSUBSTITUTION() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-d) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT(root) T(echo) T($() T(comm) T(-1) T(-2) T(<() T(echo) T(Regex) T(|) T(fold) T(-w) T(Quantity) T(|) T(sort) T(|) T(uniq)
ROOT() UTILITY(mv) ARGUMENT(File)<File> COMMANDSUBSTITUTION() PIPELINE() UTILITY(ls) ARGUMENT(File)<File> UTILITY(rev) UTILITY(cut) FLAG(-c) ARGUMENT(Number)<Number> UTILITY(rev)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(Size)<Size>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(grep) FLAG(-i) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> FLAG(-print) UTILITY(wc) FLAG(-l)
ROOT() UTILITY(cd) COMMANDSUBSTITUTION() UTILITY(whoami)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-print0)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(grep) FLAG(-l) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> UTILITY(wc) FLAG(-l)
ROOT() PIPELINE() UTILITY(who) FLAG(-m) UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() UTILITY(tree) FLAG(-d) FLAG(-f) FLAG(-i) FLAG(-L) ARGUMENT(Number)<Number> COMMANDSUBSTITUTION() UTILITY(pwd)
ROOT() PIPELINE() UTILITY(gzip) FLAG(-d) FLAG(-c) ARGUMENT(Regex)<Regex> UTILITY(tar) FLAG(-x) FLAG(-v) FLAG(-f) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(zcat) ARGUMENT(Regex)<Regex> UTILITY(tar) FLAG(-x) FLAG(-v) FLAG(-f) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> UTILITY(grep) FLAG(-E) ARGUMENT(Regex)<Regex>
ROOT(root) T(printf) T(operator:) T(`finger) T(${USER}) T(|) T(grep) T(Name:) T(|) T(cut) T(-f3) T(-d:`) T(\n)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-ipath) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(rsync) FLAG(-a) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(echo) COMMANDSUBSTITUTION() UTILITY(sed) FLAG(-e) ARGUMENT(Program)<Program> ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(sort) FLAG(-o) ARGUMENT(File)<File> ARGUMENT({})<File>
ROOT() UTILITY(split) FLAG(-b) ARGUMENT(Size)<Size> FLAG(-d) ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT(root) T(cat) T(<() T(yes) T(|) T(tr) T(Regex) T(Regex) T(|) T(head) T(-c) T(Quantity)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(ls) FLAG(-l) FLAG(-S) FLAG(-h) ARGUMENT({})<File>
ROOT() UTILITY(join) FLAG(-1) ARGUMENT(Regex)<Regex> FLAG(-2) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(scp) FLAG(-v) ARGUMENT(File)<File>
ROOT(root) T(find) T(originals) T(-name) T(*.jpg) T(|) T(xargs) T(-1) T(-P) T(2) T(makeallsizes)
ROOT() UTILITY(readlink) FLAG(-m) ARGUMENT(File)<File>
ROOT() UTILITY(cp) ARGUMENT(File)<File> ARGUMENT(File)<File> FLAG(-R)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(-Permission)<Permission> FLAG(-type) ARGUMENT(f)<Type>
"ROOT(root) T(find) T(-name) T(*.php) T(-exec) T(bash) T(-c) T([[) T(""$(wc) T(-l) T(<) T(""$0"")"") T(-eq) T(1) T(]]) T(&&) T(echo) T(""$0"") T({}) T(;)"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-iregex) ARGUMENT(Regex)<Regex> UNARYLOGICOP(!) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(ln) FLAG(-s) ARGUMENT(File)<File>
ROOT() UTILITY(chown) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(mkdir) COMMANDSUBSTITUTION() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(tr) FLAG(-d) FLAG(-c) ARGUMENT(Regex)<Regex> UTILITY(fold) FLAG(-w) ARGUMENT(Quantity)<Quantity> UTILITY(head) FLAG(-n) ARGUMENT(Quantity)<Quantity>
ROOT(root) T(find) T(/) T(-user) T(edwarda) T(-print) T(|) T(cpio) T(-ovBc) T(>) T(/dev/rfd0)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(!) FLAG(-newermt) ARGUMENT(Regex)<Regex> FLAG(-newermt) ARGUMENT(Regex)<Regex> FLAG(-ls)
ROOT() PIPELINE() UTILITY(df) FLAG(-T) ARGUMENT(File)<File> UTILITY(tail) FLAG(-) ARGUMENT(Quantity)<Quantity> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT(root) T(uuencode) T(<(head) T(-c) T(200) T(/dev/urandom) T(|) T(base64) T(|) T(gzip))
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UNARYLOGICOP(!) FLAG(-regex) ARGUMENT(Regex)<Regex> FLAG(-delete)
ROOT(root) T(bunzip2) T(-c) T(compressedfile.bz2) T(|) T(yourfilterprogram)
ROOT() UTILITY(find) FLAG(-L) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(l)<Type> FLAG(-delete) FLAG(-exec::;) UTILITY(ln) FLAG(-s) ARGUMENT(File)<File> ARGUMENT({})<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(.) T(-ls) T(>) T(/tmp/files.txt)
ROOT(root) T(unset) T(array[`shuf) T(-i) T(0-4) T(-n1`];)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(f)<Type> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(cp) FLAG(-R) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-l) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan>
ROOT() UTILITY(shopt) FLAG(-u) ARGUMENT(dotglob)<Option>
ROOT() UTILITY(chgrp) FLAG(-R) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(ls) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(echo) ARGUMENT({})<Regex>
ROOT(root) T(find) T(-type) T(l) T(|) T(while) T(read) T(f;) T(do) T(if) T([) T(!) T(-e) T($f) T(];) T(then) T(ls) T(-l) T($f;) T(fi;) T(done)
ROOT() PIPELINE() UTILITY(tac) ARGUMENT(File)<File> UTILITY(sed) ARGUMENT(Program)<Program> UTILITY(tac)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(d)<Type> FLAG(-exec::+) UTILITY(rm) FLAG(-r) ARGUMENT({})<File>
ROOT() UTILITY(dig) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT(ns)<Type>
ROOT() UTILITY(paste) FLAG(-d) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT(root) T(yes) T(|) T(head) T(-n10) T(>) T(10lines.txt)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-exec::;) UTILITY(grep) FLAG(-q) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> FLAG(-print)
ROOT() UTILITY(mktemp) FLAG(-d) FLAG(-t) COMMANDSUBSTITUTION() UTILITY(basename) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(echo) COMMANDSUBSTITUTION() UTILITY(whoami)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(chmod) ARGUMENT(-Permission)<Permission> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(!) FLAG(-user) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(read) FLAG(-r) FLAG(-p) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT(root) T(make) T(2>&1) T(|) T(less)
ROOT() PIPELINE() UTILITY(sort) ARGUMENT(File)<File> UTILITY(uniq) FLAG(-c) UTILITY(sort) FLAG(-r)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-delete)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-printf) ARGUMENT(+%b)<Format>
ROOT(root) T(command) T(>) T(>(tee) T(-a) T(stdout.log)) T(2>) T(>(tee) T(-a) T(stderr.log) T(>&2))
ROOT() UTILITY(rsync) FLAG(-a) FLAG(--filter) ARGUMENT(Program)<Program> ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(ssh) FLAG(-f) ARGUMENT(Regex)<Regex> FLAG(-L) ARGUMENT(Regex)<Regex> FLAG(-N)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-path) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-nouser) BINARYLOGICOP(-or) FLAG(-nogroup)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(tr) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(+Size)<Size> BRACKET() FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> BINARYLOGICOP(-or) FLAG(-atime) ARGUMENT(+Timespan)<Timespan> FLAG(-ls) FLAG(-exec::;) UTILITY(file) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-exec::+) UTILITY(rm) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(sed) FLAG(-i) ARGUMENT(Program)<Program> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-exec::;) UTILITY(rm) FLAG(-r) FLAG(-f) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(chown) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT() UTILITY(diff) ARGUMENT(File)<File> ARGUMENT(File)<File> FLAG(-r) FLAG(-x) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT(root) T(awk) T(-F) T(Regex) T(Program) T($() T(dirname) T($() T(readlink) T(-f) T($() T(which) T(Regex)
ROOT() PIPELINE() UTILITY(history) UTILITY(sed) FLAG(-n) ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-v) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-H) FLAG(-n) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> ARGUMENT(File)<File> ARGUMENT({})<File>
ROOT(root) T(find) T(dir) T(-type) T(f) T(-print0) T(|) T(xargs) T(-0) T(md5sum) T(>>) T(file.txt)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-xdev) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(sort) ARGUMENT(File)<File> UTILITY(uniq) UTILITY(sort) FLAG(-o) ARGUMENT(File)<File>
ROOT(root) T(mkdir) T(dir2;) T(tar) T(cvf) T(-) T(dir1/) T(--exclude) T(*/exclude) T(|) T(tar) T(xvf) T(-) T(-C) T(dir2)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-path) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-user) ARGUMENT(Regex)<Regex> FLAG(-ls)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(diff) FLAG(--brief) FLAG(-N) FLAG(-r) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(shopt) FLAG(-s) ARGUMENT(globstar)<Option> ARGUMENT(nullglob)<Option> ARGUMENT(dotglob)<Option>
ROOT() UTILITY(rsync) FLAG(-a) FLAG(-v) FLAG(-z) FLAG(--ignore-existing) ARGUMENT(File)<File> ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT(root) T(chown) T(-R) T($() T(whoami)
ROOT() UTILITY(touch) FLAG(-a) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) FLAG(-f) ARGUMENT({})<File>
"ROOT() UTILITY(mount) FLAG(-o) ARGUMENT(rw,remount)<Option> FLAG(-t) ARGUMENT(yaffs2)<Option> ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(grep) FLAG(-H) FLAG(-n) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> FLAG(-exec::;) UTILITY(sed) FLAG(-i) ARGUMENT(Program)<Program> ARGUMENT({})<File>
"ROOT() UTILITY(find) ARGUMENT($FULFILLMENT)<Path> ARGUMENT($ARCH1)<Path> FLAG(-exec::;) UTILITY(stat) FLAG(-c) ARGUMENT(%i,%b,%A,%h,%U,%G,%y,%n)<Regex> ARGUMENT({})<File>"
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(wc) FLAG(-l) ARGUMENT({})<File>
"ROOT(root) T(find) T(.) T(-name) T(*.text) T(-exec) T(sh) T(-c) T(for) T(i) T(do) T(if) T([) T(!) T(-f) T(""${i%.text}"") T(];) T(then) T(echo) T(==) T($i;) T(fi;done) T(sh) T({}) T(+)"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> BINARYLOGICOP(-and) FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(plsql) T(-type) T(f) T(-perm) T(/220) T(-exec) T(ls) T(-l) T({}) T(;) T(2>/dev/null)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type>
ROOT() UTILITY(echo) COMMANDSUBSTITUTION() UTILITY(hostname)
ROOT(root) T(cp) T(--remove-destination) T($() T(readlink) T(File)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-path) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-print)
ROOT() UTILITY(scp) FLAG(-r) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-user) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(du) FLAG(-s) FLAG(-m) ARGUMENT({})<File> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type> FLAG(-exec::;) UTILITY(echo) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> FLAG(-0) UTILITY(mv) FLAG(-t) ARGUMENT(Directory)<Directory> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-exec::;) UTILITY(echo) ARGUMENT({})<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::+) UTILITY(sed) FLAG(-i) ARGUMENT(Program)<Program> ARGUMENT(File)<File> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print) UTILITY(grep) FLAG(-P) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(d)<Type>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(sed) ARGUMENT(Program)<Program> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type>
ROOT(root) T(foo) T(|) T(tee) T(output.file)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(Timespan)<Timespan>
ROOT() PIPELINE() UTILITY(true) UTILITY(true) UTILITY(false) UTILITY(true) UTILITY(false)
ROOT() UTILITY(uname) FLAG(-r)
ROOT(root) T(find) T(asia) T(emea) T(-type) T(f) T(-name) T(*gz) T(|) T(while) T(IFS=) T(read) T(-r) T(fname;) T(do) T(printf) T(%s) T(%s\n) T($fname) T($(gzip) T(-dc) T($fname) T(|) T(wc) T(-l)) T(>>) T(file_count.txt;) T(done)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> BRACKET() UNARYLOGICOP(!) FLAG(-wholename) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(dirname) OPERATOR(--) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT(root) T(for) T(i) T(in) T(`find) T(.) T(|) T(grep) T(.xml$`;) T(do) T(bzip2) T($i&;) T(done)
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(tee) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-newer) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-daystart)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-exec::;) UTILITY(rm) FLAG(-f) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(ls) FLAG(-1) FLAG(-t) FLAG(-r) ARGUMENT(File)<File> UTILITY(tail) FLAG(-) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::+) UTILITY(touch) ARGUMENT({})<File>
ROOT() UTILITY(hostname) FLAG(-i)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(Permission)<Permission> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-user) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-newer) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(wc) FLAG(-l) ARGUMENT({})<File>
ROOT() UTILITY(ln) FLAG(-s) ARGUMENT(File)<File>
ROOT() UTILITY(bzip2) FLAG(-t) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-newermt) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-not) FLAG(-newermt) ARGUMENT(Regex)<Regex> FLAG(-ls)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-regextype) ARGUMENT(posix-egrep)<Type> FLAG(-regex) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type>
ROOT() UTILITY(cp) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(basename) ARGUMENT(Regex)<Regex>
"ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> UNARYLOGICOP(!) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-printf) ARGUMENT(""%f\n"")<Format>"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-delete)
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-o) ARGUMENT(Regex)<Regex> UTILITY(wc) FLAG(-l)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(Size)<Size>
"ROOT(root) T(find) T(.performance_test) T(-path) T(.performance_test/prune_me) T(-prune) T(-o) T(-exec) T(bash) T(-c) T(echo) T(""$0"") T({}) T(;)"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(Timespan)<Timespan> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan> FLAG(-daystart) FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT(root) T(cat) T(<() T(ls) T(File) T(|) T(sort) T(-u)
ROOT() UTILITY(readlink) FLAG(-f) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(Permission)<Permission>
ROOT() PIPELINE() UTILITY(seq) ARGUMENT(Number)<Number> UTILITY(sed) ARGUMENT(Program)<Program> UTILITY(awk) FLAG(-v) ARGUMENT(Program)<Program> ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(ls) FLAG(-t) FLAG(-l) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type> FLAG(-empty)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type> FLAG(-path) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT(root) T(find) T(path/to/folder) T(-type) T(f) T(-print0) T(|) T(xargs) T(-0) T(sha1sum) T(|) T(sha1sum)
"ROOT(root) T(find) T(.) T(-name) T(*.so) T(-print0) T(|) T(xargs) T(-0) T(-I) T(%) T(sh) T(-c) T(echo) T(%) T(;) T(myCommand) T(""%"") T(|) T(grep) T(ExpectedResult)"
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(ls) ARGUMENT({})<File>
ROOT(root) T(du) T(-s) T(-k) T($() T(find) T(Path) T(-type) T(d)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-user) ARGUMENT(Regex)<Regex> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-xtype) ARGUMENT(l)<Type>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(crontab)
ROOT() PIPELINE() UTILITY(who) UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number> UTILITY(grep) FLAG(-e) ARGUMENT(Regex)<Regex> FLAG(-e) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> UTILITY(grep) FLAG(-P) ARGUMENT(Regex)<Regex>
ROOT(root) T(stdbuf) T(-o) T(0) T(./a) T(|) T(tee) T(output.txt)
ROOT() PIPELINE() UTILITY(ifconfig) UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(md5sum) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(tar) FLAG(-r) FLAG(-f) ARGUMENT(File)<File> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::+) UTILITY(file) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(ls) FLAG(-d) FLAG(-m) ARGUMENT(File)<File> UTILITY(tr) FLAG(-d) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(cp) FLAG(-v) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT(root) T(find) T(.) T(-name) T(my.txt) T(2>&1) T(|) T(grep) T(-v) T(Permission) T(denied)
ROOT() UTILITY(rm) FLAG(-r) FLAG(-f) ARGUMENT(File)<File>
ROOT(root) T(mysqldump) T(–add-drop-table) T(–extended-insert) T(–force) T(–log-error=error.log) T(-uUSER) T(-pPASS) T(OLD_DB_NAME) T(|) T(ssh) T(-C) T(user@newhost) T(“mysql) T(-uUSER) T(-pPASS) T(NEW_DB_NAME”)
ROOT(root) T(var=() T($(whoami) T(&&) T(stat) T(-c) T(%i) T(/home))
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-path) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(.) T(-name) T(*.png) T(-print0) T(|) T(xargs) T(-0) T(mogrify) T(-format) T(jpg) T(-quality) T(50)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(touch) ARGUMENT({})<File>
ROOT() UTILITY(dirname) COMMANDSUBSTITUTION() UTILITY(mktemp) FLAG(-u) FLAG(-t) ARGUMENT(Regex)<Regex>
ROOT(root) T(split) T(-b) T(1024m) T(<file_name>)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-daystart) FLAG(-ctime) ARGUMENT(+Timespan)<Timespan>
ROOT(root) T(cd) T($() T(dirname) T($() T(find) T(Path) T(-name) T(Regex) T(|) T(sed) T(Program)
ROOT() UTILITY(set) COMMANDSUBSTITUTION() UTILITY(dirname) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UNARYLOGICOP(!) FLAG(-newer) ARGUMENT(File)<File> FLAG(-delete)
"ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-printf) ARGUMENT(""%p:%h\n"")<Format>"
ROOT() PIPELINE() UTILITY(head) ARGUMENT(File)<File> FLAG(-c) ARGUMENT(Quantity)<Quantity> UTILITY(od) FLAG(-t) ARGUMENT(x1)<Type> FLAG(-w) ARGUMENT(Size)<Size> UTILITY(head) FLAG(-n) ARGUMENT(Quantity)<Quantity> UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number> UTILITY(tr) FLAG(-d) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UTILITY(sed) FLAG(-e) ARGUMENT(Program)<Program> UTILITY(sed) FLAG(-e) ARGUMENT(Program)<Program> UTILITY(sort) UTILITY(uniq) FLAG(-c) UTILITY(sort) FLAG(-r) FLAG(-n)
ROOT() UTILITY(read) FLAG(-r) FLAG(-p) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT(root) T(ssh) T(-t) T(example.com) T(screen) T(-r;) T(ls)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(ls) FLAG(-l) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(sed) ARGUMENT(Program)<Program> ARGUMENT(File)<File> UTILITY(od) FLAG(-c)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::+) UTILITY(md5sum) ARGUMENT({})<File> UTILITY(awk) ARGUMENT(Program)<Program> UTILITY(sort) UTILITY(md5sum)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(gzip) FLAG(-9) ARGUMENT({})<Regex> FLAG(-exec::;) UTILITY(mv) ARGUMENT(File)<File> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-xdev) FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(mkdir) ARGUMENT(Directory)<Directory>
ROOT() UTILITY(rsync) FLAG(-a) FLAG(-v) FLAG(-v) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(echo) ARGUMENT(Regex)<Regex> ARGUMENT({})<Regex> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-atime) ARGUMENT(+Timespan)<Timespan> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT(root) T(export) T(JAVA_HOME=$(readlink) T(-f) T($(dirname) T($(readlink) T(-f) T($(which) T(java)) T())/../))
ROOT() UTILITY(sed) ARGUMENT(Program)<Program> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(tar) ARGUMENT(-File)<File> ARGUMENT(File)<File> UTILITY(split) FLAG(-b) ARGUMENT(Size)<Size> ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(.) T(-name) T(*.db) T(-type) T(f) T(|) T(while) T(read) T(file) T(;) T(do) T(sqlite3) T($file) T(SELECT) T(*) T(FROM) T(table) T(WHERE) T(column1='value') T(|) T(grep) T(value) T(;) T(if) T([) T($?) T(-eq) T(0) T(]) T(;) T(then) T(echo) T($file) T(;) T(fi) T(done)
"ROOT(root) T(find) T(.) T(-name) T(*.andnav) T(-exec) T(sh) T(-c) T(mv) T(""$0"") T(""${0%.andnav}.tile"") T({}) T(;z)"
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan> UTILITY(xargs) FLAG(-r) FLAG(-I) ARGUMENT({})<Regex> UTILITY(ls) FLAG(-l) ARGUMENT({})<File>
ROOT(root) T(cat) T(File) T(|) T(grep) T(-v) T(Regex) T(|) T(ssh) T(-t) T(Regex) T(command)
ROOT(root) T(ln) T(-s) T($() T(which) T(Regex)
"ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-printf) ARGUMENT(""%s %p\n"")<Format> UTILITY(sort) FLAG(-n) FLAG(-r) UTILITY(head) FLAG(-n) ARGUMENT(Quantity)<Quantity> UTILITY(sed) FLAG(-r) ARGUMENT(Program)<Program>"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-print)
"ROOT() UTILITY(mount) ARGUMENT(Regex)<Regex> FLAG(-o) ARGUMENT(remount,rw)<Option>"
ROOT() PIPELINE() UTILITY(w) UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT(root) T(oldalias=$(alias) T(my_command|sed) T(s/^[^']*'//;) T(s/'$//);)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(-Permission)<Permission> FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0)
ROOT(root) T(top) T(-l) T(1) T(-s) T(0) T(-stats) T(vprvt) T(-pid) T(8631)
ROOT() UTILITY(mount) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> FLAG(-t) ARGUMENT(ext4)<Option>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-print) BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune)
ROOT() PIPELINE() UTILITY(ls) FLAG(-l) FLAG(--color) ARGUMENT(always)<Option> ARGUMENT(File)<File> UTILITY(grep) FLAG(-E) FLAG(--color) ARGUMENT(never)<Option> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-regextype) ARGUMENT(posix-egrep)<Type> FLAG(-regex) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(file) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-path) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) UNARYLOGICOP(-not) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print) UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT(root) T(screen) T(-X) T(title) T(mynewtitle)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan> FLAG(-print)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(sed) ARGUMENT(Program)<Program> UTILITY(sh)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UNARYLOGICOP(-not) FLAG(-path) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-inum) ARGUMENT(Quantity)<Quantity>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-E) FLAG(-o) ARGUMENT(Regex)<Regex> UTILITY(head) FLAG(-n) ARGUMENT(Quantity)<Quantity>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-print) UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-perm) ARGUMENT(Permission)<Permission>
ROOT() UTILITY(mktemp) FLAG(-d)
ROOT() UTILITY(find) ARGUMENT(Path)<Path>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> UTILITY(sed) ARGUMENT(Program)<Program> UTILITY(sort) UTILITY(uniq) FLAG(-D) ARGUMENT(-f)<Option> ARGUMENT(File)<File> UTILITY(cut) FLAG(-f) ARGUMENT(Number)<Number>
"ROOT() UTILITY(mount) FLAG(-o) ARGUMENT(remount,size=40G)<Option> ARGUMENT(Regex)<Regex>"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(Size)<Size> FLAG(-print)
ROOT() UTILITY(split) FLAG(-n) ARGUMENT(Quantity)<Quantity> ARGUMENT(File)<File>
ROOT(root) T(brew) T(update)
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(ssh) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(tar) FLAG(--one-file-system) FLAG(-c) FLAG(-z) FLAG(-v) ARGUMENT(File)<File> UTILITY(split) FLAG(-b) ARGUMENT(Size)<Size> ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(ls) FLAG(-1) UTILITY(awk) FLAG(-v) ARGUMENT(Program)<Program> ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(ps) FLAG(-e) FLAG(-f) UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT(root) T(alias) T(cleanup=rm) T(-Rf) T(--) T(foo) T(bar) T(baz)
ROOT() PIPELINE() UTILITY(pwd) UTILITY(awk) FLAG(-F) ARGUMENT(Regex)<Regex> ARGUMENT(Program)<Program>
ROOT() UTILITY(w)
ROOT(root) T(find) T(Música/*) T(-type) T(f) T(-name) T(.*) T(-exec) T(/usr/bin/rm) T(-i) T({}) T(;)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-regex) ARGUMENT(Regex)<Regex>
"ROOT(root) T(tar) T(--exclude={*.png,*.mp3,*.wav,.git,node_modules}) T(-Jcf) T(${target_tarball}) T(${source_dirname})"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(l)<Type> FLAG(-xtype) ARGUMENT(l)<Type>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type> FLAG(-exec::;) UTILITY(chmod) FLAG(-R) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(dig) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT(A)<Type> UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-v) ARGUMENT(Regex)<Regex>
"ROOT(root) T(nohup) T(sh) T(-c) T(for) T(i) T(in) T(mydir/*.fasta;) T(do) T(./myscript.sh) T(""$i"";) T(done) T(>output.txt) T(&)"
"ROOT(root) T(join) T(-o) T(1.1,1.2,1.3,1.4) T(-t) T(Regex) T(<() T(sort) T(File)"
ROOT() PIPELINE() UTILITY(jobs) FLAG(-l) UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-v) ARGUMENT(Regex)<Regex> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(tr) FLAG(-d) FLAG(-c) ARGUMENT(Regex)<Regex> UTILITY(fold) FLAG(-w) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(crontab) FLAG(-e)
ROOT() PIPELINE() UTILITY(ifconfig) ARGUMENT(Regex)<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(awk) ARGUMENT(Program)<Program> UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(cp) FLAG(-r) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT(root) T(ssh) T(Regex) T(command)
ROOT() UTILITY(rsync) FLAG(-R) FLAG(-v) ARGUMENT(File)<File> ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(sed) FLAG(-i) ARGUMENT(Program)<Program> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(f)<Type>
ROOT() PIPELINE() UTILITY(ls) FLAG(-p) UTILITY(grep) FLAG(-v) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(md5sum) ARGUMENT({})<File> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-r) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) FLAG(-f) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(seq) ARGUMENT(Number)<Number> ARGUMENT(Number)<Number> UTILITY(sed) ARGUMENT(Program)<Program> UTILITY(tr) FLAG(-d) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(/home/me/download/) T(-type) T(f) T(-name) T(*.rm) T(-exec) T(ffmpeg) T(-i) T({}) T(-sameq) T({}.mp3) T(;) T(-exec) T(rm) T({}) T(;)
ROOT(root) T(find) T(.) T(-maxdepth) T(1) T(-type) T(d) T(!) T(-name) T(.) T(|) T(sort) T(>) T(a)
ROOT() UTILITY(rsync) FLAG(-a) FLAG(-v) FLAG(-l) FLAG(-z) FLAG(-p) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(yum) T(--nogpgcheck) T(localinstall) T(packagename.arch.rpm)
ROOT() UTILITY(shopt) FLAG(-s) ARGUMENT(extglob)<Option>
ROOT() PIPELINE() UTILITY(gcc) ARGUMENT(File)<File> UTILITY(sed) ARGUMENT(Program)<Program> UTILITY(tr) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(sed) ARGUMENT(Program)<Program> ARGUMENT(File)<File> UTILITY(tr) FLAG(-d) ARGUMENT(Regex)<Regex> UTILITY(column) FLAG(-s) ARGUMENT(Regex)<Regex> FLAG(-t)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> BRACKET() FLAG(-newer) ARGUMENT(File)<File> BINARYLOGICOP(-or) FLAG(-user) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT(root) T(find) T(*.1) T(-exec) T(tar) T(czf) T({}.tgz) T({}) T(--remove-files) T(;)
"ROOT(root) T(find) T(.) T(-type) T(f) T(-name) T(*.m4a) T(-exec) T(bash) T(-c) T(rm) T(""$0"") T({}) T(;)"
ROOT(root) T({) T(find) T(.) T(-name) T(*my) T(key) T(phrase*;) T(grep) T(-rl) T(my) T(key) T(phrase) T(*;) T(}) T(|) T(sed) T(s/^\.\///) T(|) T(sort) T(-u)
ROOT(root) T(alias) T(mkcd=_(){) T(mkdir) T($1;) T(cd) T($1;) T(};) T(_)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-path) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(md5sum) COMMANDSUBSTITUTION() UTILITY(which) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type> BRACKET() UNARYLOGICOP(!) FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-and) UNARYLOGICOP(!) FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-and) UNARYLOGICOP(!) FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-and) UNARYLOGICOP(!) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-delete)
ROOT() PIPELINE() UTILITY(tac) UTILITY(sed) ARGUMENT(Program)<Program> UTILITY(tac)
ROOT() UTILITY(ping) FLAG(-s) ARGUMENT(Quantity)<Quantity> ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-iname) ARGUMENT(Regex)<Regex> UTILITY(cpio) FLAG(-p) FLAG(-v) FLAG(-d) FLAG(-m) FLAG(-u) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0)
ROOT(root) T(find) T(Mainfolder) T(-type) T(f) T(>) T(outputfile)
ROOT() UTILITY(mkdir) FLAG(-p) COMMANDSUBSTITUTION() PIPELINE() UTILITY(cut) FLAG(-f) ARGUMENT(Number)<Number> FLAG(-d) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> UTILITY(sed) ARGUMENT(Program)<Program> UTILITY(sort) FLAG(-u)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> UTILITY(rename) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-depth) FLAG(-type) ARGUMENT(d)<Type> FLAG(-empty) FLAG(-exec::;) UTILITY(rmdir) ARGUMENT({})<Directory>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-gid) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-perm) ARGUMENT(Permission)<Permission>
ROOT() UTILITY(readlink) ARGUMENT(File)<File>
ROOT(root) T(find) T(./) T(-name) T(*.[ch]pp) T(-print) T(>) T(cscope.files)
ROOT(root) T(join) T(-j) T(Regex) T(<() T(sort) T(-k) T(Number) T(File)
ROOT(root) T(find) T(-type) T(f) T(-name) T(*.txt) T(-exec) T(install) T(-D) T({}) T(/dest/path/{}) T(;)
ROOT() COMMANDSUBSTITUTION() UTILITY(which) ARGUMENT(Regex)<Regex>
ROOT(root) T(pg_dump) T(-U) T(myUser) T(myDB) T(|) T(gzip) T(>) T(myDB.sql.gz)
ROOT(root) T(screen) T(-S) T(foo)
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(grep) COMMANDSUBSTITUTION() UTILITY(which) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-printf) ARGUMENT('%h\n')<Format> UTILITY(sort) UTILITY(uniq) UTILITY(xargs) FLAG(-n) ARGUMENT(Quantity)<Quantity> FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-I) ARGUMENT({})<Regex> UTILITY(echo) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(read) FLAG(-p) ARGUMENT(Regex)<Regex>
ROOT(root) T(dd) T(if=/path/to/source/file) T(bs=1) T(skip=100) T(count=250) T(|) T(md5sum)
ROOT() UTILITY(touch) ARGUMENT(File)<File>
ROOT() UTILITY(sed) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-regex) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(which) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UNARYLOGICOP(!) FLAG(-perm) ARGUMENT(Permission)<Permission>
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(head) FLAG(-n) ARGUMENT(Quantity)<Quantity> UTILITY(tail) FLAG(-n) ARGUMENT(Quantity)<Quantity>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-type) ARGUMENT(f)<Type> FLAG(-printf) ARGUMENT('%m%c%p')<Format> UTILITY(md5sum)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(rm) COMMANDSUBSTITUTION() PIPELINE() UTILITY(ls) FLAG(-t) UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(gzip) FLAG(-d) FLAG(-c) ARGUMENT(Regex)<Regex> UTILITY(tar) FLAG(-x) FLAG(-v) FLAG(-f) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print) ARGUMENT(Path)<Path>
ROOT() PIPELINE() UTILITY(cut) FLAG(-f) ARGUMENT(Number)<Number> ARGUMENT(File)<File> UTILITY(sort) UTILITY(uniq) FLAG(-c) UTILITY(sort) FLAG(-n) FLAG(-r)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex>
"ROOT(root) T(alias) T(cleanup=rm) T(-Rf) T(`pwd`/{foo,bar,baz})"
ROOT(root) T(rsync) T(-avz) T(--rsh=ssh) T(-p$2) T(key.pub) T($1:~/.ssh/key.pub)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(head) FLAG(-) ARGUMENT(Quantity)<Quantity>
ROOT() PIPELINE() UTILITY(true) UTILITY(cd) ARGUMENT(Directory)<Directory>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(-not) FLAG(-path) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> UTILITY(sed) FLAG(-e) ARGUMENT(Program)<Program> UTILITY(awk) ARGUMENT(Program)<Program> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(chgrp) ARGUMENT({})<Regex>
ROOT(root) T(find) T(.) T(-name) T(*.doc) T(|) T(while) T(read) T(i;) T(do) T(antiword) T(-i) T(1) T(${i}) T(>${i/doc/txt};) T(done)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(seq) ARGUMENT(Number)<Number> ARGUMENT(Number)<Number>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(tr) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> UTILITY(tac) UTILITY(tr) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> UTILITY(grep) FLAG(-E) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-execdir::;) UTILITY(rm) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-ls) UTILITY(head)
ROOT() PIPELINE() UTILITY(bind) FLAG(-P) UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-l) FLAG(-i) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(read) FLAG(-n) ARGUMENT(Quantity)<Quantity> FLAG(-s)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(-not) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-depth) FLAG(-print0)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(grep) FLAG(--color) ARGUMENT(-aHn)<Option> ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan> UTILITY(sed) FLAG(-e) ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(-not) FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-type) ARGUMENT(f)<Type> FLAG(-print) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-i) FLAG(-c) FLAG(-l) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT(root) T(ps) T(aux) T(|) T(awk) T({print) T($11}) T(|) T(grep) T(-x) T(-e) T(/.*) T(|) T(xargs) T(dirname) T(|) T(head)
ROOT() UTILITY(chmod) ARGUMENT(+Permission)<Permission> ARGUMENT(File)<File>
ROOT() UTILITY(rsync) FLAG(--blocking-io) ARGUMENT(File)<File> ARGUMENT(File)<File> ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print) FLAG(-depth)
ROOT(root) T(find) T(.) T(-name) T(some_pattern) T(-print0) T(|) T(xargs) T(-0) T(-J) T(%) T(mv) T(%) T(target_location)
ROOT(root) T(find) T(Path) T(-mtime) T(+Timespan) T(|) T(xargs) T(-I) T({}) T(tar) T(-c) T(-z) T(-v) T(-P) T(-f) T($() T(date) T(+%F)
ROOT() PIPELINE() UTILITY(find) UTILITY(grep) FLAG(-E) ARGUMENT(Regex)<Regex>
"ROOT() UTILITY(mount) ARGUMENT(Regex)<Regex> FLAG(-o) ARGUMENT(remount,umask=000)<Option>"
ROOT(root) T(fold) T(-w130) T(file) T(|) T(...)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(Permission)<Permission>
ROOT() UTILITY(apropos) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(echo) FLAG(-e) ARGUMENT(Regex)<Regex> UTILITY(ssh-keygen) FLAG(-q) FLAG(-t) ARGUMENT(rsa)<Type> FLAG(-N) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(File)<File>
ROOT(root) T(zcat) T($() T(find) T(Path) T(-name) T(Regex)
ROOT() PIPELINE() UTILITY(nl) FLAG(-b) ARGUMENT(a)<Option> FLAG(-n) ARGUMENT(ln)<Format> ARGUMENT(File)<File> UTILITY(grep) FLAG(-C) ARGUMENT(Quantity)<Quantity> ARGUMENT(Regex)<Regex>
ROOT(root) T(SRC_DIR=$(cd) T(..;) T(pwd))
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(-prune)
ROOT(root) T(ant) T(2>&1|tee) T(build.log)
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print) FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mmin) ARGUMENT(-Quantity)<Quantity>
ROOT(root) T(diff) T(-u) T(file1) T(file2) T(>) T(file3)
ROOT() UTILITY(mount) FLAG(-t) ARGUMENT(linprocfs)<Option> ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
"ROOT(root) T(ipcs) T(|) T(nawk) T(-v) T(u=`whoami`) T(/Shared/,/^$/{) T(if($6==0&&$3==u)) T(print) T(""ipcrm) T(shm"",$2,"";""}/Semaphore/,/^$/{) T(if($3==u)) T(print) T(""ipcrm) T(sem"",$2,"";""}) T(|) T(/bin/sh)"
ROOT() PIPELINE() UTILITY(set) UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(cat) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-daystart) FLAG(-mtime) ARGUMENT(-Timespan)<Timespan> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> UTILITY(xargs) FLAG(-i) FLAG(-I) ARGUMENT({})<Regex> UTILITY(cp) ARGUMENT({})<File> ARGUMENT(File)<File> ARGUMENT({})<File>
ROOT(root) T(rsync) T(-avz) T(--chmod=ug=rwx) T(--chmod=o=rx) T(-e) T(ssh) T(src) T(dest)
ROOT() UTILITY(file) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() UTILITY(bind) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type> FLAG(-printf) ARGUMENT('%f\n')<Format>
ROOT() UTILITY(chown) FLAG(-R) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-print) FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-exec::+) UTILITY(cat) ARGUMENT({})<File>
ROOT(root) T(find) T(-printf) T(%p) T(%T@\n) T(|) T(sort) T(>) T(file1)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(who) UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) FLAG(-r) FLAG(-f) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(touch) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-atime) ARGUMENT(+Timespan)<Timespan> FLAG(-exec::;) UTILITY(rm) FLAG(-i) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(!) FLAG(-newer) ARGUMENT(File)<File> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(comm) T(-2) T(-3) T(<() T(sort) T(-n) T(File)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() UTILITY(history) FLAG(-s) ARGUMENT(Quantity)<Quantity>
ROOT(root) T(command) T(|) T(more)
ROOT() PIPELINE() UTILITY(history) UTILITY(tail) FLAG(-) ARGUMENT(Quantity)<Quantity> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(rev) ARGUMENT(File)<File> UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number> UTILITY(rev)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(tar) FLAG(-c) FLAG(-v) FLAG(-f) ARGUMENT(File)<File> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-exec::;) UTILITY(rm) FLAG(-r) FLAG(-f) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(ln) FLAG(-s) ARGUMENT({})<File> ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-atime) ARGUMENT(+Timespan)<Timespan> FLAG(-exec::;) UTILITY(ls) UTILITY(wc) FLAG(-l)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() UTILITY(md5sum) COMMANDSUBSTITUTION() UTILITY(which) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(rm) FLAG(-v) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-regextype) ARGUMENT(posix-egrep)<Type> UNARYLOGICOP(!) FLAG(-iregex) ARGUMENT(Regex)<Regex> UNARYLOGICOP(!) FLAG(-empty) FLAG(-type) ARGUMENT(d)<Type>
ROOT() UTILITY(diff) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-r) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(du) FLAG(-a) ARGUMENT({})<File> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(cat) COMMANDSUBSTITUTION() UTILITY(find) ARGUMENT(Path)<Path>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-atime) ARGUMENT(-Timespan)<Timespan> FLAG(-type) ARGUMENT(-f)<Type>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-gid) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(chown) FLAG(-h) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(split) FLAG(--suffix-length) ARGUMENT(Quantity)<Quantity> FLAG(--lines) ARGUMENT(Quantity)<Quantity> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-daystart) FLAG(-mtime) ARGUMENT(Timespan)<Timespan>
ROOT(root) T(./a.out) T(|&) T(tee) T(output)
ROOT() PIPELINE() UTILITY(gzip) FLAG(--help) UTILITY(less)
ROOT() PIPELINE() UTILITY(ps) FLAG(-e) FLAG(-f) UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT(root) T(ps) T(aux) T(|) T(grep) T(-ie) T(amarok) T(|) T(awk) T({print) T($2}) T(|) T(xargs) T(kill) T(-9)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-ls)
ROOT(root) T(find) T(.) T(-type) T(d) T(-print) T(-exec) T(bash) T(-c) T(find) T({}) T(-type) T(f) T(-depth) T(1) T(-perm) T(+0111) T(|) T(sort) T(-r) T(;)
ROOT() UTILITY(mkdir) FLAG(-p) ARGUMENT(Directory)<Directory>
ROOT(root) T(diff) T(<() T(find) T(Path) T(-exec) T(readlink) T(-f) T({}) T(\;) T(|) T(sed) T(Program) T(|) T(sort) T(|) T(uniq)
ROOT() UTILITY(split) FLAG(-n) ARGUMENT(Quantity)<Quantity> ARGUMENT(File)<File>
ROOT() COMMANDSUBSTITUTION() UTILITY(mktemp) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(rsync) FLAG(-a) FLAG(-z) FLAG(--delete) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(mv) FLAG(-f) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(cp) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT() UTILITY(mount) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> FLAG(-o) ARGUMENT(loop)<Option>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-delete)
ROOT() UTILITY(ln) FLAG(--symbolic) FLAG(--interactive) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(Size)<Size>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(ls) FLAG(-s) ARGUMENT({})<File> UTILITY(sort) FLAG(-n) FLAG(-r) UTILITY(head) FLAG(-) ARGUMENT(Quantity)<Quantity>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-i) FLAG(-l) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(!) FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-exec::+) UTILITY(file) ARGUMENT({})<File> UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-L) FLAG(-type) ARGUMENT(l)<Type>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-print0) UTILITY(grep) FLAG(-v) FLAG(-E) FLAG(-z) FLAG(-Z) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> FLAG(-ls)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-newer) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(d)<Type> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() PIPELINE() UTILITY(who) UTILITY(grep) FLAG(-v) ARGUMENT(Regex)<Regex> UTILITY(wc) FLAG(-l)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-newer) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-exec::;) UTILITY(ls) FLAG(-l) FLAG(-h) ARGUMENT({})<File> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT(root) T(find) T(.) T(-name) T(*.txt) T(|) T(xargs) T(-o) T(vim)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-v) FLAG(-c) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UNARYLOGICOP(!) FLAG(-size) ARGUMENT(Size)<Size>
ROOT() UTILITY(mktemp) FLAG(-t)
ROOT() UTILITY(read) FLAG(-p) ARGUMENT(Regex)<Regex> FLAG(-r) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(-not) FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-not) FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-not) FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(tee)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type> FLAG(-empty) FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(Permission)<Permission>
ROOT() UTILITY(join) FLAG(-v) ARGUMENT(Quantity)<Quantity> ARGUMENT(File)<File> PROCESSSUBSTITUTION(<) UTILITY(nl) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number>
"ROOT(root) T(find) T($sourcedir) T(-type) T(f) T(-name) T(*.type) T(-exec) T(sh) T(-c) T(for) T(f;) T(do) T(cp) T(""$f"") T(""$0"";) T(done) T($targetdir) T({}) T(+)"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-group) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(grep) FLAG(-E) FLAG(-o) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> UTILITY(tr) FLAG(-d) ARGUMENT(Regex)<Regex>
ROOT(root) T(egrep) T(-v) T(^\s*#) T(/etc/launchd.conf) T(|) T(launchctl)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UNARYLOGICOP(-not) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-print0) UTILITY(du) FLAG(-h) UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(cut) FLAG(-f) ARGUMENT(Number)<Number> UTILITY(grep) FLAG(-v) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(/var/www/*) T(-type) T(d) T(-print) T(|) T(tar) T(-zcpvf) T({}.tar.gz) T(-C) T(/var/www/) T(--files-from) T(-) T({}) T(;)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> UTILITY(sed) FLAG(-e) ARGUMENT(Program)<Program> FLAG(-e) ARGUMENT(Program)<Program> UTILITY(grep) FLAG(-v) ARGUMENT(Regex)<Regex> UTILITY(awk) ARGUMENT(Program)<Program> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(chgrp) ARGUMENT({})<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) FLAG(-r) FLAG(-f) ARGUMENT({})<File>
ROOT() UTILITY(pstree)
ROOT() UTILITY(rsync) ARGUMENT(File)<File> ARGUMENT(File)<File> FLAG(-a) FLAG(--copy-links) FLAG(-v)
ROOT() PIPELINE() UTILITY(ping) FLAG(-c) ARGUMENT(Quantity)<Quantity> FLAG(-n) ARGUMENT(Regex)<Regex> UTILITY(awk) FLAG(-F) ARGUMENT(Regex)<Regex> FLAG(-v) ARGUMENT(Program)<Program> ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(wc) FLAG(-l) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-size) ARGUMENT(Size)<Size> FLAG(-print) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rmdir) ARGUMENT({})<Directory>
ROOT(root) T(sort) T(<() T(sort) T(-u) T(File)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-cmin) ARGUMENT(+Quantity)<Quantity> FLAG(-exec::;) UTILITY(basename) ARGUMENT({})<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-newermt) ARGUMENT(Regex)<Regex> FLAG(-ls)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-newerct) ARGUMENT(Regex)<Regex> FLAG(-print) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(ls) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(ls) ARGUMENT(File)<File> UTILITY(xargs) FLAG(-n) ARGUMENT(Quantity)<Quantity> FLAG(-I) ARGUMENT({})<Regex> UTILITY(chown) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mmin) ARGUMENT(-Quantity)<Quantity> UTILITY(xargs) FLAG(-r) FLAG(-I) ARGUMENT({})<Regex> UTILITY(ls) FLAG(-l) ARGUMENT({})<File>
ROOT() UTILITY(ssh) FLAG(-L) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(/home/vmail/) T(-type) T(d) T(-path) T(*/*/Maildir/.LearnAsSpam/new) T(-exec) T(sh) T(-c) T((cd) T({}) T(&&) T(mv) T(./*) T(../../.Junk/new)) T(;)
ROOT() UTILITY(grep) FLAG(-i) FLAG(-H) ARGUMENT(Regex)<Regex> COMMANDSUBSTITUTION() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(lshw) T(-class) T(cpu|grep) T(^) T(width|uniq|awk) T({print) T($2})
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-user) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-amin) ARGUMENT(-Quantity)<Quantity> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(rm) ARGUMENT(File)<File> ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-printf) ARGUMENT('.')<Format> UTILITY(wc) FLAG(-c)
ROOT() COMMANDSUBSTITUTION() UTILITY(which) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(dig) FLAG(-t) ARGUMENT(SRV)<Type> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(dirname) COMMANDSUBSTITUTION() UTILITY(readlink) FLAG(-f) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> FLAG(-f) FLAG(-atime) ARGUMENT(+Timespan)<Timespan>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(ls) FLAG(-d) FLAG(-r) FLAG(-t) ARGUMENT({})<File> UTILITY(tail) FLAG(-n) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0)
ROOT(root) T(cat) T(backup.img.gz) T(|) T(gunzip) T(|) T(dd) T(of=/dev/sdb)
ROOT(root) T(sudo) T(su) T(-) T(jenkins)
ROOT() PIPELINE() UTILITY(mount) UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) FLAG(-d) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(d)<Type> FLAG(-exec::+) UTILITY(rm) FLAG(-r) FLAG(-f) ARGUMENT({})<File>
ROOT() UTILITY(date) FLAG(-u) ARGUMENT('+%Y-%m-%dT%k:%M:%S%z')<Format>
ROOT() PIPELINE() UTILITY(bind) FLAG(-l) UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(wc) FLAG(-l) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(sort) FLAG(--unique) UTILITY(wc) FLAG(-l)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-ok::;) UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(cat) T($() T(uname) T(-r)
ROOT() UTILITY(diff) FLAG(-q) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-depth) FLAG(-type) ARGUMENT(d)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rmdir) ARGUMENT({})<Directory>
ROOT() PIPELINE() UTILITY(du) FLAG(-h) FLAG(--max-depth) ARGUMENT(Quantity)<Quantity> ARGUMENT(File)<File> UTILITY(sort) FLAG(-n) FLAG(-r)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-xdev) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(paste) FLAG(-d) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> UTILITY(sed) ARGUMENT(Program)<Program>
"ROOT(root) T(alias) T(clean=rm) T(-rf) T(""#""*) T("".""*~) T(*~) T(*.bak) T(*.dvi) T(*.aux) T(*.log)"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(rmdir) ARGUMENT(Directory)<Directory>
ROOT() UTILITY(rsync) FLAG(-P) FLAG(-r) FLAG(-t) FLAG(--size-only) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-user) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(mktemp) FLAG(--tmpdir) ARGUMENT(Directory)<Directory> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(diff) T(-q) T(<() T(sort) T(File)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(.) T(-name) T(*.php) T(-exec) T(chmod) T(755) T({}) T(;) T(>) T(logfile.txt)
ROOT() PIPELINE() UTILITY(who) UTILITY(sed) FLAG(-e) ARGUMENT(Program)<Program> UTILITY(head) FLAG(-n) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(basename) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-newer) ARGUMENT(File)<File> FLAG(-exec::;) UTILITY(tar) FLAG(-u) FLAG(-v) FLAG(-f) ARGUMENT(File)<File> ARGUMENT({})<File>
ROOT() UTILITY(file) ARGUMENT(File)<File>
"ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-printf) ARGUMENT(""found\n"")<Format>"
ROOT() UTILITY(cd) FLAG(-P) ARGUMENT(Directory)<Directory>
ROOT() UTILITY(sed) FLAG(-i) ARGUMENT(Program)<Program> ARGUMENT(File)<File>
ROOT() UTILITY(split) FLAG(-l) ARGUMENT(Quantity)<Quantity> ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(.) T(-type) T(l) T(-exec) T(test) T(!) T(-e) T({}) T(;) T(-printf) T(%Y) T(%p\n)
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(sed) ARGUMENT(Program)<Program>
"ROOT() UTILITY(mount) FLAG(-o) ARGUMENT(rw,remount)<Option> ARGUMENT(Regex)<Regex>"
ROOT() UTILITY(chmod) ARGUMENT(+Permission)<Permission> ARGUMENT(File)<File>
ROOT(root) T(find) T(/home/nobody/public_html) T(-type) T(f) T(-name) T(.htaccess) T(-exec) T(replace) T(php_admin_flag) T(#php_admin_flag) T(--) T({}) T(;)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mmin) ARGUMENT(-Quantity)<Quantity>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-s) ARGUMENT(Quantity)<Quantity> FLAG(-I) ARGUMENT({})<Regex> UTILITY(rename) ARGUMENT(Regex)<Regex> ARGUMENT({})<Regex>
ROOT(root) T(find) T(.) T(-name) T(*.png) T(|) T(perl) T(match4th.pl) T(/tmp/search.txt) T(|) T(xargs) T(cp) T(-t) T(/tmp/results)
ROOT() UTILITY(awk) ARGUMENT(Program)<Program> ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-path) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UTILITY(wc) FLAG(-l)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-path) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-path) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune)
ROOT(root) T({) T(find) T(.) T(-name) T(*my) T(key) T(phrase*;) T(grep) T(-rl) T(my) T(key) T(phrase) T(.;) T(}) T(|) T(sort) T(-u)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-o) FLAG(-m) ARGUMENT(Quantity)<Quantity> FLAG(-h) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> UTILITY(sort) UTILITY(uniq) FLAG(-c)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-user) ARGUMENT(Regex)<Regex> FLAG(-iname) ARGUMENT(Regex)<Regex>
"ROOT(root) T(...|) T(awk) T({print) T($5""\t\t"") T($3""\t""$4}|column) T(-t)"
ROOT(root) T(ps) T(aux) T(|) T(grep) T(mysql) T(|) T(grep) T(-v) T(grep)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UNARYLOGICOP(!) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan> UTILITY(grep) FLAG(-E) FLAG(-v) FLAG(-f) ARGUMENT(Regex)<File>
ROOT() PIPELINE() UTILITY(tac) ARGUMENT(File)<File> UTILITY(sed) FLAG(-n) ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-ctime) ARGUMENT(-Timespan)<Timespan> FLAG(-exec::;) UTILITY(sed) FLAG(-i) ARGUMENT(Regex)<Program> FLAG(-e) ARGUMENT(Program)<Program> FLAG(-e) ARGUMENT(Program)<Program> ARGUMENT({})<File> ARGUMENT(File)<File> UTILITY(wc) FLAG(-l)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-delete)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(sed) ARGUMENT(Program)<Program> UTILITY(sh)
ROOT() UTILITY(uname) FLAG(-m)
ROOT() PIPELINE() UTILITY(jobs) FLAG(-p) UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> FLAG(-exec::;) UTILITY(cat) ARGUMENT({})<File> FLAG(-exec::;) UTILITY(echo)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-P) FLAG(-type) ARGUMENT(f)<Type>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> FLAG(-depth) FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-ignore_readdir_race) FLAG(-type) ARGUMENT(f)<Type> FLAG(-cmin) ARGUMENT(Quantity)<Quantity> FLAG(-delete)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(l)<Type> FLAG(-print0)
ROOT() UTILITY(tmux) FLAG(-2)
ROOT(root) T(find) T(.) T(-type) T(f) T(-print0) T(|) T(xargs) T(-0) T(perl) T(-nle) T(print) T(if) T(/^.*666$/)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::+) UTILITY(wc) FLAG(-l) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(Size)<Size>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-user) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT(root) T(find) T(.) NT(<n>) T(-size) T(+700k) T(-and) T(-size) T(-1000k) T(-exec) T(du) T(-Hs) T({}) T(;) T(2>/dev/null)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(Permission)<Permission>
ROOT() PIPELINE() UTILITY(ls) FLAG(-d) FLAG(-1) ARGUMENT(File)<File> UTILITY(tr) FLAG(-d) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(mkdir) ARGUMENT(Directory)<Directory>
ROOT() PIPELINE() UTILITY(seq) ARGUMENT(Number)<Number> UTILITY(paste) FLAG(-s) FLAG(-d) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-amin) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-delete)
ROOT(root) T(echo) T(find) T(.) T(-atime) T(+7) T(-o) T(-size) T(+`expr) T(10) T(*) T(1024) T(*) T(2`) T(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(ls) FLAG(-l) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-regextype) ARGUMENT(posix-egrep)<Type> FLAG(-regex) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(grep) FLAG(-r) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT(root) T(find) T(/source_path) T(-name) T(*.data) T(|) T(while) T(read) T(-r) T(filename;) T(do) T(printf) T(print) T(version:) T(cp) T(%s) T(%s\n) T(${filename}) T($(printf) T(%sn) T(${filename}) T(|) T(sed) T(s/^.*[/](category[^/]*)[/](.*[.]data)$//target_path/1_2/);) T(done)
"ROOT(root) T(find) T(.) T(-iname) T(.svn) T(-exec) T(bash) T(-c) T(ls) T(-l) T(""{}"") T(|) T(wc) T(-l) T(;)"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type> FLAG(-user) ARGUMENT(Regex)<Regex> FLAG(-perm) ARGUMENT(-Permission)<Permission>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(grep) FLAG(-i) FLAG(-l) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT(root) T(find) T(-maxdepth) T(1) T(-type) T(d) T(|) T(sort) T(|) T(while) T(read) T(-r) T(dir;) T(do) T(n=$(find) T($dir) T(|) T(wc) T(-l);) T(let) T(n--;) T(if) T([) T($n) T(-eq) T(0) T(];) T(then) T(printf) T(%4d) T(:) T(%s\n) T($n) T($dir;) T(fi;) T(done)
ROOT() UTILITY(pstree) FLAG(-a) FLAG(-A) FLAG(-p) COMMANDSUBSTITUTION() PIPELINE() UTILITY(ps) FLAG(-e) FLAG(-j) FLAG(-H) UTILITY(awk) FLAG(-v) ARGUMENT(Program)<Program> ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(tr) FLAG(-d) FLAG(-c) ARGUMENT(Regex)<Regex> UTILITY(wc) FLAG(-c)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-nogroup) ARGUMENT(Path)<Path> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(exec) T(/usr/bin/find) T($@)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(Permission)<Permission> FLAG(-type) ARGUMENT(d)<Type> FLAG(-exec::;) UTILITY(ls) FLAG(-l) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(awk) ARGUMENT(Program)<Program> ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UTILITY(cpio) FLAG(-p) FLAG(-v) FLAG(-d) FLAG(-m) FLAG(-B) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(mkdir) ARGUMENT(Directory)<Directory>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::+) UTILITY(wc) FLAG(-c) ARGUMENT({})<File> UTILITY(tail) FLAG(-n) ARGUMENT(Quantity)<Quantity> UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(file) ARGUMENT({})<File> UTILITY(awk) FLAG(-F) ARGUMENT(Regex)<Regex> ARGUMENT(Program)<Program>
ROOT(root) T({) T(time) T(sleep) T(1) T(2>) T(sleep.stderr) T(;) T(}) T(2>) T(time.txt)
ROOT(root) T(alias) T(foo=BAR=baz)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-nouser)
ROOT() UTILITY(mkdir) FLAG(--parents) ARGUMENT(Directory)<Directory>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-daystart) FLAG(-atime) ARGUMENT(Timespan)<Timespan> FLAG(-ls)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-regex) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-newer) ARGUMENT(File)<File> FLAG(-print)
ROOT() UTILITY(ssh-keygen) FLAG(-b) ARGUMENT(Quantity)<Quantity> FLAG(-t) ARGUMENT(rsa)<Type> FLAG(-f) ARGUMENT(File)<File> FLAG(-C) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(ln) FLAG(-s) FLAG(-f) ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-cmin) ARGUMENT(+Quantity)<Quantity> FLAG(-cmin) ARGUMENT(-Quantity)<Quantity>
ROOT() UTILITY(less) FLAG(-S) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-depth) FLAG(-empty) FLAG(-delete)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(rename) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) FLAG(-f) ARGUMENT({})<File>
"ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-printf) ARGUMENT(""%s %p\n"")<Format> UTILITY(sort) FLAG(-r) FLAG(-n) UTILITY(head) FLAG(-n) ARGUMENT(Quantity)<Quantity>"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-regex) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(find) FLAG(-x) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mmin) ARGUMENT(-Quantity)<Quantity> FLAG(-mmin) ARGUMENT(+Quantity)<Quantity>
ROOT() PIPELINE() UTILITY(find) FLAG(-L) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-r) FLAG(-n) ARGUMENT(Quantity)<Quantity> FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(w) UTILITY(head) FLAG(-) ARGUMENT(Quantity)<Quantity> UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number> UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number> UTILITY(tr) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-follow) FLAG(-inum) ARGUMENT(Quantity)<Quantity>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-regex) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-printf) ARGUMENT('%T+ %p\n')<Format> UTILITY(sort) UTILITY(head) FLAG(-n) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(seq) ARGUMENT(Number)<Number>
ROOT(root) T(diff) T(--new-line-format=) T(--unchanged-line-format=) T(<(sort) T(file1)) T(<(sort) T(file2))
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-I) FLAG(-Z) FLAG(-l) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(+Size)<Size>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-print)
ROOT() UTILITY(gzip) FLAG(-l) ARGUMENT(Regex)<Regex>
"ROOT() UTILITY(watch) FLAG(-n) ARGUMENT(Quantity)<Quantity> UTILITY(ps) FLAG(-C) ARGUMENT(java)<Option> FLAG(-o) ARGUMENT(pcpu,state,cputime,etimes)<Format>"
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-ls) UTILITY(awk) ARGUMENT(Program)<Program>
ROOT(root) T(ln) T(-s) T($() T(readlink) T(-f) T(File)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-regex) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> BRACKET() UNARYLOGICOP(!) FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() UTILITY(cal) ARGUMENT(DateTime)<DateTime> ARGUMENT(DateTime)<DateTime>
ROOT() PIPELINE() UTILITY(sort) FLAG(-n) ARGUMENT(File)<File> UTILITY(uniq) FLAG(-c)
ROOT() UTILITY(sed) FLAG(-i) ARGUMENT(Regex)<Program> ARGUMENT(Program)<File> ARGUMENT(File)<File>
ROOT() UTILITY(cat) ARGUMENT(File)<File>
ROOT() UTILITY(fg) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(od) FLAG(-x) FLAG(-c) FLAG(-b) ARGUMENT(File)<File>
ROOT(root) T(find) T(.) T(-name) T(*.swp) T(>) T(rm)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan> FLAG(-ls)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(Permission)<Permission>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-print0) FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> FLAG(-0) UTILITY(mv) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT(root) T(find) T(.) T(-name) T(“*.jar”) T(-print) T(-exec) T(jar) T(tvf) T({}) T(;) T(|grep) T(-E) T(“jar$|.class”)
ROOT() PIPELINE() UTILITY(nl) FLAG(-b) ARGUMENT(a)<Option> ARGUMENT(File)<File> UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-uid) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() PIPELINE() UTILITY(grep) FLAG(-a) FLAG(-R) FLAG(-e) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> UTILITY(md5sum) UTILITY(cut) FLAG(-c) ARGUMENT(-Number)<Number>
ROOT(root) T(ln) T(-s) T($() T(pwd)
ROOT(root) T(top) T(-l) T(1) T(-s) T(0) T(-i) T(1) T(-stats) T(vprvt) T(-pid) T(PID)
ROOT(root) T(1) T(down) T(vote) T(wc) T(-cl) T(`find) T(.) T(-name) T(*.php) T(-type) T(f`)
ROOT() UTILITY(chown) FLAG(-R) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(-not) FLAG(-path) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-not) FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-i) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) FLAG(-r) FLAG(-f) ARGUMENT({})<File> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> FLAG(-0) UTILITY(rm) FLAG(-r) FLAG(-v) FLAG(-f) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(file) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(sort) FLAG(-n)
ROOT(root) T(grep) T(-r) T(-l) T(searchtext) T(.) T(|) T(sort) T(|) T(uniq) T(|) T(xargs) T(perl) T(-e) T(s/matchtext/replacetext/) T(-pi)
ROOT() UTILITY(rsync) FLAG(-a) FLAG(-H) FLAG(-v) FLAG(-z) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(grep) FLAG(-i) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(ls) FLAG(-l) FLAG(-d) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(cut) FLAG(-c) ARGUMENT(Number)<Number>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::+) UTILITY(grep) FLAG(-l) OPERATOR(--) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-l) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(tree) FLAG(-a) FLAG(-f)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::+) UTILITY(cp) FLAG(-t) ARGUMENT(Directory)<Directory> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-perm) ARGUMENT(Permission)<Permission> FLAG(-print) FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
"ROOT(root) T(mv) T($() T(find) T(Path) T($() T(find) T(Path) T(-name) T(Regex) T(-printf) T(""%h\n"") T(|) T(uniq)"
ROOT() PIPELINE() UTILITY(w) UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(mv) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT(root) T(gunzip) T(-c) T(file.tar.gz) T(|) T(tar) T(t) T(>) T(/dev/null)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(ls) ARGUMENT({})<File>
ROOT(root) T(diff) T(--brief) T(<() T(awk) T(Program) T(Program)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UNARYLOGICOP(!) FLAG(-perm) ARGUMENT(Permission)<Permission> UTILITY(head)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(ls) FLAG(-F) FLAG(-l) FLAG(-t) FLAG(-r)
ROOT() UTILITY(date) FLAG(-d) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(cd) COMMANDSUBSTITUTION() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(dirname) ARGUMENT({})<Regex>
ROOT(root) T(find) T(.) T(-type) T(f) T(-exec) T(cat) T({}) T(;) T(>) T(out.txt)
ROOT() UTILITY(finger) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(ls) FLAG(-l) FLAG(-t) ARGUMENT({})<File> UTILITY(head)
ROOT(root) T(find) T(.) T(-type) T(f) NT(<n>) T(-iname) T(.cpp) T(-o) T(-iname) T(.hpp) T(-o) T(-iname) T(.c) T(-o) T(-iname) T(.h) T(-o) T(-iname) T(.cc) T(-o) T(-iname) T(.hh) T(-print) T(|) T(xargs) T(etags) T(-a)
ROOT(root) T(diff) T(--new-line-format=) T(--unchanged-line-format=) T(file1) T(file2)
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(split) FLAG(-l) ARGUMENT(Quantity)<Quantity>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-l) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(md5sum) ARGUMENT(File)<File> UTILITY(awk) ARGUMENT(Program)<Program> UTILITY(sort) UTILITY(uniq) FLAG(-d)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-L) FLAG(-samefile) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(-Permission)<Permission> FLAG(-print)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(ls) FLAG(-l) FLAG(-r) FLAG(-t) ARGUMENT({})<File> UTILITY(awk) FLAG(-F) ARGUMENT(Regex)<Regex> ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(sed) ARGUMENT(Program)<Program> UTILITY(column) FLAG(-t)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-iname) ARGUMENT(Regex)<Regex>
"ROOT(root) T(top) T(-p) T(`pgrep) T(process-name) T(|) T(tr) T(\n) T(,) T(|) T(sed) T(s/,$//`)"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(Permission)<Permission>
ROOT(root) T(find) T(./) T(-type) T(f) T(-ctime) T(-7) T(-exec) T(ls) T({}) T(;) T(>) T(new.files)
ROOT(root) T(find) T($PWD) T(-name) T(file.ext) T(-exec) T(sh) T(-c) T(echo) T($(dirname) T({})) T(;)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mmin) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(mkdir) FLAG(-p) ARGUMENT(Directory)<Directory>
ROOT() UTILITY(true)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-fstype) ARGUMENT(ext3)<Type> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(pwd) T(|) T(tr) T(-d) T(\n) T(|) T(pbcopy)
"ROOT() UTILITY(mount) FLAG(-o) ARGUMENT(remount,rw)<Option> ARGUMENT(Regex)<Regex>"
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> FLAG(-0) UTILITY(cp) FLAG(-v) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(sort) FLAG(-r) FLAG(-h)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(chown) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(du) FLAG(-s) FLAG(-b) ARGUMENT(File)<File> UTILITY(cut) FLAG(-f) ARGUMENT(Number)<Number>
ROOT() PIPELINE() UTILITY(mount) UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(echo) ARGUMENT({})<Regex>
ROOT(root) T(ls) T(-ltr) T(|) T(grep) T(Mar) T(4) T(|) T(awk) T({print) T(9}) T(|) T(xargs) T(zcat) T(-fq) T(|) T(grep) T(12345)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(!) FLAG(-empty) FLAG(-type) ARGUMENT(d)<Type>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(tee) FLAG(-a) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-print0)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type> FLAG(-print) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(echo) ARGUMENT(Regex)<Regex> ARGUMENT({})<Regex>
ROOT(root) T(find) T(.) T(-printf) T(%P\0) T(|) T(sort) T(-z) T(|) T(while) T(IFS=) T(read) T(-d) T(-r) T(f;) T(do) T(echo) T($(uuid)) T($f;) T(done)
"ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-printf) ARGUMENT(""%s %p\n"")<Format> UTILITY(sort) FLAG(-n) FLAG(-r) UTILITY(head) FLAG(-n) ARGUMENT(Quantity)<Quantity> UTILITY(awk) ARGUMENT(Program)<Program>"
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT(root) T(time) T(-f%e) T(sleep) T(1)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-perm) ARGUMENT(Permission)<Permission> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(file) ARGUMENT({})<File> UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(Permission)<Permission> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(ls) FLAG(-l) ARGUMENT({})<File>
ROOT() UTILITY(source) COMMANDSUBSTITUTION() UTILITY(which) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-daystart) FLAG(-mtime) ARGUMENT(-Timespan)<Timespan>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(rm) FLAG(-f) FLAG(-v) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(ls) ARGUMENT(File)<File>
ROOT(root) T(find) T(/home/hobbes/) T(/home/calvin/) T(-name) T(“*.txt”) T(2>/dev/null)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-exec::;) UTILITY(basename) ARGUMENT({})<Regex>
ROOT() UTILITY(readlink) FLAG(-f) COMMANDSUBSTITUTION() UTILITY(which) ARGUMENT(Regex)<Regex>
ROOT(root) T(ln) T(-s) T($() T(echo) T(Regex)
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(tee) FLAG(-a) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(sed) FLAG(-i) ARGUMENT(Program)<Program> ARGUMENT({})<File>
ROOT() UTILITY(cd) COMMANDSUBSTITUTION() UTILITY(basename) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(ifconfig) FLAG(-a) UTILITY(awk) ARGUMENT(Program)<Program> UTILITY(grep) FLAG(-o) FLAG(-E) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T($1) T(-name) T(?*) T(|) T(dd) T(bs=$((${#1}+3))) T(count=1) T(2>/dev/null)
ROOT() UTILITY(set) FLAG(-u)
ROOT() UTILITY(chown) FLAG(-R) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> ARGUMENT(File)<File> ARGUMENT(File)<File> ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-group) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(chgrp) FLAG(-h) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mmin) ARGUMENT(+Quantity)<Quantity>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(Path) T($() T(pwd)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-user) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(.)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<ReservedWord> UTILITY(grep) FLAG(-l) COMMANDSUBSTITUTION() UTILITY(printf) ARGUMENT(^\xef\xbb\xbf)<Format> ARGUMENT({})<ReservedWord> UTILITY(sed) ARGUMENT(s/^/found)<Program> ARGUMENT(BOM)<File> ARGUMENT(in:)<File> ARGUMENT(/)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-user) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(chown) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-daystart) FLAG(-ctime) ARGUMENT(Timespan)<Timespan> FLAG(-type) ARGUMENT(f)<Type>
ROOT() UTILITY(crontab) FLAG(-e) FLAG(-u) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iregex) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-cmin) ARGUMENT(+Quantity)<Quantity> FLAG(-exec::;) UTILITY(basename) ARGUMENT({})<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-mmin) ARGUMENT(-Quantity)<Quantity> FLAG(-print) UTILITY(head) FLAG(-n) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(!) FLAG(-path) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-and) UNARYLOGICOP(!) FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(gzip) FLAG(-d) ARGUMENT({})<Regex>
ROOT() UTILITY(du) FLAG(--max-depth) ARGUMENT(Quantity)<Quantity> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(ifconfig) ARGUMENT(Regex)<Regex> UTILITY(awk) ARGUMENT(Program)<Program> UTILITY(grep) FLAG(-E) FLAG(-o) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(.) T(-iname) T(*.jar) T(|) T(xargs) T(zipinfo)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-user) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(grep) FLAG(-q) FLAG(-i) FLAG(-F) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> FLAG(-delete)
ROOT() UTILITY(ls) FLAG(-l) OPERATOR(--) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(mv) ARGUMENT({})<File> ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(echo) ARGUMENT({})<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-path) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-perm) ARGUMENT(-Permission)<Permission> UNARYLOGICOP(!) FLAG(-type) ARGUMENT(l)<Type> FLAG(-ls)
ROOT() UTILITY(history) FLAG(-c)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-group) ARGUMENT(Regex)<Regex> FLAG(-print) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(chown) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() COMMANDSUBSTITUTION() UTILITY(whoami)
ROOT() PIPELINE() UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> UTILITY(source) ARGUMENT(File)<File>
ROOT(root) T(nice) T(-10) T(`alias) T(list) T(|) T(sed) T(s/^\(alias) T(\)\?[^=]\+='//;) T(s/'$//;`)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan>
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(tar) FLAG(-x)
ROOT() UTILITY(mkdir) ARGUMENT(Directory)<Directory>
ROOT() UTILITY(rsync) FLAG(-c) FLAG(-h) FLAG(-a) FLAG(-v) FLAG(-z) FLAG(-P) FLAG(--stats) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(tr) FLAG(-d) FLAG(-c) ARGUMENT(Regex)<Regex> UTILITY(fold) FLAG(-w) ARGUMENT(Quantity)<Quantity> UTILITY(head) FLAG(-) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) FLAG(-r) FLAG(-f) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(sort) FLAG(-t) ARGUMENT(Regex)<Regex> FLAG(-n) FLAG(-k) ARGUMENT(Number)<Number>
ROOT(root) T(find) T(.) T(|) T(grep) T(FooBar) T(|) T((mapfile) T(-t;) T(cp) T(${MAPFILE[@]}) T(~/foobar))
ROOT(root) T(screen) T(-S) T(demo) T(-p) T(1) T(-X) T(screen) T(/home/aa/scripts/outputs.sh)
ROOT() PIPELINE() UTILITY(finger) FLAG(-l) UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number> UTILITY(cut) FLAG(-c) ARGUMENT(Number)<Number> UTILITY(sort) UTILITY(uniq)
ROOT() UTILITY(ln) FLAG(-f) ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(ping) FLAG(-c) ARGUMENT(Quantity)<Quantity> FLAG(-b) ARGUMENT(Regex)<Regex> UTILITY(sed) FLAG(-n) ARGUMENT(Program)<Program> UTILITY(sort) UTILITY(uniq)
ROOT() PIPELINE() UTILITY(who) ARGUMENT(File)<File> ARGUMENT(Regex)<Regex> FLAG(--ips) UTILITY(awk) ARGUMENT(Program)<Program>
ROOT(root) T(ssh) T(-f) T(user@host) T(echo) T(foo;) T(sleep) T(5;) T(echo) T(bar)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-atime) ARGUMENT(Timespan)<Timespan> FLAG(-print)
"ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-printf) ARGUMENT('""%p""\n')<Format> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>"
ROOT(root) T(chown) T(-R) T($() T(whoami)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mmin) ARGUMENT(+Quantity)<Quantity> FLAG(-print)
"ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-printf) ARGUMENT(""cp '%p' '/tmp/test_%f'\n"")<Format> UTILITY(bash)"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(ln) FLAG(-s) ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
"ROOT(root) T(find) T(.) T(-maxdepth) T(2) T(-mindepth) T(2) T(-name) T(*.jpg) T(-exec) T(sh) T(-c) T(echo) T(mv) T(--) T(""$0"") T(""${0%%.jpg}.jpeg"") T({}) T(;)"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-regex) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0)
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(fold) FLAG(-w) ARGUMENT(Quantity)<Quantity>
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(head) FLAG(-n) ARGUMENT(Quantity)<Quantity>
ROOT(root) T(find) T(/home/*/public_html/) T(-type) T(f) NT(<n>) T(-iwholename) T(*/libraries/joomla/version.php) T(-o) T(-iwholename) T(*/libraries/cms/version.php) T(-o) T(-iwholename) T(*/libraries/cms/version/version.php) T(-print0) T(-exec) T(perl) T(-e) T(while) T((<>)) T({) T($release) T(=) T($1) T(if) T(m/) T(\$RELEASE\s+=) T(.([\d.]+).;/;) T($dev) T(=) T($1) T(if) T(m/) T(\$DEV_LEVEL\s+=) T(.(\d+).;/;) T(}) T(print) T(qq() T(=) T($release.$dev\n);) T({}) T(;)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-i) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT(root) T(pr) T(-n) T(find) T(.) T(-type) T(f) T(-mtime) T(-1) T(-print|lpr)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) FLAG(-f) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UTILITY(sed) FLAG(-e) ARGUMENT(Program)<Program> UTILITY(sort) UTILITY(uniq)
ROOT() UTILITY(shopt) FLAG(-s) ARGUMENT(lithist)<Option>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(tar) FLAG(-c) FLAG(-j) FLAG(-f) ARGUMENT(File)<File> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number> ARGUMENT(File)<File> UTILITY(paste) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-s)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-empty) FLAG(-delete)
ROOT() PIPELINE() UTILITY(echo) FLAG(-e) FLAG(-n) ARGUMENT(Regex)<Regex> UTILITY(column) FLAG(-t) UTILITY(sed) ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(grep) FLAG(-o) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> UTILITY(tr) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> UTILITY(sort) UTILITY(uniq) FLAG(-c) UTILITY(sort) FLAG(-n) FLAG(-r)
ROOT() UTILITY(sleep) ARGUMENT(Timespan)<Timespan>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-print0) UTILITY(grep) FLAG(-a) FLAG(-z) FLAG(-Z) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(file) ARGUMENT({})<File>
ROOT(root) T(rsync) T(-a) T(-v) T(-e) T(File) T(File)
ROOT() UTILITY(cat) COMMANDSUBSTITUTION() UTILITY(uname) FLAG(-r)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-execdir::;) UTILITY(touch) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(pwd) UTILITY(tr) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(who) FLAG(-m)
ROOT() UTILITY(column) FLAG(-t) FLAG(-s) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-regextype) ARGUMENT(posix-egrep)<Type> FLAG(-type) ARGUMENT(d)<Type> FLAG(-regex) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(du) FLAG(-c) FLAG(-s) FLAG(-x) FLAG(-b) ARGUMENT(File)<File> UTILITY(md5sum) FLAG(-c) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-size) ARGUMENT(-Size)<Size> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) FLAG(-f) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(ifconfig) ARGUMENT(Regex)<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> BRACKET() FLAG(-type) ARGUMENT(d)<Type> UNARYLOGICOP(!) FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) BRACKET() FLAG(-mtime) ARGUMENT(-Timespan)<Timespan> FLAG(-print)
ROOT() UTILITY(sed) FLAG(-i) ARGUMENT(Program)<Program> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-printf) ARGUMENT('%TY-%Tm-%Td %TT   %p\n')<Format> UTILITY(sort)
ROOT(root) T(comm) T(-2) T(-3) T(<() T(sort) T(File)
"ROOT(root) T(find) T(.) T(-type) T(f) T(-exec) T(sh) T(-c) T(printf) T(""%s) T(%s) T(\n"") T(""$(ls) T(-l) T($1)"") T(""$(md5sum) T($1)"") T({}) T({}) T(;)"
ROOT() UTILITY(uname) FLAG(-s)
ROOT(root) T(join) T(-v) T(Quantity) T(<() T(sort) T(File)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(ls) FLAG(-l) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(!) FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(readlink) FLAG(-f) COMMANDSUBSTITUTION() UTILITY(which) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(chown) FLAG(-R) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT(root) T(seq) T(10|jq) T(-s) T(add)
ROOT(root) T(su) T($USER) T(-c) T($WEB) T(--quiet) T(&)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print) FLAG(-exec::+) UTILITY(cat) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-daystart) FLAG(-mtime) ARGUMENT(-Timespan)<Timespan> FLAG(-type) ARGUMENT(f)<Type> UNARYLOGICOP(!) FLAG(-mtime) ARGUMENT(-Timespan)<Timespan> FLAG(-printf) ARGUMENT('%TY %p\n')<Format>
ROOT() PIPELINE() UTILITY(df) FLAG(-k) ARGUMENT(File)<File> UTILITY(tail) FLAG(-) ARGUMENT(Quantity)<Quantity> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(mktemp) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(readlink) FLAG(-e) ARGUMENT(File)<File>
ROOT(root) T(find) T(./js/) T(-type) T(f) T(-name) T(*.js) T(-exec) T(java) T(-jar) T(compiler.jar) T(--compilation_level) T(SIMPLE_OPTIMIZATIONS) T(--js) T({}) T(--js_output_file) T({}.compiled) T(;)
ROOT() UTILITY(rsync) FLAG(-a) FLAG(-v) FLAG(--rsync-path) ARGUMENT(Program)<Program> ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(echo) ARGUMENT({})<Regex>
ROOT() UTILITY(chgrp)
ROOT() UTILITY(split) ARGUMENT(File)<File>
ROOT(root) T(ls) T(-Art) T(*.sql.gz) T(|tail) T(-n) T(1) T(|xargs) T(gunzip) T(-c) T(|) T(mysql) T(--user=user) T(--password=password) T(database)
ROOT() PIPELINE() UTILITY(grep) FLAG(-i) FLAG(-o) FLAG(-h) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> UTILITY(sort) UTILITY(uniq) FLAG(-c) UTILITY(sort) FLAG(-n)
ROOT() UTILITY(ps) FLAG(-e) FLAG(-f)
ROOT(root) T(rpm) T(-qfi) T(`which) T(ldconfig`)
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-v) FLAG(-E) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(sed) ARGUMENT(Program)<Program> UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(mv) ARGUMENT(File)<File> ARGUMENT(File)<File>
"ROOT() UTILITY(join) FLAG(-t) ARGUMENT(Regex)<Regex> FLAG(-o) ARGUMENT(1.1,1.2,2.3)<Format> ARGUMENT(File)<File> ARGUMENT(File)<File>"
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(cp) FLAG(-u) FLAG(-t) ARGUMENT(File)<Directory> ARGUMENT({})<File>
"ROOT(root) T(tac) T(filename) T(|) T(perl) T(-lane) T(print) T(join("") T("",) T(reverse(@F)))"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-atime) ARGUMENT(-Timespan)<Timespan> FLAG(-user) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-depth) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-delete)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(grep) FLAG(-q) FLAG(-i) FLAG(-F) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> FLAG(-print)
ROOT(root) T(alias) T(ls=ls) T(-lrta)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(ls) FLAG(-l) FLAG(-t) FLAG(-r) ARGUMENT({})<File> UTILITY(tail) FLAG(-) ARGUMENT(Quantity)<Quantity>
ROOT(root) T(ping) T(www.google.com) T(|) T(while) T(read) T(endlooop;) T(do) T(echo) T($(date):) T($endlooop;) T(done)
ROOT() UTILITY(df) FLAG(-k) ARGUMENT(File)<File>
ROOT(root) T(unset) T(-f) T(z)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(Size)<Size>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-amin) ARGUMENT(-Quantity)<Quantity>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) FLAG(-r) FLAG(-f) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-exec::;) UTILITY(rm) FLAG(-f) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(awk) FLAG(-F) ARGUMENT(Regex)<Regex> ARGUMENT(Program)<Program> UTILITY(sort) FLAG(-u)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-newer) ARGUMENT(File)<File>
ROOT(root) T(mongo) T(|) T(tee) T(somefile)
ROOT() UTILITY(find) FLAG(-E) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-regex) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(ls) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-regex) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(+Size)<Size>
ROOT() PIPELINE() UTILITY(yes) OPERATOR(--) ARGUMENT(Regex)<Regex> UTILITY(head) FLAG(-n) ARGUMENT(Quantity)<Quantity>
ROOT() PIPELINE() UTILITY(ping) FLAG(-c) ARGUMENT(Quantity)<Quantity> ARGUMENT(Regex)<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(cut) FLAG(-f) ARGUMENT(Number)<Number> FLAG(-d) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(src/js) T(-type) T(f) T(-name) T(*.js) T(-exec) T(cat) T({}) T(>>) T(${jsbuild}$@) T(;)
ROOT() UTILITY(awk) FLAG(-f) ARGUMENT(File)<File> ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> BRACKET() FLAG(-iname) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(sed) ARGUMENT(Program)<Program>
ROOT(root) T(curl) T(-s) T(http://search.twitter.com/search.json?q=node.js) T(|) T(json)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(!) FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(!) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-user) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(ifconfig) ARGUMENT(Regex)<Regex> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(grep) FLAG(-l) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(mktemp) FLAG(-u)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mmin) ARGUMENT(+Quantity)<Quantity>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(sed) FLAG(-i) ARGUMENT(Program)<Program> ARGUMENT({})<File>
ROOT(root) T(find) T($HOME/projects/) T(-name) T(.*) T(-ls) T(>) T(foo.txt)
ROOT(root) T(tail) T(-n) T(1) T($file) T(|) T(wc) T(-c) T(|) T(xargs) T(-I) T({}) T(truncate) T($file) T(-s) T(-{})
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-exec::;) UTILITY(rmdir) ARGUMENT(Directory)<Directory>
ROOT() UTILITY(scp) FLAG(-3) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(cat) ARGUMENT({})<File> FLAG(-print)
ROOT() UTILITY(read) FLAG(-p) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> FLAG(-ok::;) UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(echo) FLAG(-e) COMMANDSUBSTITUTION() UTILITY(date)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-print)
ROOT(root) T(./aaa.sh) T(2>&1) T(|) T(tee) T(-a) T(log)
ROOT() UTILITY(kill) COMMANDSUBSTITUTION() PIPELINE() UTILITY(pstree) FLAG(-p) ARGUMENT(Regex)<Regex> UTILITY(sed) ARGUMENT(Program)<Program> UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(sed) ARGUMENT(Program)<Program> UTILITY(tr) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> UNARYLOGICOP(-not) FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(l)<Type>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(Path) T($() T(pwd)
ROOT() PIPELINE() UTILITY(find) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(ls) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(ssh) ARGUMENT(Regex)<Regex> FLAG(-p) ARGUMENT(Regex)<Regex> FLAG(-o) ARGUMENT(Compression=yes)<Option> FLAG(-o) ARGUMENT(DSAAuthentication=yes)<Option> FLAG(-o) ARGUMENT(LogLevel=FATAL)<Option> FLAG(-o) ARGUMENT(StrictHostKeyChecking=no)<Option> FLAG(-o) ARGUMENT(UserKnownHostsFile=/dev/null)<Option> FLAG(-o) ARGUMENT(IdentitiesOnly=yes)<Option> FLAG(-i) ARGUMENT(File)<File> FLAG(-o) ARGUMENT(ForwardAgent=yes)<Option>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type> UTILITY(xargs) FLAG(-n) ARGUMENT(Quantity)<Quantity> FLAG(-I) ARGUMENT({})<Regex> UTILITY(cp) FLAG(-i) ARGUMENT(File)<File> ARGUMENT({})<File>
"ROOT(root) T(find) T(/) T(-name) T(*.md) T(-type) T(f) T(-exec) T(sh) T(-c) T(markdown) T(""${0}"") T(>) T(""${0%.md}.html"") T({}) T(;)"
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-v) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0)
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(xargs) FLAG(-r)
ROOT(root) T(find) T(.) T(-type) T(f) T(|) T(xargs) T(cat) T(>) T(out.txt)
ROOT(root) T(t=$(tty)) T(echo) T(ee) T(|) T(tee) T($t) T(|) T(foo)
ROOT(root) T(ssh) T(-l) T(Regex) T(Regex) T(command)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-exec::+) UTILITY(du) FLAG(-s) ARGUMENT({})<File> UTILITY(sed) COMMANDSUBSTITUTION() UTILITY(hostname)
ROOT() PIPELINE() UTILITY(mount) UTILITY(awk) ARGUMENT(Program)<Program>
ROOT(root) T(chown) T($() T(whoami)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(which) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(!) FLAG(-name) ARGUMENT(Regex)<Regex> ARGUMENT(Path)<Path>
ROOT(root) T(find) T(/path/to/files/) T(-newermt) T(20131204) T(-not) T(-newermt) T(20131205) T(-type) T(f) T(-print0) T(|) T(cpio) T(--create) T(--null) T(--format=ustar) T(|) T(gzip) T(>) T(/tmp/dec-4.tar.gz)
ROOT() PIPELINE() UTILITY(dig) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-E) ARGUMENT(Regex)<Regex> UTILITY(head) FLAG(-n) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-noleaf) FLAG(-wholename) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-wholename) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-wholename) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-perm) ARGUMENT(-Permission)<Permission> UNARYLOGICOP(!) FLAG(-type) ARGUMENT(l)<Type> UNARYLOGICOP(!) FLAG(-type) ARGUMENT(s)<Type> UNARYLOGICOP(!) BRACKET() FLAG(-type) ARGUMENT(d)<Type> FLAG(-perm) ARGUMENT(-Permission)<Permission> FLAG(-print)
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(nl) UTILITY(sed) ARGUMENT(Program)<Program>
ROOT(root) T(find) T(-type) T(f) T(-name) T(*.au) T(>) T(names.txt)
ROOT() UTILITY(cat) ARGUMENT(File)<File>
ROOT() UTILITY(diff) FLAG(-r) FLAG(-q) FLAG(-y) FLAG(-l) ARGUMENT(File)<File> ARGUMENT(File)<File> FLAG(--exclude) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(yes) ARGUMENT(Regex)<Regex> UTILITY(nl) FLAG(-b) ARGUMENT(a)<Option> UTILITY(sed) ARGUMENT(Program)<Program> UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT(root) T(/usr/bin/sudo) T(-u) T(`whoami`) T(`which) T(program`)
ROOT() UTILITY(history) ARGUMENT(Quantity)<Quantity>
ROOT(root) T(parec) T(--raw) T(--channels=1) T(--latency=2) T(|) T(od) T(-N2) T(-td2) T(|) T(head) T(-n1) T(|) T(cut) T(-d) T(-f2-) T(|) T(tr) T(-d)
"ROOT(root) T(find) T($dir) T(-not) T(-path) T($dir/prune_me*) T(-exec) T(bash) T(-c) T(echo) T(""$0"") T({}) T(;)"
ROOT(root) T(su) T(-) T(YOUR_USER)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type>
ROOT(root) T(yes) T($a\nb) T(|) T(script.py)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) FLAG(-r) FLAG(-f) ARGUMENT({})<File>
"ROOT(root) T(find) T(.) T(-type) T(f) T(|) T(xargs) T(stat) T(-c) T(%a) T(%n) T(|) T(awk) T({print) T(""chmod) T(""$1"") T(""$2}) T(>) T(./filesPermissions.sh)"
ROOT() PIPELINE() UTILITY(echo) FLAG(-e) ARGUMENT(Regex)<Regex> UTILITY(sed) ARGUMENT(Program)<Program> UTILITY(cut) FLAG(-f) ARGUMENT(Number)<Number>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(-not) BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(sed) FLAG(-i) ARGUMENT(Program)<Program> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(rsync) T(-ur) T(dir_a) T(dir_b) T(&&) T(rsync) T(-ur) T(dir_b) T(dir_a)
ROOT() UTILITY(basename) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(basename) ARGUMENT({})<Regex> UTILITY(uniq) FLAG(-d)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-inum) ARGUMENT(Quantity)<Quantity> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT(root) T(find) T(/) T(-type) T(d) T(-name) T(*99966*) T(-print) T(2>/dev/null)
ROOT() UTILITY(fold) FLAG(-w) ARGUMENT(Quantity)<Quantity> ARGUMENT(File)<File>
ROOT() UTILITY(ssh-keygen) FLAG(-l) ARGUMENT(File)<File> ARGUMENT(File)<File> FLAG(-f) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-depth) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-execdir::;) UTILITY(rename) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
"ROOT(root) T(top) T(-b) T(-d2) T(-s1) T(|) T(sed) T(-e) T(1,/USERNAME/d) T(|) T(sed) T(-e) T(1,/^$/d)"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(cp) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-fprint) ARGUMENT(File)<File>
ROOT() UTILITY(read) FLAG(-p) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(sudo) T(lsusb) T(-v|less)
ROOT(root) T(find) T(.) T(-type) T(f) T(-name) T(*.java) T(-exec) T(perl) T(-p) T(-i) T(-e) T(s/[) T(\t]$//g) T({}) T(;)
ROOT() UTILITY(cd) COMMANDSUBSTITUTION() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(dirname) ARGUMENT({})<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-atime) ARGUMENT(+Timespan)<Timespan>
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(awk) ARGUMENT(Program)<Program> UTILITY(sort) UTILITY(uniq) UTILITY(xargs) FLAG(-i) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) ARGUMENT({})<Regex> ARGUMENT(File)<File> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(zcat) ARGUMENT(Regex)<Regex> UTILITY(less)
ROOT(root) T(seq) T(10) T(|) T(tr) T([\n]) T(+) T(|) T(sed) T(-e) T(s/+/) T(+) T(/g) T(-es/) T(+) T($/\n/) T(|) T(xargs) T(expr)
ROOT() PIPELINE() UTILITY(pwd) UTILITY(awk) FLAG(-F) ARGUMENT(Regex)<Regex> ARGUMENT(Program)<Program>
ROOT(root) T(grep) T(-U) T(-l) T($\015) T($(fd))
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(dirname) ARGUMENT({})<Regex>
ROOT(root) T(find) T(.) T(-type) T(f) T(-name) T(*.so) T(-exec) T(sh) T(-c) T(echo) T({}) T(&&) T(readelf) T(-s) T({}) T(|) T(grep) T(mysymbol) T(;)
ROOT(root) T(wc) T(-l) T(--files0-from=<(git) T(ls-files) T(-z))
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-path) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-path) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(xargstest/) T(-name) T(file*) T(-print0) T(|) T(xargs) T(-0) T(myscript.sh)
ROOT() UTILITY(readlink) FLAG(-f) FLAG(-n) OPERATOR(--) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(d)<Type>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(du) FLAG(-k) ARGUMENT({})<File> UTILITY(awk) ARGUMENT(Program)<Program>
"ROOT(root) T(cat) T(afile) T(|) T(split) T(-l) T(2) T(--filter=bzip2) T(>) T(""$FILE.bz2"")"
ROOT() UTILITY(rsync) FLAG(-a) FLAG(-v) FLAG(--delete) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(md5sum) COMMANDSUBSTITUTION() UTILITY(which) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(which) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(groups) ARGUMENT(Regex)<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(--no-run-if-empty) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UTILITY(grep) FLAG(-E) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) FLAG(-r) FLAG(-f) ARGUMENT({})<File>
ROOT() UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT(File)<File>
ROOT(root) T(find) T(.) T(-type) T(f) T(-wholename) T(*.mbox) T(|) T(parallel) T(mv) T({}) T({.})
ROOT() PIPELINE() UTILITY(nl) FLAG(-b) ARGUMENT(a)<Option> ARGUMENT(File)<File> UTILITY(sort) FLAG(-k) ARGUMENT(Number)<Number> UTILITY(sed) ARGUMENT(Program)<Program> UTILITY(sort) FLAG(-k) ARGUMENT(Number)<Number> UTILITY(sed) ARGUMENT(Program)<Program>
ROOT() UTILITY(rsync) FLAG(-r) FLAG(-v) FLAG(-v) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(jobs) FLAG(-p) UTILITY(tail) FLAG(-n) ARGUMENT(Quantity)<Quantity> ARGUMENT(File)<File> ARGUMENT(File)<File> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(kill) ARGUMENT({})<Regex>
"ROOT(root) T(find) T(.) T(-name) T(*.txt) T(-exec) T(sh) T(-c) T(mv) T(""$0"") T(""${0%.txt}.txt_bak"") T({}) T(;)"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iregex) ARGUMENT(Regex)<Regex> UNARYLOGICOP(!) FLAG(-type) ARGUMENT(d)<Type> FLAG(-size) ARGUMENT(+Size)<Size>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(ln) FLAG(-s) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-i) FLAG(-l) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> UTILITY(tee) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(wc) FLAG(-l) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(-Size)<Size>
ROOT() PIPELINE() UTILITY(paste) FLAG(-d) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> ARGUMENT(File)<File> UTILITY(sed) ARGUMENT(Program)<Program>
ROOT() UTILITY(ln) FLAG(-s) ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(tac) ARGUMENT(File)<File> UTILITY(sed) FLAG(-e) ARGUMENT(Program)<Program> UTILITY(tac) UTILITY(sed) FLAG(-e) ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(ifconfig) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-o) FLAG(-P) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(rev)
"ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-printf) ARGUMENT(""%p %f\n"")<Format>"
ROOT(root) T(THIS=`readlink) T(-f) T(${BASH_SOURCE[0]}) T(2>/dev/null||echo) T($0`)
ROOT(root) T(time) T(find) T(/usr/src) T(-name) T(*.html) T(|) T(xargs) T(/usr/bin/grep) T(-l) T(foo) T(|) T(wc) T(-l)
ROOT(root) T(tar) T(-cvf) T(-) T(data/*) T(|) T(gzip) T(>) T(data.tar.gz)
ROOT(root) T(yum) T(install) T(-y) T(devtoolset-3)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-size) ARGUMENT(-Size)<Size>
ROOT(root) T(find) T(project) T(-type) T(f) T(-print) T(|) T(egrep) T((\.[ch]|[Mm]akefile)$) T(>) T(Include)
ROOT(root) T(find) T(.) T(-type) T(f) T(-name) T(*.txt) T(-exec) T(printf) T(File:) T(%s\n) T({}) T(;)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-regextype) ARGUMENT(posix-extended)<Type> FLAG(-regex) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-ls) UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(ls) FLAG(-t) ARGUMENT(File)<File> UTILITY(tail) FLAG(-) ARGUMENT(Quantity)<Quantity> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) FLAG(-f) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-exec::;) UTILITY(ls) FLAG(-l) ARGUMENT({})<File> FLAG(-print)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(touch) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(tac) ARGUMENT(File)<File> UTILITY(awk) ARGUMENT(Program)<Program> UTILITY(tac)
ROOT(root) T(find) T(.) T(–iname) T(error) T(–print) NT(<n>) T(-i) T(is) T(for) T(ignore) T(find) T(.) T(–iname) T(error) T(–print) NT(<n>) T(-i) T(is) T(for) T(ignore)
ROOT() UTILITY(which) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(diff) FLAG(-q) FLAG(-r) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-nouser) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-empty) FLAG(-exec::;) UTILITY(echo) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-daystart) FLAG(-mtime) ARGUMENT(-Timespan)<Timespan> FLAG(-type) ARGUMENT(f)<Type> UNARYLOGICOP(!) FLAG(-mtime) ARGUMENT(-Timespan)<Timespan> FLAG(-printf) ARGUMENT('%Tc %p\n')<Format>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(sed) FLAG(-n) ARGUMENT(Program)<Program> UTILITY(xargs) FLAG(-L) ARGUMENT(Quantity)<Quantity> FLAG(-I) ARGUMENT({})<Regex> UTILITY(echo) ARGUMENT(Regex)<Regex> ARGUMENT({})<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> BRACKET() FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File> BINARYLOGICOP(-and) BRACKET() FLAG(-type) ARGUMENT(d)<Type> FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT(root) T(find) T(.) T(-type) T(f) T(-exec) T(dos2unix) T({}) T({}) T(;)
ROOT(root) T(find) T(.) T(-name) T(*.jar) T(-print) T(-exec) T(jar) T(-tf) T({}) T(;|egrep) T(jar$|message_track.properties)
ROOT() UTILITY(chgrp) FLAG(-R) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT() UTILITY(file) FLAG(-L) COMMANDSUBSTITUTION() UTILITY(which) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-mtime) ARGUMENT(Timespan)<Timespan> FLAG(-delete)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) FLAG(-r) ARGUMENT({})<File>
ROOT(root) T(ssh) T(-At) T(gw) T(ssh) T(-A) T(app1)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> ARGUMENT({})<File>
ROOT() UTILITY(diff) ARGUMENT(File)<File> ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-o) FLAG(-E) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-o) FLAG(-E) ARGUMENT(Regex)<Regex> UTILITY(awk) ARGUMENT(Program)<Program> UTILITY(sort) UTILITY(uniq) FLAG(-c) UTILITY(sort) FLAG(-r) FLAG(-n)
ROOT() UTILITY(read) FLAG(-p) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(od) FLAG(-t) ARGUMENT(x1)<Type> FLAG(-t) ARGUMENT(a)<Type> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(+Size)<Size>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-exec::;) UTILITY(mkdir) FLAG(-p) OPERATOR(--) ARGUMENT(Directory)<Directory>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex>
"ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-cmin) ARGUMENT(-Quantity)<Quantity> FLAG(-type) ARGUMENT(f)<Type> FLAG(-printf) ARGUMENT(""%c %pn"")<Format>"
ROOT(root) T(git) T(grep) T(^) T(|) T(wc) T(-l)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(Permission)<Permission> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(!) FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(tee) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(diff) ARGUMENT(File)<File> ARGUMENT(File)<File> UTILITY(grep) ARGUMENT(Regex)<Regex>
"ROOT(root) T(find) T(.) T(-type) T(d) T(-print0) T(|) T(xargs) T(-0) T(-I) T({}) T(sh) T(-c) T(echo) T(""{}:) T(\c"") T(;) T(find) T({}) T(-maxdepth) T(1) T(-type) T(f) T(|) T(wc) T(-l) T(;) T(find) T({}) T(-maxdepth) T(1) T(-type) T(f) T(-print) T(|) T(sed) T(""s#.*/##"")"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(cd) T(/tmp;) T(mycommand)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) BRACKET() FLAG(-type) ARGUMENT(f)<Type> FLAG(-mtime) ARGUMENT(Timespan)<Timespan> FLAG(-print0)
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(sed) FLAG(-e) ARGUMENT(Program)<Program> UTILITY(sed) FLAG(-e) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(-not) FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-not) FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-size) ARGUMENT(Size)<Size> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(set) FLAG(-o) ARGUMENT(verbose)<Option>
ROOT() PIPELINE() UTILITY(zcat) ARGUMENT(Regex)<Regex> UTILITY(awk) FLAG(-F) ARGUMENT(Regex)<Regex> ARGUMENT(Program)<Program>
ROOT(root) T(alias) T(dosetit=eval) T(`setit-sh`)
ROOT() UTILITY(column) FLAG(-s) ARGUMENT(Regex)<Regex> FLAG(-t)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
ROOT(root) T(find) T(/home/vmail/) T(-type) T(d) T(-path) T(*/*/Maildir/.LearnAsSpam/cur) T(-exec) T(sh) T(-c) T((cd) T({}) T(&&) T(mv) T(./*) T(../../.Junk/cur)) T(;)
ROOT() UTILITY(mount) FLAG(-t) ARGUMENT(vboxsf)<Option> ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-empty) FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rmdir) ARGUMENT({})<Directory>
ROOT(root) T(find) T(.) T(-type) T(d) T(-name) T(.svn) T(-print) T(|) T(parallel) T(rm) T(-rf)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(sort) ARGUMENT(File)<File> ARGUMENT(File)<File> UTILITY(split) FLAG(-d) FLAG(-l) ARGUMENT(Quantity)<Quantity> ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(.) T(|) T(xargs) T(perl) T(-p) T(-i) T(-e) T(‘s/something/else/g’)
ROOT(root) T(alias) T(..=cd) T(..)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(-Permission)<Permission> FLAG(-print)
ROOT() UTILITY(split) FLAG(-b) ARGUMENT(Size)<Size> FLAG(-d) ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type> FLAG(-print) UTILITY(wc) FLAG(-l)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(sed) ARGUMENT(Program)<Program> UTILITY(sed) ARGUMENT(Program)<Program> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(cp) FLAG(-v) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(ls) UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(cat) FLAG(-n)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::+) UTILITY(grep) FLAG(-l) FLAG(-i) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-l) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() PIPELINE() UTILITY(df) ARGUMENT(File)<File> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::+) UTILITY(rm) FLAG(-f) ARGUMENT({})<File>
ROOT(root) T(xargs) T(-n) T(Quantity) T(-I) T({}) T(find) T(Path) T($() T(pwd)
ROOT(root) T(bar=$(cat) T(foo.txt) T(|) T({) T(read) T(bat;echo) T($bat;}))
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-path) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-atime) ARGUMENT(-Timespan)<Timespan> FLAG(-type) ARGUMENT(-f)<Type>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-user) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(-not) FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(dig) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT(ns)<Type>
ROOT() UTILITY(echo) COMMANDSUBSTITUTION() UTILITY(date) FLAG(-d) ARGUMENT(Regex)<Regex> ARGUMENT(+%j)<Format>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-iname) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-i) FLAG(-r) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(Size)<Size>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(+Size)<Size>
ROOT() PIPELINE() UTILITY(ls) FLAG(-1) FLAG(-t) UTILITY(head) FLAG(-) ARGUMENT(Quantity)<Quantity>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(ln) FLAG(-s) FLAG(-t) ARGUMENT(Directory)<Directory> ARGUMENT({})<File>
ROOT(root) T(tmux) T(set-environment) T(-t) T(sessname) T(-u) T(RBENV_VERSION)
"ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-delete) FLAG(-printf) ARGUMENT(""%h\0"")<Format> UTILITY(xargs) FLAG(-0) FLAG(-r) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rmdir) ARGUMENT({})<Directory>"
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-n) ARGUMENT(Quantity)<Quantity> FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
"ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-cmin) ARGUMENT(-Quantity)<Quantity> FLAG(-printf) ARGUMENT(""%c %pn"")<Format>"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(rm) FLAG(-f) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(cp) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(ls) FLAG(-1) UTILITY(tr) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> UTILITY(sort) UTILITY(uniq) FLAG(-c) UTILITY(grep) FLAG(-v) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(mktemp) ARGUMENT(Regex)<Regex>
ROOT(root) T(killall) T(-u) T($(whoami)) T(dropbox)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-newer) ARGUMENT(File)<File> BINARYLOGICOP(-and) UNARYLOGICOP(-not) FLAG(-newer) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(grep) FLAG(-e) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(--complement) FLAG(-s) FLAG(-f) ARGUMENT(Number)<Number>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-r) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-l) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(f)<Type> FLAG(-perm) ARGUMENT(Permission)<Permission>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-user) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-user) ARGUMENT(Regex)<Regex>
ROOT(root) T(screen) T(bash) T(--rcfile) T(yourfile.rc)
ROOT() UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT(File)<File>
"ROOT(root) T(find) T(/the/path) T(-depth) T(-type) T(f) T(-name) T(*.abc) T(-exec) T(sh) T(-c) T(mv) T(""$1"") T(""$(dirname) T(""$1"")/$(basename) T(""$1"") T(.abc).edefg"") T(_) T({}) T(;)"
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(-Permission)<Permission> FLAG(-print0) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(df) ARGUMENT(File)<File> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT(root) T(find) T(.) T(-name) T(*.php) T(-type) T(f) T(-exec) T(php) T(-l) T({}) T(;)
ROOT() UTILITY(ls) FLAG(-l) COMMANDSUBSTITUTION() UTILITY(which) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(bzip2) ARGUMENT(File)<File> UTILITY(tee) FLAG(-a) ARGUMENT(File)<File>
ROOT(root) T(cd) T(/home/www) T(&&) T(find) T(.) T(-type) T(f) T(-print0) T(|) T(xargs) T(-0) T(perl) T(-i.bak) T(-pe) T(s/subdomainA\.example\.com/subdomainB.example.com/g)
ROOT() PIPELINE() UTILITY(sed) ARGUMENT(Program)<Program> UTILITY(rev) UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number> UTILITY(rev)
ROOT() PIPELINE() UTILITY(sed) ARGUMENT(Program)<Program> ARGUMENT(File)<File> UTILITY(column) FLAG(-t)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(split) FLAG(-l) ARGUMENT(Quantity)<Quantity> ARGUMENT({})<File> ARGUMENT({})<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> BRACKET() FLAG(-nogroup) BINARYLOGICOP(-or) ARGUMENT(Path)<Path> FLAG(-ls)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(head) FLAG(-) ARGUMENT(Quantity)<Quantity>
ROOT(root) T(cd) T($() T(dirname) T($() T(which) T(Regex)
ROOT() UTILITY(hostname) FLAG(-s)
"ROOT(root) T(join) T(-j) T(Regex) T(-t) T(Regex) T(-o) T(2.1,2.2,2.4,1.3) T(<() T(sort) T(File)"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(echo) ARGUMENT({})<Regex>
ROOT(root) T(yum) T(list) T(|) T(grep) T(subversion)
ROOT() UTILITY(read) FLAG(-s) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-newer) ARGUMENT(File)<File> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(f)<Type> FLAG(-newermt) ARGUMENT(Regex)<Regex> UNARYLOGICOP(!) FLAG(-newermt) ARGUMENT(Regex)<Regex> FLAG(-delete)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(cp) FLAG(-a) FLAG(--target-directory) ARGUMENT(Directory)<Directory> FLAG(--parents) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(history) UTILITY(sed) ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(tree) FLAG(-F) ARGUMENT(Directory)<Directory> UTILITY(sed) FLAG(-r) ARGUMENT(Program)<Program>
ROOT() UTILITY(read) FLAG(-a) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(/) T(-type) T(d) T(-name) T(needle) T(2>/dev/null)
ROOT() UTILITY(ls) FLAG(-l)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-user) ARGUMENT(Regex)<Regex> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-exec::;) UTILITY(basename) ARGUMENT({})<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(kill) FLAG(-) ARGUMENT(Regex)<Regex> ARGUMENT({})<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(echo) ARGUMENT({})<Regex> ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-exec::+) UTILITY(echo) ARGUMENT({})<Regex> ARGUMENT(Path)<Path>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() UTILITY(read) FLAG(-p) ARGUMENT(Regex)<Regex> FLAG(-s) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-print)
ROOT() PIPELINE() UTILITY(history) ARGUMENT(Quantity)<Quantity> UTILITY(tac) UTILITY(nl) UTILITY(tac)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(mv) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(sed) FLAG(-i) ARGUMENT(Program)<Program> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(Permission)<Permission>
ROOT(root) T(cd) T($() T(dirname) T($() T(readlink) T(-f) T(File)
ROOT() UTILITY(comm) FLAG(-1) FLAG(-3) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(ls) FLAG(-l) FLAG(--color) ARGUMENT(always)<Option> ARGUMENT(File)<File> UTILITY(grep) FLAG(--color) ARGUMENT(never)<Option> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type>
ROOT() UTILITY(rsync) FLAG(-r) FLAG(-t) FLAG(-u) FLAG(-v) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-ls)
ROOT(root) T(find) T(.) T(-type) T(f) T(-exec) T(fromdos) T({}) T(;)
ROOT(root) T(rsync) T(-a) T(-v) T(-e) T(File) T(File) T(File)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(.)<Path> FLAG(-name) ARGUMENT(*.sql)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<ReservedWord> UTILITY(ls) FLAG(-1) FLAG(-r) FLAG(-c) ARGUMENT({})<ReservedWord> UTILITY(tail) FLAG(-) ARGUMENT(7)<Quantity> UTILITY(head) FLAG(-) ARGUMENT(1)<Quantity>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(grep) FLAG(-i) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(-Permission)<Permission>
ROOT(root) T(find) T(.) T(-type) T(f) T(-name) T(*.rm) T(-exec) T(ffmpeg) T(-i) T({}) T(-sameq) T({}.mp3) T(;) T(-exec) T(rm) T({}) T(;)
ROOT() PIPELINE() UTILITY(zcat) ARGUMENT(Regex)<Regex> UTILITY(wc) FLAG(-l)
ROOT() UTILITY(read)
ROOT() UTILITY(groups) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> UTILITY(nl)
ROOT() UTILITY(find) ARGUMENT(Path)<Path>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(top) FLAG(-b) FLAG(-n) ARGUMENT(Quantity)<Quantity> UTILITY(tail) FLAG(-n) ARGUMENT(+Quantity)<Quantity> UTILITY(head) FLAG(-n) ARGUMENT(Quantity)<Quantity>
ROOT() PIPELINE() UTILITY(seq) ARGUMENT(Number)<Number> ARGUMENT(Number)<Number> UTILITY(split) FLAG(-l) ARGUMENT(Quantity)<Quantity> FLAG(-a) ARGUMENT(Quantity)<Quantity> FLAG(-d) ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> UTILITY(awk) ARGUMENT(Program)<Program> UTILITY(sort) FLAG(-n) UTILITY(awk) ARGUMENT(Program)<Program> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-d) ARGUMENT(skip)<Option> ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT(root) T(find) T(.) T(-type) T(f) T(-exec) T(./truncate) T({}) T(;)
ROOT() PIPELINE() UTILITY(grep) FLAG(-e) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(--complement) FLAG(-s) FLAG(-f) ARGUMENT(Number)<Number>
ROOT(root) T(tr) T(-d) T(\n) T(<) T(yourfile.txt)
ROOT(root) T(find) T(.) T(|) T(xargs) T(grep) T(<string-to-find>)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> BRACKET() FLAG(-iname) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT(root) T(comm) T(-2) T(-3) T(<() T(sort) T(File)
ROOT(root) T(mv) T(new) T(old) T(-b) T(&&) T(mv) T(old~) T(new)
ROOT() PIPELINE() UTILITY(dig) FLAG(-x) ARGUMENT(Regex)<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number> UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(cut) FLAG(-f) ARGUMENT(Number)<Number>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(ls) FLAG(-s) ARGUMENT({})<File> UTILITY(sort) FLAG(-n) FLAG(-r) UTILITY(head)
ROOT(root) T(find) T(MyApp.app) T(-name) T(Headers) T(-type) T(d) T(-exec) T(rm) T(-rf) T({}) T(;) T(2>/dev/null)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-L) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(finger) UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number> UTILITY(sort) FLAG(-u) UTILITY(grep) FLAG(-i) FLAG(-v) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(sed) FLAG(-i) ARGUMENT(Program)<Program> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(cal) ARGUMENT(DateTime)<DateTime> ARGUMENT(DateTime)<DateTime> UTILITY(awk) FLAG(-v) ARGUMENT(Program)<Program> FLAG(-f) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(zcat) ARGUMENT(Regex)<Regex> UTILITY(awk) FLAG(-v) ARGUMENT(Program)<Program> ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(gzip) FLAG(-d) FLAG(-c) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-P) FLAG(--regexp) ARGUMENT(Regex)<Regex> UTILITY(split) FLAG(-l) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-path) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() UTILITY(cal) FLAG(-3) ARGUMENT(DateTime)<DateTime> ARGUMENT(DateTime)<DateTime>
"ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-printf) ARGUMENT(""%f\n"")<Format>"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT(root) T(find) T(./*) T(|) T(cpio) T(-o) T(>) T(arch.cpio)
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(grep) FLAG(-v) ARGUMENT(Regex)<Regex> UTILITY(wc) FLAG(-l)
ROOT() PIPELINE() UTILITY(hostname) FLAG(-I) UTILITY(cut) FLAG(-f) ARGUMENT(Number)<Number> FLAG(-d) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(Timespan)<Timespan> FLAG(-print)
ROOT() UTILITY(dig) FLAG(-t) ARGUMENT(A)<Type> ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(seq) ARGUMENT(Number)<Number> UTILITY(tac) UTILITY(sed) ARGUMENT(Program)<Program> UTILITY(tac)
ROOT(root) T(sort) T(<) T(<(find) T(-printf) T(%T@) T(%p\n))
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) FLAG(-v) FLAG(-f) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan>
"ROOT(root) T(find) T(.) T(-name) T(*.jpg) T(-exec) T(sh) T(-c) T(mv) T(""$0"") T(""${0%.JPG}$.jpg"") T({}) T(;)"
ROOT() PIPELINE() UTILITY(ifconfig) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-E) FLAG(-o) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(tree) FLAG(-d) FLAG(-f) FLAG(-i) COMMANDSUBSTITUTION() UTILITY(pwd)
ROOT() PIPELINE() UTILITY(awk) ARGUMENT(Program)<Program> ARGUMENT(Program)<Program> UTILITY(column) FLAG(-t)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print) FLAG(-exec::;) UTILITY(grep) FLAG(-s) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(tee) FLAG(--append) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UNARYLOGICOP(!) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan> UTILITY(grep) FLAG(-E) FLAG(-v) FLAG(-f) ARGUMENT(Regex)<File>
ROOT() PIPELINE() UTILITY(dig) FLAG(-x) ARGUMENT(Regex)<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number> UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(cut) FLAG(-f) ARGUMENT(Number)<Number>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(comm) T(-1) T(-3) T(<() T(sort) T(File)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(wc) FLAG(-l)
ROOT() UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT(File)<File> ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(--replace) ARGUMENT(Regex)<Regex> FLAG(-I) ARGUMENT({})<Regex> UTILITY(cp) ARGUMENT(File)<File> ARGUMENT(File)<File> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(d)<Type>
ROOT() UTILITY(which) ARGUMENT(Regex)<Regex>
ROOT(root) T(cat) T(<() T(crontab) T(-l)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-not) FLAG(-path) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-not) FLAG(-path) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-exec::;) UTILITY(ls) FLAG(-l) FLAG(-d) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-exec::;) UTILITY(rm) FLAG(-f) ARGUMENT({})<File>
"ROOT(root) T(ssh) T(someone@somehost) T(cd) T(/export/home/someone) T(&&) T(find) T(.) T(-name) T(""*"") T(-print|) T((while) T(read) T(file;) T(do) T(curl) T(-u) T(someone:password) T(ftp://somehost/tmp/) T(-vT) T(""$file"";) T(sleep) T(10;) T(done))"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-exec::;) UTILITY(find) ARGUMENT({})<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-delete)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(grep) FLAG(--with-filename) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(--null) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(--with-filename) FLAG(--line-number) FLAG(--no-messages) FLAG(--color) ARGUMENT(--ignore-case)<Option> ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(kill) FLAG(-) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(chown) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(zcat) ARGUMENT(Regex)<Regex> UTILITY(sed) FLAG(-n) FLAG(-e) ARGUMENT(Program)<Program>
ROOT(root) T(screen) T(-list) T(|) T(awk) T({print) T($1}) T(|) T(grep) T(-q) T($1$)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(mv) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT(root) T(cp) T($() T(find) T(Path) T(-perm) T(-Permission) T(-type) T(f)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-i) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(tee) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-regex) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(grep) FLAG(-I) FLAG(-q) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> BINARYLOGICOP(-and) FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-type) ARGUMENT(f)<Type>
ROOT(root) T(TTY=$(tty)) T(WHOLINE=$(who) T(|) T(grep) T(${TTY#/dev/}))
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(wc) FLAG(-l) ARGUMENT({})<File> UTILITY(grep) FLAG(-E) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-print0) UTILITY(xargs) FLAG(-0)
ROOT() PIPELINE() UTILITY(apropos) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-i) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type> FLAG(-exec::;) UTILITY(ls) FLAG(-d) FLAG(-l) FLAG(-r) FLAG(-t) ARGUMENT({})<File> UTILITY(wc) FLAG(--lines)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(-not) FLAG(-path) ARGUMENT(Regex)<Regex> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(sed) FLAG(--in-place) ARGUMENT(Regex)<Regex> ARGUMENT(Program)<Program> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-print) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) FLAG(-r) FLAG(-f) ARGUMENT({})<File>
ROOT() UTILITY(basename) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-exec::;) UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(which) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(cd) COMMANDSUBSTITUTION() UTILITY(echo) FLAG(-n) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> ARGUMENT(Path)<Path>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-cmin) ARGUMENT(-Quantity)<Quantity>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::+) UTILITY(rm) FLAG(-f) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(screen) T(-dr) T(14313)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> BINARYLOGICOP(-and) UNARYLOGICOP(!) FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) UNARYLOGICOP(!) UNARYLOGICOP(-prune)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-regex) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() PIPELINE() UTILITY(diff) FLAG(-r) FLAG(-q) ARGUMENT(File)<File> ARGUMENT(File)<File> UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(cp) ARGUMENT(File)<File> COMMANDSUBSTITUTION() UTILITY(uname) FLAG(-r)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(Timespan)<Timespan> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-atime) ARGUMENT(-Timespan)<Timespan>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-newer) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-group) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT(root) T(df) T(|) T(tail) T(-n) T(+2) T(|) T(tr) T(-s) T(|) T(cut) T(-d) T(-f) T(2) T(|) T(paste) T(-s) T(-d+) T(|) T(bc)
ROOT() UTILITY(bzip2) FLAG(-d) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(sort) UTILITY(sort) FLAG(-u) FLAG(-c)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(!) FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(!) FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-lname) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(split) FLAG(--lines) ARGUMENT(Quantity)<Quantity>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UTILITY(xargs) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-r) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(ls) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rmdir) ARGUMENT({})<Directory>
ROOT() UTILITY(read) FLAG(-r) FLAG(-p) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(nl) FLAG(-s) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> UTILITY(cut) FLAG(-c) ARGUMENT(Number)<Number>
"ROOT() UTILITY(mount) FLAG(-o) ARGUMENT(remount,ro)<Option> ARGUMENT(Regex)<Regex>"
ROOT() PIPELINE() UTILITY(tree) UTILITY(tail) FLAG(-) ARGUMENT(Quantity)<Quantity>
ROOT(root) T(cat) T(file) T(|) T(xclip)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-empty) FLAG(-exec::;) UTILITY(ls) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mmin) ARGUMENT(-Quantity)<Quantity> UTILITY(xargs) FLAG(-r) FLAG(-I) ARGUMENT({})<Regex> UTILITY(ls) FLAG(-l) FLAG(-d) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-print0) UTILITY(tr) FLAG(-c) FLAG(-d) ARGUMENT(Regex)<Regex> UTILITY(wc) FLAG(-c)
ROOT(root) T(pwd) T(|) T(xsel) T(-i)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(mv) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> UTILITY(rev) UTILITY(cut) FLAG(-b) ARGUMENT(Number)<Number> UTILITY(rev)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(grep) FLAG(-H) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) BRACKET() FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0)
ROOT(root) T(find) T(/path/to/files) T(-exec) T(truncate.sh) T({}) T(;)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(.) T(-exec) T(COMMAND) T({}) T(+)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(du) FLAG(-h) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-follow) FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-i) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(mv) ARGUMENT({})<File> ARGUMENT(File)<File> ARGUMENT({})<File>
"ROOT(root) T(alias) T(cdl=cd) T(--) T(""$(ls) T(-t) T(|) T(head) T(-n) T(1)"")"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-user) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> UTILITY(sort)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> FLAG(-print) UTILITY(sed) FLAG(-r) ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(mkdir) FLAG(-v) ARGUMENT(Directory)<Directory> UTILITY(sed) ARGUMENT(Program)<Program>
ROOT(root) T(pstree) T(-p) T(`pgrep) T(pppd`)
ROOT() UTILITY(mktemp) FLAG(--directory)
ROOT() UTILITY(rename) FLAG(-v) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(chmod) ARGUMENT(Permission)<Permission> COMMANDSUBSTITUTION() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(Size)<Size>
ROOT() UTILITY(ls) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-perm) ARGUMENT(-Permission)<Permission>
ROOT(root) T(brew) T(link) T(--overwrite) T(python)
ROOT() PIPELINE() UTILITY(sed) ARGUMENT(Program)<Program> UTILITY(rev) UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number> UTILITY(rev) UTILITY(cut) FLAG(-c) ARGUMENT(Number)<Number>
ROOT(root) T(echo) T(-e) T(ALERT) T(-) T(Shell) T(Access) T(on:') T(`date`) T(`who`) T('\n\n') T(`whois) T($(who) T(|) T(cut) T(-d'(') T(-f2) T(|) T(cut) T(-d')') T(-f1)`)
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(xargs) FLAG(-n) ARGUMENT(Quantity)<Quantity> FLAG(-I) ARGUMENT({})<Regex> UTILITY(ping) FLAG(-c) ARGUMENT(Quantity)<Quantity> ARGUMENT({})<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-p) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(set) UTILITY(more)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print) FLAG(-exec::;) UTILITY(grep) FLAG(-n) FLAG(-i) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) FLAG(-f) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-delete)
ROOT(root) T(rsync) T(-rvz) T(--chmod=ugo=rwX) T(-e) T(ssh) T(source) T(destination)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-printf) ARGUMENT('%p ')<Format>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-path) ARGUMENT(Regex)<Regex>
ROOT(root) T(top) T(-p) T($(ps) T(aux) T(|) T(awk) T(/ProgramName/) T(&&) T(!) T(/awk/) T({) T(print) T($2;) T(exit;) T(}))
ROOT(root) T(find) T(/home/family/Music) T(-name) T(*.m4a) T(-print0) T(|) T(xargs) T(-0) T(-i) T(ffmpeg) T(-i) T({}) T(-acodec) T(libvorbis) T(-aq) T(6) T(-vn) T(-ac) T(2) T({}.ogg)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(diff) ARGUMENT({})<File> ARGUMENT(File)<File> FLAG(-print)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan> FLAG(-print) FLAG(-exec::;) UTILITY(cat) ARGUMENT({})<File> UTILITY(tar) FLAG(-c) FLAG(-f) ARGUMENT(File)<File> UTILITY(gzip) FLAG(-9)
ROOT(root) T(tail) T(-f) T(access.log) T(|) T(stdbuf) T(-oL) T(cut) T(-d) T(-f1) T(|) T(uniq)
ROOT() PIPELINE() UTILITY(echo) FLAG(-e) ARGUMENT(Regex)<Regex> UTILITY(sed) ARGUMENT(Program)<Program>
ROOT(root) T(sort) T(File) T(<() T(zcat) T(Regex) T(|) T(sort)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(ls) FLAG(-l) FLAG(-S) ARGUMENT({})<File> UTILITY(head) FLAG(-) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UNARYLOGICOP(!) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan>
ROOT() UTILITY(basename) FLAG(-a) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-user) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(chown) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT(root) T(find) T(.) T(-name) T(*-GHBAG-*) T(-exec) T(bash) T(-c) T(echo) T(mv) T($0) T(${0/GHBAG/stream-agg}) T({}) T(;)
ROOT() PIPELINE() UTILITY(env) UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(tar) FLAG(-u) FLAG(-f) ARGUMENT(File)<File> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-newer) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-exec::;) UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> ARGUMENT(File)<File> FLAG(-print)
"ROOT(root) T(find) T(/path) T(-name) T(pattern) T(-exec) T(bash) T(-c) T(somebashstatement) T(""$1"") T(--) T({}) T(;)"
ROOT(root) T(tar) T(cvf) T(-) T(`find) T(.) T(-mtime) T(-1) T(-type) T(f) T(-print`) T(>) T($archive.tar)
ROOT(root) T(find) T(.) T(-type) T(f) T(-name) T(*.php) T(-exec) T(php) T(-l) T({}) T(;)
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(sed) ARGUMENT(Program)<Program> UTILITY(column)
ROOT(root) T(yes) T(Yes) T(|) T(./ittp-update.sh)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(.) T(-type) T(f) T(-print0) T(|) T(xargs) T(-0) T(perl) T(-i.bak) T(-pe) T(s/subdomainA\.example\.com/subdomainB.example.com/g)
ROOT(root) T(find) T(.) T(-name) T(foo.txt) T(1>) T(tmpfile) T(&&) T(mv) T(`cat) T(tmpfile`) T(path/to/some/dir) T(&&) T(rm) T(tmpfile)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-perm) ARGUMENT(Permission)<Permission> FLAG(-print)
ROOT(root) T(watch) T(-n1) T(dropbox-cli) T(status)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) FLAG(-i) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(date) FLAG(-r) ARGUMENT(File)<File>
ROOT() UTILITY(rsync) FLAG(-r) FLAG(-v) FLAG(-v) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UTILITY(sed) FLAG(-e) ARGUMENT(Program)<Program> UTILITY(sed) FLAG(-e) ARGUMENT(Program)<Program> UTILITY(sort) FLAG(-u)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(cp) T(-v) T(-i) T($() T(uname) T(-r)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-mtime) ARGUMENT(Timespan)<Timespan> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan>
ROOT() UTILITY(kill) FLAG(-s) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-H) FLAG(-n) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT(root) T(find) T(.) T(-name) T(.DS_Store) T(-exec) T(git) T(rm) T(--ignore-unmatch) T(--cached) T({}) T(+)
ROOT(root) T(find) T(/) NT(<n>) T(-path) T(/export) T(-o) T(-path) T(/*Recommended*) T(-prune) T(-o) NT(<n>) T(-name) T(iceweasel) T(-o) T(-name) T(thunderbird) T(-type) T(f) T(-print) T(2>/dev/null)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UTILITY(wc) FLAG(-l)
ROOT(root) T(find) T(.) T(-type) T(f) T(-exec) T(test) T(-x) T({}) T(;) T(-print)
ROOT(root) T(find) T(.) T(-name) T(*.js) T(-not) NT(<n>) T(-path) T(./dir1) T(-o) T(-path) T(./dir2/*) T(-o) T(-path) T(./dir3/*))
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-print)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-printf) ARGUMENT('%h\n')<Format> UTILITY(sort) UTILITY(uniq) UTILITY(xargs) FLAG(-n) ARGUMENT(Quantity)<Quantity> FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-I) ARGUMENT({})<Regex> UTILITY(mkdir) FLAG(-v) FLAG(-p) ARGUMENT(Directory)<Directory>
ROOT() PIPELINE() UTILITY(sort) ARGUMENT(File)<File> ARGUMENT(File)<File> UTILITY(uniq) FLAG(-u)
ROOT() UTILITY(find) FLAG(-L) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(l)<Type>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() UTILITY(mkdir) ARGUMENT(Directory)<Directory> ARGUMENT(Directory)<Directory> ARGUMENT(Directory)<Directory> ARGUMENT(Directory)<Directory> ARGUMENT(Directory)<Directory>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UTILITY(paste) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-s)
ROOT(root) T(ssh) T(Regex) T(command)
ROOT(root) T(su) T(-) T(joe) T(-c) T(/path/to/my_daemon) T(3>&-) T(&) T(echo) T(\$!) T(1>&3) T(3>/tmp/su.joe.$$)
ROOT(root) T(find) T(./) T(-name) T(*.php) T(-print0) T(|) T(xargs) T(-0) T(cat)
ROOT(root) T(read) T(-p) T($() T(echo) T(Regex)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-newer) ARGUMENT(File)<File>
ROOT() UTILITY(ls) FLAG(-l) FLAG(-d) FLAG(-t) COMMANDSUBSTITUTION() UTILITY(find) ARGUMENT(Path)<Path>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-regex) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) FLAG(-L) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-perm) ARGUMENT(-Permission)<Permission> UNARYLOGICOP(!) FLAG(-perm) ARGUMENT(-Permission)<Permission>
"ROOT() UTILITY(shopt) ARGUMENT(""$NGV"")<Option> ARGUMENT(nullglob)<Option>"
ROOT() UTILITY(readlink) FLAG(-f) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mmin) ARGUMENT(-Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type>
"ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-printf) ARGUMENT(""%i@%p\n"")<Format>"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(echo) T($() T(readlink) T(-f) T(File)
ROOT() PIPELINE() UTILITY(df) ARGUMENT(File)<File> FLAG(-B) ARGUMENT(Size)<Size> UTILITY(tail) FLAG(-) ARGUMENT(Quantity)<Quantity> UTILITY(awk) ARGUMENT(Program)<Program> UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(ls) FLAG(-l) FLAG(-a) ARGUMENT({})<File>
ROOT() UTILITY(shopt) FLAG(-s) FLAG(-o) ARGUMENT(nounset)<Option>
ROOT() UTILITY(echo) ARGUMENT(Regex)<Regex> COMMANDSUBSTITUTION() PIPELINE() UTILITY(gzip) UTILITY(wc) FLAG(-c)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(wc) FLAG(-w) ARGUMENT({})<File> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT(File)<File>
ROOT() UTILITY(diff) FLAG(-b) FLAG(-u) ARGUMENT(Quantity)<Quantity> ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT(root) T(nohup) T(xterm) T(-e) T(java) T(-jar) T(start.jar) T(&)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-v) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(mv) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-print0)
ROOT(root) T(fg) T(`jobs) T(|) T(iselect) T(-a) T(|) T(grep) T(-o) T([0-9]*`)
ROOT(root) T(seq) T(1) T(10) T(|) T(perl) T(-ne) T(print) T(if) NT(<n>) T(!eof) T(|) T(perl) T(-ne) T(print) T(if) NT(<n>) T(!eof) T(|) T(perl) T(-ne) T(print) T(if) NT(<n>) T(!eof)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(-Size)<Size>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(mv) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-depth) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) FLAG(-f) ARGUMENT({})<File>
ROOT(root) T(find) T(-name) T(*.htm) T(|) T(while) T(read) T(file;) T(do) T(sed) T(s|<title>sometext</title>|<title>${file##*/}</title>|g) T(-i) T($file;) T(done)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(mv) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(head) FLAG(-c) ARGUMENT(Quantity)<Quantity> ARGUMENT(File)<File> UTILITY(tr) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT(root) T(screen) T(-x) T(title)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-exec::+) UTILITY(ls) FLAG(-l) FLAG(-h) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-xdev) FLAG(-printf) ARGUMENT('%s %p\n')<Format> UTILITY(sort) FLAG(-n) FLAG(-r) UTILITY(head) FLAG(-) ARGUMENT(Quantity)<Quantity>
ROOT(root) T(sudo) T(ls) T(-hal) T(/root/) T(|) T(sudo) T(dd) T(of=/root/test.out)
ROOT() UTILITY(which) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(chown) ARGUMENT(Regex)<Regex> FLAG(-R) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(echo) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(echo) ARGUMENT({})<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(mv) FLAG(-n) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(dirname) ARGUMENT({})<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(finger) UTILITY(sort) FLAG(-u)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::+) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-user) ARGUMENT(Regex)<Regex> FLAG(-perm) ARGUMENT(Permission)<Permission>
ROOT() PIPELINE() UTILITY(zcat) ARGUMENT(Regex)<Regex> UTILITY(head) FLAG(-n) ARGUMENT(Quantity)<Quantity>
ROOT() PIPELINE() UTILITY(zcat) ARGUMENT(Regex)<Regex> UTILITY(tar) FLAG(-x)
ROOT() UTILITY(readlink) FLAG(-m) ARGUMENT(File)<File>
ROOT() UTILITY(chmod) ARGUMENT(Permission)<Permission> COMMANDSUBSTITUTION() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type>
ROOT() UTILITY(bind) FLAG(-m) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT(root) T(yes) T(no) T(|) T(<command>)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-ls) FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(/) T(-maxdepth) T(1) T(-xdev) T(-type) T(f|xargs) T(grep) T(-l) T(string|) T(xargs) T(perl) T(-pi) T(-e) T(s/.//g)
ROOT() UTILITY(ls) FLAG(-1) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-execdir::;) UTILITY(echo) ARGUMENT({})<Regex>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(fold) FLAG(-w) ARGUMENT(Quantity)<Quantity> UTILITY(tac) UTILITY(tr) FLAG(-d) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(Path) T($() T(pwd)
ROOT(root) T(find) T(.) T(-type) T(d) T(|) T(tac) T(|) T(xargs) T(rmdir) T(2>/dev/null)
ROOT() UTILITY(sort) FLAG(-b) FLAG(-n) FLAG(-k) ARGUMENT(Number)<Number> ARGUMENT(File)<File>
"ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-printf) ARGUMENT(""%f\n"")<Format>"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan>
ROOT(root) T(lsof) T(-n) T(-i:3000) T(|) T(grep) T(LISTEN) T(|) T(awk) T({) T(print) T($2) T(}) T(|) T(uniq) T(|) T(xargs) T(kill) T(-9)
ROOT(root) T(find) T(.) T(-type) T(f) T(-name) T(*.keep.$1) T(-print0) T(|) T(while) T(IFS=) T(read) T(-r) T(-d) T(f;) T(do) T(mv) T(--) T($f) T(${f%.keep.$1};) T(done)
ROOT() UTILITY(ssh) FLAG(-f) FLAG(-N) FLAG(-T) FLAG(-L) ARGUMENT(Regex)<Regex> FLAG(-R) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-exec::+) UTILITY(du) FLAG(-b) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(grep) FLAG(-o) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> UTILITY(wc) FLAG(-l)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(/) NT(<n>) T(-name) T(10_Recommended*) T(-o) T(-name) T(share) T(-prune) T(-o) T(-type) T(f) NT(<n>) T(-name) T(firefox) T(-0) T(-name) T(thunderbird) T(-0) T(-name) T(seamonkey) T(-print) T(2>/dev/null)
ROOT() UTILITY(tree) FLAG(-f) FLAG(-i)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) FLAG(-r) FLAG(-f) ARGUMENT({})<File>
ROOT(root) T(tmux) T(command)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print) FLAG(-exec::;) UTILITY(awk) ARGUMENT(Program)<Program> ARGUMENT({})<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(d)<Type> FLAG(-delete)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-inum) ARGUMENT(Quantity)<Quantity> FLAG(-exec::;) UTILITY(rm) FLAG(-i) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-xdev) FLAG(-print0)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan> BRACKET() ARGUMENT(Path)<Path> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(top) FLAG(-p) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(Timespan)<Timespan>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
"ROOT(root) T(find) T(.) T(-type) T(d) T(-mtime) T(14) T(|) T(sed) T(-e) T(s,^\./,,) T(>) T(deploy.txt)"
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-n) ARGUMENT(Quantity)<Quantity> FLAG(-I) ARGUMENT({})<Regex> UTILITY(echo) ARGUMENT({})<Regex>
ROOT() UTILITY(grep) FLAG(-F) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(mktemp) FLAG(-d) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-user) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(chown) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(!) FLAG(-type) ARGUMENT(d)<Type> ARGUMENT(Path)<Path> ARGUMENT(Path)<Path>
ROOT() PIPELINE() UTILITY(cal) ARGUMENT(DateTime)<DateTime> ARGUMENT(DateTime)<DateTime> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(awk) ARGUMENT(Program)<Program> ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(Timespan)<Timespan> UNARYLOGICOP(-not) BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-regex) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-regex) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(ssh-keygen) FLAG(-f) ARGUMENT(File)<File> FLAG(-P) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(finger) UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-atime) ARGUMENT(+Timespan)<Timespan> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(Permission)<Permission>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-i) FLAG(-l) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(l)<Type>
"ROOT() UTILITY(date) FLAG(-d) ARGUMENT(Regex)<Regex> ARGUMENT(+""%a %d/%m/%Y"")<Format>"
ROOT() UTILITY(scp) FLAG(-p) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(dig) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT(a)<Type>
ROOT() PIPELINE() UTILITY(jobs) FLAG(-p) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(kill) FLAG(-) ARGUMENT(Regex)<Regex> ARGUMENT({})<Regex>
ROOT(root) T(find) T(.) T(-name) T(*conf*) T(-exec) T(grep) T(-Hni) T(matching_text) T({}) T(;) T(>) T(matching_text.conf.list)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(ls) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(w) UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number>
"ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-printf) ARGUMENT(""The %p file is greater than 500MB\n"")<Format>"
ROOT(root) T(find) T(dir) T(-name) T(image*.jpg) T(-exec) T(/bin/ksh) T(script.ksh) T({}) T(;)
ROOT() UTILITY(rm) FLAG(-f) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-print)
ROOT(root) T(find) T(path/to/folder) T(-type) T(f) T(-print0) T(|) T(sort) T(-z) T(|) T(xargs) T(-0) T(sha1sum;) T(find) T(path/to/folder) NT(<n>) T(-type) T(f) T(-o) T(-type) T(d) T(-print0) T(|) T(sort) T(-z) T(|) T(xargs) T(-0) T(stat) T(-c) T(%n) T(%a) T(|) T(sha1sum)
ROOT() UTILITY(gzip) FLAG(-l) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() UTILITY(source) PROCESSSUBSTITUTION(<) UTILITY(curl) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(comm) FLAG(-2) FLAG(-3) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(cal) FLAG(-h) UTILITY(cut) FLAG(-c) ARGUMENT(Number)<Number>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) FLAG(-r) FLAG(-f) ARGUMENT({})<File>
"ROOT() UTILITY(rsync) FLAG(--iconv) ARGUMENT(UTF-8,UTF-8-MAC)<Option> ARGUMENT(File)<File> ARGUMENT(File)<File>"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) FLAG(-f) ARGUMENT({})<File>
ROOT() UTILITY(cat)
ROOT() UTILITY(shopt) FLAG(-s) ARGUMENT(nullglob)<Option>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(!) FLAG(-path) ARGUMENT(Regex)<Regex> UNARYLOGICOP(!) FLAG(-path) ARGUMENT(Regex)<Regex> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(wc) FLAG(-l) ARGUMENT({})<File>
ROOT() UTILITY(cp) FLAG(-r) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(diff) FLAG(-q) ARGUMENT(File)<File> ARGUMENT(File)<File> UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-E) ARGUMENT(Regex)<Regex> UTILITY(sed) FLAG(-n) ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(finger) ARGUMENT(Regex)<Regex> UTILITY(head) FLAG(-n) ARGUMENT(Quantity)<Quantity> UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UTILITY(wc) FLAG(-l)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(f)<Type>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-delete) BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-delete)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-inum) ARGUMENT(Quantity)<Quantity> FLAG(-exec::;) UTILITY(mv) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(scp) FLAG(-r) FLAG(-p) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-size) ARGUMENT(+Size)<Size>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> BRACKET() UNARYLOGICOP(-not) FLAG(-path) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-and) UNARYLOGICOP(-not) FLAG(-path) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-path) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type>
ROOT(root) T(matlab) T(-nodisplay)
ROOT() PIPELINE() UTILITY(hostname) UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(!) FLAG(-type) ARGUMENT(d)<Type> FLAG(-print)
ROOT(root) T(unset) T(-f) T(ls) T(/bin/ls)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() PIPELINE() UTILITY(awk) ARGUMENT(Program)<Program> ARGUMENT(Program)<Program> UTILITY(paste) FLAG(-s) FLAG(-d) ARGUMENT(Regex)<Regex> UTILITY(sed) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-cmin) ARGUMENT(-Quantity)<Quantity> FLAG(-type) ARGUMENT(f)<Type>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-path) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() PIPELINE() UTILITY(head) FLAG(-n) ARGUMENT(Quantity)<Quantity> ARGUMENT(File)<File> UTILITY(od) FLAG(-c)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
"ROOT(root) T(find) T(.) T(-type) T(d) T(-name) T(.git) T(-exec) T(sh) T(-c) T(cd) T(""{}""/../) T(&&) T(pwd) T(&&) T(git) T(pull) T(;)"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-newer) ARGUMENT(File)<File>
ROOT(root) T(pstree) T(-p) T([pid) T(...])
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(Permission)<Permission>
ROOT() PIPELINE() UTILITY(echo) FLAG(-n) ARGUMENT(Regex)<Regex> UTILITY(md5)
ROOT() UTILITY(gzip) FLAG(-d) ARGUMENT(Regex)<Regex>
ROOT(root) T(ps) T(aux) T(|) T(awk) T({print) T($11}) T(|) T(grep) T(-x) T(-e) T(/.*) T(|) T(xargs) T(-I) T(file) T(dirname) T(file)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type>
ROOT() UTILITY(mkdir) FLAG(-p) COMMANDSUBSTITUTION() PIPELINE() UTILITY(echo) FLAG(-e) ARGUMENT(Regex)<Regex> UTILITY(sed) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-user) ARGUMENT(Regex)<Regex> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(mv) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(tr) FLAG(-d) FLAG(-c) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(-prune) FLAG(-empty)
ROOT() UTILITY(diff) FLAG(-N) FLAG(-a) FLAG(-u) ARGUMENT(Quantity)<Quantity> ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> UTILITY(grep) FLAG(-E) FLAG(-v) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-inum) ARGUMENT(Quantity)<Quantity> FLAG(-exec::;) UTILITY(ls) FLAG(-l) ARGUMENT({})<File>
ROOT() UTILITY(groups) COMMANDSUBSTITUTION() PIPELINE() UTILITY(who) UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) FLAG(-r) FLAG(-f) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(Permission)<Permission>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(mv) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(d)<Type>
ROOT(root) T(find) T(.) T(-name) T(sample*) T(|) T(parallel) T(--dry-run) T(program) T({}-out) T({})
ROOT() PIPELINE() UTILITY(echo) FLAG(-e) ARGUMENT(Regex)<Regex> UTILITY(tee) FLAG(-a) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(bzip2) FLAG(-d) FLAG(-c) ARGUMENT(File)<File> ARGUMENT(File)<File> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(ifconfig) ARGUMENT(Regex)<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number> UTILITY(awk) ARGUMENT(Program)<Program>
"ROOT(root) T(find) T(.) T(-name) T(*.jar) T(-print) T(-exec) T(jar) T(-tf) T({}) T(;) T(|) T(awk) T({if($1~/jar$/)jar=$1;else) T(if($1~/message_track/)arr[jar]=$1;}END{for(i) T(in) T(arr){print) T(i) T("") T(contains) T("") T(arr[i]}})"
ROOT() UTILITY(ln) FLAG(-s) ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(.) T(-name) T(*.txt) T(-exec) T(python) T(myscript.py) T({}) T(+)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-print) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(ls) FLAG(-g) FLAG(-i) FLAG(-l) FLAG(-d) FLAG(-s) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan>
ROOT() UTILITY(mkdir) ARGUMENT(Directory)<Directory>
ROOT() UTILITY(tar) FLAG(-c) FLAG(-v) FLAG(-f) ARGUMENT(File)<File> COMMANDSUBSTITUTION() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(tr) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(find) ARGUMENT({})<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(f)<Type> FLAG(-perm) ARGUMENT(Permission)<Permission>
ROOT() UTILITY(finger) COMMANDSUBSTITUTION() UTILITY(whoami)
ROOT() PIPELINE() UTILITY(echo) FLAG(-e) ARGUMENT(Regex)<Regex> UTILITY(tee) FLAG(-a) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-empty)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(!) FLAG(-newer) ARGUMENT(File)<File> FLAG(-exec::;) UTILITY(touch) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-print) UTILITY(cpio) FLAG(-p) FLAG(-a) FLAG(-m) FLAG(-V) FLAG(-d) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(sed) FLAG(-i) FLAG(-e) ARGUMENT(Program)<Program> ARGUMENT({})<Program>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(tee) ARGUMENT(File)<File>
ROOT() UTILITY(chown) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT(root) T({) T(echo) T(foo;) T(cat) T(bar;) T(}) T(|) T(tee) T(bar) T(>) T(/dev/null)
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(awk) ARGUMENT(Program)<Program> UTILITY(tail) FLAG(-) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(scp) FLAG(-r) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(chgrp) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T($some_dir) T(-prune) T(-empty) T(-type) T(d) T(|) T(read) T(&&) T(echo) T(empty) T(||) T(echo) T(not) T(empty)
ROOT(root) T(kill) T(-20) T($PID;) T(kill) T(-18) T($PID)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() UTILITY(set)
ROOT(root) T(screen) T(-xr) T(14313)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(sed) FLAG(-s) FLAG(--in-place) ARGUMENT(Regex)<Regex> FLAG(-e) ARGUMENT(Program)<Program> ARGUMENT({})<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-regex) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(d)<Type> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT(root) T(su) T(-l) T($USR) T(-s) T(/bin/bash) T(-c) T(exec) T(>) T(>() T(logger) T(-t) T($PRG)
ROOT() UTILITY(ls) FLAG(-l) COMMANDSUBSTITUTION() UTILITY(cat) ARGUMENT(File)<File>
ROOT() UTILITY(split) FLAG(--lines) ARGUMENT(Quantity)<Quantity> FLAG(--numeric-suffixes) FLAG(--suffix-length) ARGUMENT(Quantity)<Quantity> ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(top) FLAG(-b) FLAG(-n) ARGUMENT(Quantity)<Quantity> FLAG(-c)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-L)
ROOT() PIPELINE() UTILITY(ifconfig) ARGUMENT(Regex)<Regex> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(readlink) FLAG(--canonicalize) FLAG(--no-newline) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-path) ARGUMENT(Regex)<Regex> FLAG(-ls)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> FLAG(-lname) ARGUMENT(Regex)<Regex>
"ROOT(root) T(nohup) T(php) T(-r) T(while) T((true)) T({) T(echo) T(""a"";}) T(&)"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mmin) ARGUMENT(+Quantity)<Quantity> FLAG(-mmin) ARGUMENT(-Quantity)<Quantity>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-regex) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-newermt) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-regextype) ARGUMENT(sed)<Type> FLAG(-regex) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-inum) ARGUMENT(Quantity)<Quantity> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(curl) ARGUMENT(Regex)<Regex> UTILITY(tac) UTILITY(tac) UTILITY(grep) FLAG(-q) FLAG(-s) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-regextype) ARGUMENT(posix-egrep)<Type> FLAG(-regex) ARGUMENT(Regex)<Regex>
"ROOT(root) T(find) T(|) T(xargs) T(-I) T({}) T(bash) T(-c) T((([[) T(-f) T(""{}"") T(]]) T(&&) T(grep) T(-l) T(""my) T(key) T(phrase"") T(""{}"")) T(||) T(([[) T(""{}"") T(=~) T(""my) T(key) T(phrase"") T(]]) T(&&) T(echo) T({})))"
ROOT() UTILITY(rsync) FLAG(-a) FLAG(--include) ARGUMENT(Regex)<Regex> FLAG(--exclude) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(ps) FLAG(-e) FLAG(-f) UTILITY(grep) FLAG(-v) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-w) FLAG(-c) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(sort) FLAG(-u) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) UNARYLOGICOP(-prune)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(mkdir) FLAG(-p) OPERATOR(--) COMMANDSUBSTITUTION() UTILITY(dirname) OPERATOR(--) ARGUMENT(Regex)<Regex>
ROOT(root) T(local) T(old_nullglob=$(shopt) T(-p) T(nullglob))
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(sed) FLAG(-i) ARGUMENT(Program)<Program> ARGUMENT({})<File>
"ROOT(root) T(find) T(.) T(-type) T(d) T(-name) T(.git) T(-exec) T(sh) T(-c) T(cd) T(""{}""/../) T(&&) T(pwd) T(&&) T(git) T(pull) T(&&) T(git) T(status) T(;)"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> ARGUMENT(Path)<Path> ARGUMENT(Path)<Path>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mmin) ARGUMENT(-Quantity)<Quantity> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(ls) FLAG(-l) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(Permission)<Permission>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::+) UTILITY(rename) ARGUMENT(Regex)<Regex> ARGUMENT({})<Regex>
ROOT(root) T(sleep) T($(($(date) T(-f) T(-) T(+%s-) T(<<<) T($tomorrow) T(21:30\nnow)0)))
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-inum) ARGUMENT(Quantity)<Quantity> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> UTILITY(sed) FLAG(-e) ARGUMENT(Program)<Program> FLAG(-e) ARGUMENT(Program)<Program> UTILITY(tr) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(.) T(-exec) T(myscript) T({}) T(;)
ROOT() PIPELINE() UTILITY(zcat) ARGUMENT(Regex)<Regex> UTILITY(sed) FLAG(-n) ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(vim) PROCESSSUBSTITUTION(<) UTILITY(history)
ROOT(root) T(find) T(/ghi) T(/jkl) T(-type) T(f) T(-name) T(abc.def) T(2>) T(/dev/null) T(-exec) T(grep) T(-H) T(^#) T({}) T(;)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> UTILITY(wc) FLAG(-l)
ROOT(root) T(getent) T(group) T(|) T(cut) T(-d:) T(-f1) T(|) T(sort) T(|) T(cat) T(-n)
ROOT(root) T(yum) T(update)
ROOT() UTILITY(chown) FLAG(-R) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT(root) T(find) T(.) T(-name) T(*.txt) T(2>>/dev/null)
ROOT() UTILITY(mv) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT(root) T(find) T(/) T(-name) T(program.c) T(2>/dev/null)
ROOT() UTILITY(more) PROCESSSUBSTITUTION(<) UTILITY(ls) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(sed) FLAG(-i) ARGUMENT(Program)<Program> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(-Permission)<Permission>
ROOT() PIPELINE() UTILITY(ls) FLAG(-l) ARGUMENT(File)<File> UTILITY(wc) FLAG(-l)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex>
"ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-ctime) ARGUMENT(-Timespan)<Timespan> FLAG(-printf) ARGUMENT(""%C@ %p\n"")<Format> UTILITY(sort) UTILITY(tail) FLAG(-n) ARGUMENT(Quantity)<Quantity> UTILITY(sed) ARGUMENT(Program)<Program>"
ROOT(root) T(split) T(-b) T(1024k) T(<file_name>)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(yes) ARGUMENT(Regex)<Regex> UTILITY(sed) FLAG(-e) ARGUMENT(Program)<Program> FLAG(-e) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT(root) T(comm) T(-23) T(<(command_which_generate_N|sort)) T(<(command_which_generate_M|sort))
ROOT() UTILITY(ssh-keygen) FLAG(-H) FLAG(-f) ARGUMENT(File)<File>
ROOT() UTILITY(echo) COMMANDSUBSTITUTION() UTILITY(pwd) FLAG(-P)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(-Permission)<Permission>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(mkdir) ARGUMENT(Directory)<Directory>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(mv) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT(root) T(less) T(-f) T(<(php) T(whatevz.php))
ROOT() PIPELINE() UTILITY(gunzip) FLAG(-c) ARGUMENT(Regex)<Regex> UTILITY(tar) FLAG(-t) FLAG(-v) FLAG(-f) ARGUMENT(File)<File>
ROOT() UTILITY(which) ARGUMENT(Regex)<Regex>
ROOT(root) T(read) T(-d) T($() T(echo) T(-e) T(Regex)
ROOT() PIPELINE() UTILITY(df) FLAG(--total) UTILITY(tail) FLAG(-n) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(Permission)<Permission>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-exec::+) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT(root) T(svn) T(status) T(|) T(grep) T(\!) T(|) T(cut) T(-d) T(-f2-)
ROOT(root) T(find) T(.) T(-name) T($1) T(>) T(/tmp/safe_del.lst)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(date) ARGUMENT(-j)<Format> ARGUMENT(-v-1d)<Format>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-regextype) ARGUMENT(posix-egrep)<Type> FLAG(-regex) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rename) ARGUMENT(Regex)<Regex> ARGUMENT({})<Regex>
ROOT() PIPELINE() UTILITY(stat) FLAG(-f) ARGUMENT(File:)<File> ARGUMENT(%N)<File> ARGUMENT(Modified:)<File> ARGUMENT(%t%Sm)<File> ARGUMENT(t*)<File> UTILITY(column) FLAG(-t)
ROOT() UTILITY(cd) COMMANDSUBSTITUTION() UTILITY(dirname) ARGUMENT(Regex)<Regex>
ROOT(root) T(rgrep) T(.) T(|) T(wc) T(-l)
ROOT() UTILITY(rsync) FLAG(-a) FLAG(-v) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(mv) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) UTILITY(rename) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(tree) FLAG(-a) ARGUMENT(Directory)<Directory>
ROOT() PIPELINE() UTILITY(pwd) UTILITY(cut) FLAG(-b) ARGUMENT(Number)<Number> UTILITY(tr) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-regex) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(cp) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-path) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-type) ARGUMENT(f)<Type> FLAG(-perm) ARGUMENT(+Permission)<Permission> FLAG(-ls)
ROOT() UTILITY(ln) FLAG(-s) ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(fold) FLAG(-s) FLAG(-w) ARGUMENT(Quantity)<Quantity>
ROOT(root) T(find) T(.) T(-print0|xargs) T(-0) T(command)
ROOT(root) T(find) T(.) T(-type) T(f) T(-exec) T(perl) T(-i) T(-pe) T(s/something/another/g) T({}) T(;)
ROOT(root) T(alias) T(te=tail) T(-f) T(/var/log/apache2/error_log) T(|) T(perl) T(-ne) T('...')
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> UNARYLOGICOP(!) FLAG(-perm) ARGUMENT(-Permission)<Permission>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-ipath) ARGUMENT(Regex)<Regex> FLAG(-print) ARGUMENT(Path)<Path>
ROOT() UTILITY(sort) FLAG(-o) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(df) ARGUMENT(File)<File> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(ifconfig) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(fold) FLAG(-b) FLAG(-w) ARGUMENT(Quantity)<Quantity> UTILITY(cut) FLAG(--output-delimiter) ARGUMENT(Regex)<Regex> FLAG(-b) ARGUMENT(Number)<Number>
"ROOT() PIPELINE() UTILITY(dig) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT(""$domain"")<Type> UTILITY(wc) FLAG(-l)"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-iwholename) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(grep) FLAG(-H) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(sed) FLAG(-i) ARGUMENT(Program)<Program> ARGUMENT({})<File>
ROOT(root) T(mv) T($() T(ls)
ROOT(root) T(screen) T(-S) T(main)
ROOT(root) T(yes) T(|) T(pv) T(--quiet) T(--rate-limit) T(10)
ROOT() UTILITY(rm) FLAG(-f) ARGUMENT(File)<File> ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(md5)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-print)
ROOT() UTILITY(find) FLAG(-depth) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) FLAG(-r) FLAG(-f) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-depth) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-execdir::;) UTILITY(rename) ARGUMENT(Regex)<Regex> ARGUMENT({})<Regex>
ROOT() UTILITY(ln) FLAG(-s) FLAG(-f) FLAG(-n) ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-atime) ARGUMENT(Timespan)<Timespan> FLAG(-type) ARGUMENT(-f)<Type>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(wc) FLAG(-l) ARGUMENT({})<File> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(dir) T(-name) T(*.jpg) T(-print0) T(|) T(xargs) T(-0) T(-N1) T(ln) T(-s)
ROOT() UTILITY(mv) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT(root) T(comm) T(-2) T(-3) T(<() T(echo) T(Regex) T(|) T(sort) T(-u)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-newer) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity>
ROOT(root) T(su) T(-) T(joe) T(-c) T(/path/to/my_daemon) T(&) T(echo) T(\$!) T(>) T(/tmp/su.joe.$$)
ROOT(root) T(join) T(-t) T(Regex) T(<() T(sort) T(File)
ROOT(root) T(...) T(|) T(paste) T(-sd+) T(-) T(|) T(bc)
ROOT(root) T({) T(time) T(ls) T(-l) T(>/dev/null;) T(}) T(|&) T(grep) T(real)
"ROOT(root) T(find) T(jcho) T(-name) T(*.data) T(-exec) T(sh) T(-c) T(f=""${0}"";) T(d=$(echo) T(${f}) T(|) T(sed) T(-re) T(s/0/2/) T();) T(cp) T(${f}) T(${d}) T({}) T(;)"
"ROOT(root) T(pstree) T($(pgrep) T(CID$client_id)) T(-ap) T(|) T(sed) T(-n) T(s/.*rsync,\([0-9]*\).*/\1/p)"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(df) FLAG(-k) ARGUMENT(File)<File> UTILITY(tail) FLAG(-) ARGUMENT(Quantity)<Quantity> UTILITY(tr) FLAG(-s) ARGUMENT(Regex)<Regex> UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number>
ROOT() UTILITY(chown) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> ARGUMENT(File)<File> ARGUMENT(File)<File> ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-print)
ROOT(root) T(ssh) T(tunneluser@111.222.333.444) T(<<EOI)
ROOT(root) T(seq) T(10000) T(|) T(parallel) T(-j100) T(wget) T(https://www.example.com/page{}.html)
ROOT() UTILITY(rsync) FLAG(-r) FLAG(-a) FLAG(-v) FLAG(-z) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(sleep) ARGUMENT(Timespan)<Timespan>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-daystart) FLAG(-mtime) ARGUMENT(+Timespan)<Timespan>
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(fold) FLAG(-w) ARGUMENT(Quantity)<Quantity> UTILITY(head) FLAG(-) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(grep) FLAG(-i) FLAG(-n) FLAG(-s) FLAG(-r) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT() UTILITY(echo) COMMANDSUBSTITUTION() UTILITY(ifconfig)
ROOT() UTILITY(readlink) FLAG(-m) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-I) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-print)
ROOT(root) T(alias)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-i) FLAG(-l) FLAG(-r) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-H) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(hostname) COMMANDSUBSTITUTION() UTILITY(cat) ARGUMENT(File)<File>
ROOT(root) T(for) T(i) T(in) T(`find) T(.) T(-type) T(d`;) T(do) T(mkdir) T(-p) T(/tmp/tar_root/`echo) T($i|sed) T(s/\.\///`;) T(done)
ROOT() UTILITY(chown) FLAG(--reference) ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(l)<Type> FLAG(-exec::;) UTILITY(ls) FLAG(-l) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-size) ARGUMENT(+Size)<Size>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-print)
ROOT() PIPELINE() UTILITY(yes) ARGUMENT(Regex)<Regex> UTILITY(gunzip) ARGUMENT(Regex)<Regex>
ROOT(root) T(basedir=$(cygpath) T(-m) T($(dirname) T($0)))
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(chmod) FLAG(-v) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() UTILITY(find) FLAG(-E) ARGUMENT(Path)<Path> FLAG(-regex) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-xdev) FLAG(-samefile) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
ROOT(root) T(git) T(ls-files) T(|) T(sed) T(s/) T(/\\) T(/g) T(|) T(grep) T(-E) T(\.*(swift$|mm$)) T(|) T(xargs) T(wc) T(-l)
ROOT(root) T(ssh) T(Regex) T(command)
ROOT() PIPELINE() UTILITY(tac) ARGUMENT(File)<File> UTILITY(sed) ARGUMENT(Program)<Program> UTILITY(tac)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(-Size)<Size>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(-d)<Type> FLAG(-empty) FLAG(-delete)
ROOT(root) T(tr) T(-dc) T(1-65000) T(</dev/urandom) T(|) T(head) T(-c) T(N)
ROOT(root) T(./myprogram) T(|) T(more)
ROOT() UTILITY(rm) FLAG(--force) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(sed) FLAG(-e) ARGUMENT(Program)<Program> UTILITY(xargs) FLAG(-n) ARGUMENT(Quantity)<Quantity> FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-l) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> UTILITY(sed) FLAG(-e) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> ARGUMENT(Path)<Path>
ROOT(root) T(unset) T(GIT_DIR)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(tar) FLAG(-x) FLAG(-z) FLAG(-v) FLAG(-f) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> UNARYLOGICOP(!) FLAG(-path) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(diff) FLAG(-y) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT(root) T(comm) T(-1) T(-2) T(<() T(sort) T(-u) T(File)
ROOT() UTILITY(groups)
"ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-printf) ARGUMENT(""%s %p\n"")<Format>"
ROOT() UTILITY(find) ARGUMENT(.)<Path> FLAG(-name) ARGUMENT(status.c)<Regex> FLAG(-exec::;) UTILITY(stat) FLAG(--format) ARGUMENT(%A)<Regex> ARGUMENT(%s)<File> ARGUMENT(%x)<File> ARGUMENT(%n)<File> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type> FLAG(-exec::;) UTILITY(ls) FLAG(-d) FLAG(-l) FLAG(-r) FLAG(-t) ARGUMENT({})<File>
ROOT() UTILITY(echo) ARGUMENT(Regex)<Regex> COMMANDSUBSTITUTION() UTILITY(dirname) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-print0) UTILITY(xargs) FLAG(-0)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(Timespan)<Timespan>
ROOT(root) T(tmux) T(new-session) T(-ds) T(cf)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-exec::;) UTILITY(ls) FLAG(-s) FLAG(-h) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-ctime) ARGUMENT(-Timespan)<Timespan> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(mv) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(-Permission)<Permission> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-atime) ARGUMENT(+Timespan)<Timespan> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT(root) T(ssh) T(-t) T(Regex) T(command)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(f)<Type> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(mv) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT() UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
"ROOT(root) T(ls) T(|) T(perl) T(-F\n) T(-0777) T(-anE) T(say) T(join) T("","",) T(@F)"
ROOT() UTILITY(ls) FLAG(-l) ARGUMENT(File)<File>
"ROOT(root) T(getent) T(passwd) T(|) T(cut) T(-d:) T(-f1) T(|) T(perl) T(-ewhile(<>){chomp;$l) T(=) T(`crontab) T(-u) T($_) T(-l) T(2>/dev/null`;print) T(""$_\n$l\n"") T(if) T($l})"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-delete)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(tr) FLAG(-d) ARGUMENT(Regex)<Regex>
ROOT(root) T(diff) T(-a) T(--suppress-common-lines) T(-y) T(a.txt) T(b.txt) T(>) T(c.txt)
ROOT() UTILITY(ssh) FLAG(-D) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> FLAG(-g)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(grep) FLAG(--with-filename) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
"ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-printf) ARGUMENT(""%A@ %p\n"")<Format> UTILITY(sort) FLAG(-n) UTILITY(tail) FLAG(-n) ARGUMENT(Quantity)<Quantity> UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number>"
ROOT() UTILITY(echo) COMMANDSUBSTITUTION() PIPELINE() UTILITY(groups) ARGUMENT(Regex)<Regex> UTILITY(sed) FLAG(-e) ARGUMENT(Program)<Program> FLAG(-e) ARGUMENT(Program)<Program>
ROOT(root) T(find) T(.) T(-name) T(*.log) T(-exec) T(grep) T(-l) T(The) T(SAS) T(System) T({}) T(;) T(>) T(sas_log_list.txt)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(mv) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT(root) T(<files.txt) T(xargs) T(stat) T(-c) T(%s) T(|) T(paste) T(-sd+) T(-) T(|) T(bc)
ROOT() PIPELINE() UTILITY(history) UTILITY(tail) FLAG(-) ARGUMENT(Quantity)<Quantity> UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(sort) FLAG(-r) FLAG(-z)
ROOT() PIPELINE() UTILITY(sed) ARGUMENT(Program)<Program> ARGUMENT(File)<File> UTILITY(wc) FLAG(-l)
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(tr) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> UTILITY(tac) FLAG(-s) ARGUMENT(Regex)<Regex> UTILITY(sed) ARGUMENT(Program)<Program>
ROOT(root) T(kill) T($(lsof) T(-t) T(-i:8080))
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> UTILITY(sed) ARGUMENT(Program)<Program>
ROOT() UTILITY(cd) COMMANDSUBSTITUTION() PIPELINE() UTILITY(ls) FLAG(-d) ARGUMENT(File)<File> UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(tail) T(-n) T(`tac) T(biglogfile) T(|) T(grep) T(-vnm1) T(2012) T(|) T(sed) T(s/:.*//) T(|) T(xargs) T(expr) T(-1) T(+`) T(biglogfile)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-exec::;) UTILITY(mkdir) FLAG(-p) ARGUMENT(Directory)<Directory>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(grep) ARGUMENT(Regex)<Regex> COMMANDSUBSTITUTION() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::+) UTILITY(vim) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT(root) T(find) T(.) T(-name) T(file_*) T(-follow) T(-type) T(f) T(-print0) T(|) T(xargs) T(-0) T(zcat) T(|) T(agrep) T(-dEOE) T(grep)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(/mnt/naspath) T(-mtime) T(0) T(-name) T(.snapshot) T(-prune) T(-o) NT(<n>) T(!) T(-name) T(*~) T(-print0) T(|) T(du) T(--files0-from=-) T(-hc) T(|) T(tail) T(-n1) T(>>) T(/tmp/size.log)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(tar) FLAG(-r) FLAG(-v) FLAG(-f) ARGUMENT(File)<File> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-print)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> UTILITY(sort) FLAG(-f) UTILITY(uniq) FLAG(-i) FLAG(-d)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-execdir::;) UTILITY(chown) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT(root) T(find) T(.) T(-type) T(l) T(-exec) T(sh) T(-c) T(file) T(-b) T({}) T(|) T(grep) T(-q) T(^broken) T(;) T(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(ls) FLAG(-l) FLAG(-t) FLAG(-r) ARGUMENT({})<File> UTILITY(tail) FLAG(-n) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(rsync) FLAG(-a) FLAG(-q) FLAG(-z) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(watch) FLAG(-n) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-perm) ARGUMENT(Permission)<Permission>
ROOT(root) T(rsync) T(-rvz) T(-e) T(ssh) T(-p) T(2222) T(--progress) T(--remove-sent-files) T(./dir) T(user@host:/path)
ROOT(root) T(cd) T(/nfs//office/) T(&&) T(find) T(.) T(-name) T(.user.log) T(|) T(xargs) T(-I{}) T(dirname) T({}) T(|) T(xargs) T(-I{}) T(dirname) T({})
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(+Size)<Size>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-print0)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-print0) FLAG(-type) ARGUMENT(d)<Type> UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(ls) FLAG(-a) FLAG(-l) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(ps) T(|) T(grep) T($() T(echo) T(Regex)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-amin) ARGUMENT(-Quantity)<Quantity>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-daystart) FLAG(-type) ARGUMENT(f)<Type> FLAG(-mtime) ARGUMENT(Timespan)<Timespan>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(d)<Type> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(ls) FLAG(-d) FLAG(-1) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(seq) ARGUMENT(Number)<Number> ARGUMENT(Number)<Number> UTILITY(sed) ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(sed) FLAG(-i) ARGUMENT(Program)<Program> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(ls) FLAG(-l) FLAG(-t) FLAG(-r) ARGUMENT({})<File> UTILITY(head) FLAG(-n) ARGUMENT(Quantity)<Quantity>
ROOT(root) T(export) T(value=$(uname) T(-r))
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan>
ROOT(root) T(find) T(.) T(-type) T(f) T(-iname) T(*.png) T(-print0) T(|) T(xargs) T(-I) T({}) T(-0) T(optipng) T(-o5) T(-quiet) T(-keep) T(-preserve) T(-log) T(optipng.log) T({})
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-execdir::;) UTILITY(gunzip) ARGUMENT({})<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::+) UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> UTILITY(wc) FLAG(-l)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(Timespan)<Timespan> FLAG(-exec::;) UTILITY(du) FLAG(-k) FLAG(-s) ARGUMENT({})<File> UTILITY(cut) FLAG(-f) ARGUMENT(Number)<Number>
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(fold) FLAG(-s) FLAG(-w) ARGUMENT(Quantity)<Quantity> UTILITY(head) FLAG(-) ARGUMENT(Quantity)<Quantity>
ROOT() PIPELINE() UTILITY(yes) ARGUMENT(Regex)<Regex> UTILITY(sed) ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(ifconfig) ARGUMENT(Regex)<Regex> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT(root) T(sudo) T(su) T(elasticsearch) T(-c) T(./bin/elasticsearch) T(-d) T(--default.path.conf=/etc/elasticsearch)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan> BINARYLOGICOP(-or) ARGUMENT(Path)<Path> ARGUMENT(Path)<Path>
ROOT() UTILITY(gunzip) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(ls) FLAG(-l) FLAG(-S) ARGUMENT({})<File> UTILITY(head) FLAG(-) ARGUMENT(Quantity)<Quantity> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(mv) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT(root) T(screen) T(-x) T(2073) T(-p) T(0) T(-X) T(title) T(h)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(tr) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(cp) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-iname) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(tar) FLAG(-c) FLAG(-z) FLAG(-v) FLAG(-f) ARGUMENT(File)<File> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-daystart) FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-perm) ARGUMENT(Permission)<Permission> FLAG(-print) FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::+) UTILITY(du) FLAG(-S) FLAG(-h) ARGUMENT({})<File> UTILITY(sort) FLAG(-r) FLAG(-h) UTILITY(head) FLAG(-n) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(+Permission)<Permission>
ROOT() UTILITY(mv) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(seq) FLAG(-w) ARGUMENT(Number)<Number> ARGUMENT(Number)<Number>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(.) T(-type) T(f) T(-iname) T(*.flac) T(-o) T(-print0) T(-iname) T(*.mp3) T(-print0) T(-o) T(-iname) T(*.wav) T(-print0) T(-o) T(-iname) T(*.aac) T(-print0) T(-o) T(-iname) T(*.wma) T(-print0) T(|) T(while) T(read) T(-d) T($\0) T(file;) T(do) T(cp) T(-ruv) T($file) T(/media/wd/network_sync/music/$file;) T(done)
ROOT() UTILITY(scp) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT(root) T(find) T(dir/) T(-name) T(*.txt) T(|) T(tar) T(-c) T(--files-from=-) T(|) T(bzip2) T(>) T(dir_txt.tar.bz2)
ROOT(root) T(echo) T($(() T($(...) T(|) T(paste) T(-sd+) T(-)) T()))
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) FLAG(-r) FLAG(-f) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print) UTILITY(grep) FLAG(-v) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-size) ARGUMENT(Size)<Size>
ROOT(root) T(zegrep) T(xception) T(`find) T(.) T(-name) T(*auth*application*`) T(|) T(wc) T(-l)
ROOT() PIPELINE() UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number> ARGUMENT(File)<File> UTILITY(comm) FLAG(-1) FLAG(-3) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(sed) FLAG(-i) ARGUMENT(Program)<Program> ARGUMENT({})<File>
ROOT() UTILITY(split) FLAG(-b) ARGUMENT(Size)<Size> FLAG(-d) ARGUMENT(File)<File> ARGUMENT(Regex)<Regex> FLAG(--additional-suffix) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(cd) ARGUMENT(Directory)<Directory>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
"ROOT(root) T(find) T(.) T(-type) T(f) T(-iname) T(*.jpg) T(-ls) T(|) T(awk) T(BEGIN) T({print) T(""0""};) T({print) T($7,) T(""+""};) T(END) T({print) T(""p""}) T(|) T(dc)"
"ROOT(root) T(alias) T(memu=ps) T(-u) T($(whoami)) T(-o) T(pid,rss,command) T(|) T(awk) T('{print) T(\$0}{sum+=\$2}) T(END) T({print) T(""Total"",) T(sum/1024,) T(""MB""}')"
"ROOT(root) T(find) T($DIR_TO_CLEAN) T(-mtime) T(+$DAYS_TO_SAVE) T(-exec) T(bash) T(-c) T(printf) T(""count=0;) T(for) T(f;) T(do) T(rm) T(""$f"") T(&&) T((() T(count++) T());) T(done;) T(printf) T(""Total:) T(%d\n"") T($count) T(_) T({}) T(+)"
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(tar) FLAG(-x) FLAG(-z) FLAG(-f) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(sed) ARGUMENT(Program)<Program>
"ROOT() UTILITY(rsync) FLAG(--iconv) ARGUMENT(UTF-8-MAC,UTF-8)<Option> ARGUMENT(File)<File> ARGUMENT(File)<File>"
ROOT() UTILITY(touch) FLAG(-h) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> FLAG(-print) ARGUMENT(Path)<Path>
"ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-printf) ARGUMENT(""mv '%h/%f' '%h/lib%f'\n"")<Format> UTILITY(less) FLAG(-S)"
ROOT(root) T(find) T(/path/you/need) T(-type) T(f) T(-exec) T(md5sum) T({}) T(;) T(>) T(checksums.md5)
"ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-printf) ARGUMENT(""%T@ %p\n"")<Format> UTILITY(sort) FLAG(-n) UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number> UTILITY(tail) FLAG(-n) ARGUMENT(Quantity)<Quantity>"
ROOT() UTILITY(rsync) FLAG(-a) FLAG(-P) FLAG(--include) ARGUMENT(Regex)<Regex> FLAG(--include) ARGUMENT(Regex)<Regex> FLAG(--exclude) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mmin) ARGUMENT(-Quantity)<Quantity> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::+) UTILITY(ls) FLAG(-l) ARGUMENT({})<File>
ROOT() UTILITY(groups) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT(root) T(file) T($(readlink) T(-f) T($(type) T(-p) T(rename)))
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(sed) ARGUMENT(Program)<Program> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-size) ARGUMENT(+Size)<Size>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> BRACKET() FLAG(-perm) ARGUMENT(-Permission)<Permission> FLAG(-fprintf) ARGUMENT(File)<File> ARGUMENT('%#m %u %p\n')<Format> BINARYLOGICOP(-and) ARGUMENT(Path)<Path> BRACKET() FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-fprintf) ARGUMENT(File)<File> ARGUMENT('%-10s %p\n')<Format>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(l)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(file) ARGUMENT({})<File> UTILITY(grep) ARGUMENT(Regex)<Regex>
"ROOT(root) T(ssh) T(REMOTE) T(sh) T(-c) T(""(nohup) T(sleep) T(30;) T(touch) T(nohup-exit)) T(>) T(/dev/null) T(&"")"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-printf) ARGUMENT('Since -printf is an action the implicit -print is not applied\n')<Format>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(d)<Type>
ROOT(root) T(find) T(.) T(-path) T(./dirtoexclude) T(-prune) T(-o) T(-exec) T(java) T(-jar) T(config/yuicompressor-2.4.2.jar) T(--type) T(js) T({}) T(-o) T({}) T(;)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type> FLAG(-printf) ARGUMENT('%f\n')<Format>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-p) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(who) UTILITY(grep) FLAG(-i) ARGUMENT(Regex)<Regex> UTILITY(cut) FLAG(-c) ARGUMENT(Number)<Number>
ROOT() UTILITY(su) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-inum) ARGUMENT(Quantity)<Quantity> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> UTILITY(awk) FLAG(-F) ARGUMENT(Regex)<Regex> ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-printf) ARGUMENT('%d\t%P\n')<Format> UTILITY(sort) FLAG(-r) FLAG(-n) FLAG(-k) ARGUMENT(Number)<Number> UTILITY(cut) FLAG(-f) ARGUMENT(Number)<Number>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-I) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
"ROOT(root) T(tac) T(-s) T(,) T(parse.txt) T(>) T(newparse.txt)"
ROOT() UTILITY(grep) FLAG(-R) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT(root) T(find) T(Path) T($() T(pwd)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-path) ARGUMENT(Regex)<Regex> FLAG(-delete)
ROOT() UTILITY(echo) COMMANDSUBSTITUTION() UTILITY(basename) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(crontab)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(du) ARGUMENT({})<File> UTILITY(sort) FLAG(-n) UTILITY(tail) FLAG(-) ARGUMENT(Quantity)<Quantity> UTILITY(cut) FLAG(-f) ARGUMENT(Number)<Number> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(du) FLAG(-s) FLAG(-h) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-printf) ARGUMENT('Name: %f Owner: %u %s bytes\n')<Format>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-print) UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(cal) UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type> FLAG(-print0)
ROOT(root) T(alias) T(foo=printf)
"ROOT(root) T(find) T(.) T(-type) T(f) NT(<n>) T(-name) T(*.htm*) T(-o) T(-name) T(*.js*) T(-o) T(-name) T(*.txt) T(-exec) T(sh) T(-c) T(echo) T(""$0"") T({}) T(;)"
ROOT() UTILITY(rmdir) FLAG(--ignore-fail-on-non-empty) ARGUMENT(Directory)<Directory>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(ls) FLAG(-s) ARGUMENT({})<File> UTILITY(sort) FLAG(-n) UTILITY(head) FLAG(-) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(diff) FLAG(-N) FLAG(-a) FLAG(-r) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(ls) FLAG(-1) FLAG(-p) UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(sed) ARGUMENT(Program)<Program>
ROOT(root) T(diff) T(<() T(zcat) T(Regex)
ROOT() UTILITY(dig) FLAG(-f) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(env) UTILITY(grep) FLAG(-i) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(.) T(-iname) T(*linkin) T(park*) T(>) T(temp;rsync) T(-arhv) T(--files-from=temp) T(/Users/tommye/Desktop/LP;rm) T(temp)
ROOT() UTILITY(rsync) FLAG(-r) FLAG(-v) FLAG(-v) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(history) UTILITY(more)
ROOT(root) T(yes) T(Hidden) T(|) T(paste) T(-d) T(-s) T(-) T(|) T(dd) T(of=/dev/sdb)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(fold) FLAG(-w) ARGUMENT(Quantity)<Quantity> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(Timespan)<Timespan> FLAG(-type) ARGUMENT(f)<Type>
ROOT(root) T(tmux) T(ls)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(ifconfig) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-E) FLAG(-o) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(gunzip) FLAG(-c) UTILITY(tar) ARGUMENT(-File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(sed) FLAG(-i) ARGUMENT(Program)<Program> ARGUMENT({})<File>
ROOT() UTILITY(tree) FLAG(-P) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type> UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(mkdir) FLAG(-p) ARGUMENT({})<Directory>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-print) FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::+) UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(rsync) FLAG(-a) FLAG(--stats) FLAG(--progress) FLAG(--delete) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(set) FLAG(-a)
ROOT(root) T(./a.out) T(2>&1) T(|) T(tee) T(output)
ROOT() PIPELINE() UTILITY(nl) FLAG(-w) ARGUMENT(Quantity)<Quantity> ARGUMENT(File)<File> UTILITY(sort) FLAG(-k) ARGUMENT(Number)<Number> FLAG(-u) UTILITY(sort) FLAG(-n) UTILITY(cut) FLAG(-f) ARGUMENT(Number)<Number>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(ls) FLAG(-1)
ROOT(root) T(ps) T(-o) T(pid) T(--no-headers) T(--ppid) T($PARENT_PID)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-depth) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-execdir::;) UTILITY(rename) ARGUMENT(Regex)<Regex> ARGUMENT({})<Regex>
ROOT() UTILITY(kill) FLAG(-) ARGUMENT(9)<Regex> COMMANDSUBSTITUTION() UTILITY(lsof) FLAG(-t) FLAG(-u) ARGUMENT(daniel)<Regex>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(rev) UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(-Number)<Number> UTILITY(rev)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-newer) ARGUMENT(File)<File>
ROOT() UTILITY(rsync) FLAG(-a) FLAG(-q) FLAG(--rsync-path) ARGUMENT(Program)<Program> ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT(root) T(comm) T(-3) T(<() T(sort) T(File)
ROOT() UTILITY(top) FLAG(-u) ARGUMENT(Regex)<Regex> FLAG(-d) ARGUMENT(Timespan)<Timespan> FLAG(-b) FLAG(-n) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> BRACKET() FLAG(-perm) ARGUMENT(-Permission)<Permission> BINARYLOGICOP(-or) FLAG(-perm) ARGUMENT(-Permission)<Permission> FLAG(-ls)
ROOT(root) T(find) T(.) T(-type) T(f) T(-name) T(filename.txt) T(-exec) T(vi) T({}) T(+)
ROOT() UTILITY(rm) COMMANDSUBSTITUTION() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(command_that_writes_to_stdout) T(|) T(tee) T(>(command_that_reads_from_stdin))
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UTILITY(grep) FLAG(-E) ARGUMENT(Regex)<Regex>
ROOT(root) T(tmux) T(set) T(-g) T(history-limit) T(10000)
ROOT() UTILITY(cd) COMMANDSUBSTITUTION() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(d)<Type> UTILITY(sed) ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-n) ARGUMENT(Quantity)<Quantity> FLAG(-I) ARGUMENT({})<Regex> UTILITY(sed) FLAG(-i) ARGUMENT(Program)<Program> ARGUMENT({})<File>
ROOT(root) T(find) T(.) NT(<n>) T(-name) T(*.h) T(-o) T(-name) T(*.cpp) T(-print0) T(|) T(xargs) T(-0) T(cat)
ROOT() UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT(File)<File> ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT(root) T(cmdstr=$(alias) T($aliascmd) T(|) T(cut) T(-d') T(-f2) T(|) T(xargs))
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(+Size)<Size>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(gzip) ARGUMENT({})<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-newerct) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-xdev) FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(grep) FLAG(-i) ARGUMENT(Regex)<Regex> FLAG(-q) ARGUMENT({})<File> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(sed) ARGUMENT(Program)<Program> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(.) T(-name) T(*.undo) T(-ls) T(|) T(perl) T(-lane) T($t) T(+=) T($F[6];) T(END{print) T($t})
ROOT() UTILITY(find) ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) FLAG(-r) FLAG(-f) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-links) ARGUMENT(Quantity)<Quantity>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print) UTILITY(cpio) FLAG(-p) FLAG(-v) FLAG(-d) ARGUMENT(Regex)<Regex>
ROOT(root) T(paste) T(<() T(cal) T(DateTime) T(DateTime)
ROOT(root) T(find) T(-exec) T(command) T({}) T(+)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print)
"ROOT(root) T(find) T(-type) T(f) T(-exec) T(readlink) T(-m) T({}) T(;) T(|) T(gawk) T(BEGIN{FS=""/"";OFS=""/""}{$NF=tolower($NF);print}) T(|) T(uniq) T(-c)"
ROOT(root) T(yum) T(--disablerepo=sublime2) T(install) T(firefox)
ROOT() UTILITY(ping) FLAG(-b) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(vim) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-type) ARGUMENT(d)<Type> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) FLAG(-f) FLAG(-r) ARGUMENT({})<File>
ROOT(root) T(view) T(/boot/config-$(uname) T(-r))
ROOT() UTILITY(mv) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT(root) T(find) T(.) T(2>/dev/null) T(>files_and_folders)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(cp) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(ifconfig) UTILITY(grep) FLAG(-E) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-v) ARGUMENT(Regex)<Regex> UTILITY(awk) ARGUMENT(Program)<Program> UTILITY(cut) FLAG(-f) ARGUMENT(Number)<Number> FLAG(-d) ARGUMENT(Regex)<Regex>
ROOT(root) T(echo) T($() T(echo) T(Regex)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(bzip2) FLAG(-v) ARGUMENT({})<File>
ROOT(root) T(comm) T(-1) T(-3) T(<() T(sort) T(File)
ROOT() UTILITY(chown) FLAG(-R) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> BINARYLOGICOP(-and) FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-and) FLAG(-mtime) ARGUMENT(Timespan)<Timespan> UNARYLOGICOP(!) FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T($HOME/.) T(-name) T(*.txt) T(-exec) T(head) T(-n) T(1) T(-v) T({}) T(;) T(>) T(report.txt)
ROOT() UTILITY(chown) FLAG(-R) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT() UTILITY(readlink) COMMANDSUBSTITUTION() UTILITY(pwd)
ROOT() UTILITY(false)
ROOT(root) T(git) T(status) T(|) T(grep) T(On) T(branch) T(|) T(cut) T(-c) T(11-)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(Permission)<Permission>
ROOT(root) T(find) T(.) T(-type) T(f) T(-iname) T(“*.mp3″) T(-exec) T(rename) T(“s/) T(/_/g”) T({}) T(;)
ROOT() UTILITY(date) FLAG(-u) FLAG(-I) ARGUMENT(seconds)<Option>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-depth) FLAG(-exec::+) UTILITY(rmdir) FLAG(-p) ARGUMENT({})<Directory>
ROOT() PIPELINE() UTILITY(gzip) FLAG(-d) FLAG(-c) ARGUMENT(Regex)<Regex> UTILITY(tar) FLAG(-x) FLAG(-v) FLAG(-v) FLAG(-f) ARGUMENT(File)<File>
ROOT() UTILITY(tree) FLAG(-p) FLAG(-d)
ROOT() PIPELINE() UTILITY(echo) FLAG(-e) ARGUMENT(Regex)<Regex> UTILITY(tr) FLAG(-d) ARGUMENT(Regex)<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(cal) UTILITY(awk) FLAG(-v) ARGUMENT(Program)<Program> FLAG(-v) ARGUMENT(Program)<Program> ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(chmod) ARGUMENT(Permission)<Permission> COMMANDSUBSTITUTION() UTILITY(which) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-exec::;) UTILITY(ls) FLAG(-d) FLAG(-l) FLAG(-r) FLAG(-t) ARGUMENT({})<File>
ROOT() UTILITY(nl) FLAG(-b) ARGUMENT(a)<Option> ARGUMENT(File)<File>
ROOT() UTILITY(read) FLAG(-r) FLAG(-n) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-exec::+) UTILITY(mv) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT(root) T(sudo) T(yum) T(install) T(glibc)
ROOT() UTILITY(diff) FLAG(-a) FLAG(--suppress-common-lines) FLAG(-y) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0)
ROOT(root) T(my_program) T(|) T(split) T(-d) T(-b) T(100000) T(-)
ROOT() UTILITY(history) FLAG(-r) ARGUMENT(Quantity)<Quantity>
ROOT() PIPELINE() UTILITY(sort) UTILITY(uniq) FLAG(-c)
ROOT() UTILITY(sed) FLAG(-n) ARGUMENT(Program)<Program>
ROOT(root) T(rsync) T(-avz) T(-e) T(ssh) T(-p) T($portNumber) T(user@remoteip:/path/to/files/) T(/local/path/)
ROOT() UTILITY(curl) ARGUMENT(Regex)<Regex> FLAG(-C) ARGUMENT(-Quantity)<Quantity> FLAG(-b) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT(root) T(ls) T($() T(which) T(Regex)
ROOT(root) T(source) T(`brew) T(--prefix`/etc/grc.bashrc)
ROOT() PIPELINE() UTILITY(ls) ARGUMENT(File)<File> UTILITY(xargs) FLAG(-L) ARGUMENT(Quantity)<Quantity> FLAG(-I) ARGUMENT({})<Regex> UTILITY(chown) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(ln) FLAG(--force) FLAG(--target-directory) ARGUMENT(Directory)<Directory> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(grep) FLAG(-i) ARGUMENT(Regex)<Regex> UTILITY(wc) FLAG(-l)
ROOT() UTILITY(find) FLAG(-x) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0)
ROOT() UTILITY(ls) FLAG(-d) ARGUMENT(File)<File>
ROOT() UTILITY(read) FLAG(-s) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(chmod) FLAG(-R) ARGUMENT(Permission)<Permission> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(wc)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-user) ARGUMENT(Regex)<Regex> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> UTILITY(grep) FLAG(-v) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(.) T(-depth) NT(<n>) T(-wholename) T(./.*) T(-prune) T(-o) T(-print|) T(cpio) T(-aov) T(>) T(/media/caca/extract/full$date.cpio)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) FLAG(-v) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type> UNARYLOGICOP(-not) FLAG(-path) ARGUMENT(Regex)<Regex> FLAG(-printf) ARGUMENT('%T@ %p\n')<Format> UTILITY(sort) UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(chmod) ARGUMENT(-Permission)<Permission> ARGUMENT({})<File> FLAG(-exec::;) UTILITY(ls) FLAG(-l) ARGUMENT({})<File> UTILITY(tee) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(tee)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(comm) T(-2) T(-3) T(<() T(find) T(Path) T(-type) T(f) T(|) T(sed) T(Program) T(|) T(sort)
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(rev)
ROOT(root) T(find) T(.) T(-exec) T(utility) T(;)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-xdev) FLAG(-type) ARGUMENT(f)<Type> FLAG(-print) FLAG(-exec::;) UTILITY(grep) FLAG(-i) ARGUMENT(Regex)<Regex> FLAG(-q) ARGUMENT({})<File>
ROOT(root) T(/bin/true) T($(seq) T(1) T(100000))
ROOT() UTILITY(diff) FLAG(-q) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-cmin) ARGUMENT(Quantity)<Quantity> FLAG(-print)
ROOT() UTILITY(ssh) FLAG(-S) ARGUMENT(Path)<Path> FLAG(-O) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex>
"ROOT(root) T(echo) T(echo) T(""Bash) T(version:) T(${BASH_VERSION}"") T(|) T(ssh) T(-q) T(localhost) T(bash)"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-exec::;) UTILITY(ls) FLAG(-a) FLAG(-l) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-user) ARGUMENT(Regex)<Regex> FLAG(-group) ARGUMENT(Regex)<Regex> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(pstree) FLAG(--show-parents) FLAG(-p) ARGUMENT(Regex)<Regex> UTILITY(head) FLAG(-n) ARGUMENT(Quantity)<Quantity> UTILITY(sed) ARGUMENT(Program)<Program> UTILITY(less)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(touch) T(-t) T($() T(date) T(+%m%d0000)
ROOT() PIPELINE() UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number> UTILITY(sort) UTILITY(comm) FLAG(-2) FLAG(-3) ARGUMENT(File)<File> PROCESSSUBSTITUTION(<) UTILITY(sort) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File> FLAG(-print)
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(tr) FLAG(-d) ARGUMENT(Regex)<Regex> UTILITY(tr) FLAG(-d) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-H) FLAG(-n) FLAG(-T) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-regex) ARGUMENT(Regex)<Regex>
ROOT(root) T(diff) T(<() T(sort) T(File) T(-u)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-delete)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(-Permission)<Permission> FLAG(-perm) ARGUMENT(Permission)<Permission> UNARYLOGICOP(!) FLAG(-perm) ARGUMENT(Permission)<Permission>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT(root) T(find) T(/) T(-path) T(/proc) T(-prune) T(-o) T(-user) T(<account>) T(-ls)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) FLAG(-f) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT(root) T(HISTTIMEFORMAT=%s) T(history) T(2)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(-Size)<Size> FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-ctime) ARGUMENT(-Timespan)<Timespan>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(yes) ARGUMENT(Regex)<Regex> UTILITY(head) FLAG(-) ARGUMENT(Quantity)<Quantity> UTILITY(tr) FLAG(-d) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(mv) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(wc) FLAG(-c)
ROOT() UTILITY(find) ARGUMENT(Path)<Path>
ROOT() UTILITY(readlink) ARGUMENT(File)<File>
"ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-printf) ARGUMENT(""%12s %t %h/%fn"")<Format>"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(!) FLAG(-path) ARGUMENT(Regex)<Regex> UNARYLOGICOP(!) FLAG(-path) ARGUMENT(Regex)<Regex> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-printf) ARGUMENT('%p %s\n')<Format>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(mv) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-v) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(Size)<Size> FLAG(-type) ARGUMENT(f)<Type>
"ROOT(root) T(alias) T(logspace=find) T(/apps/) T(/opt/) T(-type) T(f) T(-size) T(+100M) T(-exec) T(ls) T(-lh) T({}) T(\;) T(|) T(awk) T('{print) T($5,) T($9) T(}')"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-mmin) ARGUMENT(-Quantity)<Quantity>
ROOT() UTILITY(ls) FLAG(-d) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-perm) ARGUMENT(-Permission)<Permission>
ROOT() UTILITY(mv) FLAG(-T) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT(root) T(find) T(-maxdepth) T(1) T(-type) T(d) T(|) T(while) T(read) T(dir;) T(do) T(echo) T($dir;) T(echo) T(cmd2;) T(done)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
"ROOT(root) T(find) T(${INPUT_LOCATION}) T(-name) T(*.pdf.marker) T(|) T(xargs) T(-i) T(bash) T(-cx) T(pdf=`dirname) T({}`/`basename) T({}) T(.marker`;[) T(-e) T(""$pdf"") T(]&&{) T(mv) T({}) T(""$pdf"") T(""$0"";}) T(${OUTPUT_LOCATION})"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::+) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT(root) T(find) T(.) T(|) T(grep) T(.xml$) T(|) T(parallel) T(bzip2)
ROOT(root) T(ps) T(aux) T(|) T(grep) T(python) T(csp_build.py) T(|) T(head) T(-1) T(|) T(cut) T(-d) T(-f) T(2) T(|) T(xargs) T(kill)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-print) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(ssh-keygen) FLAG(-f) ARGUMENT(File)<File>
ROOT(root) T(yum) T(repolist) T(|) T(tail) T(-n) T(+3) T(|) T(grep) T(-v) T(repolist:) T(|) T(cut) T(-f1) T(-d)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-exec::+) UTILITY(ls) FLAG(-s) FLAG(-h) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(groups) ARGUMENT(Regex)<Regex> UTILITY(sed) ARGUMENT(Program)<Program> UTILITY(grep) FLAG(-E) FLAG(-v) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-user) ARGUMENT(Regex)<Regex> FLAG(-ls)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-print0)
ROOT() PIPELINE() UTILITY(who) UTILITY(awk) FLAG(-F) ARGUMENT(Regex)<Regex> ARGUMENT(Program)<Program> UTILITY(sort) FLAG(-u) UTILITY(wc) FLAG(-l)
ROOT() UTILITY(mv) ARGUMENT(File)<File> COMMANDSUBSTITUTION() UTILITY(dirname) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-print)
ROOT() UTILITY(su) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(ifconfig) ARGUMENT(Regex)<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(awk) ARGUMENT(Program)<Program> UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(rev) UTILITY(awk) FLAG(-F) ARGUMENT(Regex)<Regex> ARGUMENT(Program)<Program> UTILITY(rev) UTILITY(sort) FLAG(-t) ARGUMENT(Regex)<Regex> FLAG(-k) ARGUMENT(Number)<Number>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rename) ARGUMENT(Regex)<Regex> ARGUMENT({})<Regex>
ROOT() UTILITY(dirname) COMMANDSUBSTITUTION() UTILITY(readlink) FLAG(-m) ARGUMENT(File)<File>
ROOT() UTILITY(wc) FLAG(-l) COMMANDSUBSTITUTION() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan>
ROOT() UTILITY(chmod) ARGUMENT(Permission)<Permission> COMMANDSUBSTITUTION() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-exec::+) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan> FLAG(-print)
ROOT() PIPELINE() UTILITY(zcat) ARGUMENT(Regex)<Regex> UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number> UTILITY(sort) UTILITY(uniq) FLAG(-c)
ROOT() UTILITY(mv) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(split) FLAG(-b) ARGUMENT(Size)<Size> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-l) FLAG(-E) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(ping) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-L) ARGUMENT(Quantity)<Quantity> FLAG(-I) ARGUMENT({})<Regex> UTILITY(date) ARGUMENT('+%c: {}')<Format>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-xdev) FLAG(-samefile) ARGUMENT(Regex)<Regex> FLAG(-exec::+) UTILITY(rm) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() UTILITY(chown) FLAG(-R) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> FLAG(-f) FLAG(-mtime) ARGUMENT(Timespan)<Timespan>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(echo) ARGUMENT(Regex)<Regex>
ROOT(root) T(alias) T(py=python2.5) T(-O)
ROOT() PIPELINE() UTILITY(sed) ARGUMENT(Program)<Program> ARGUMENT(File)<File> UTILITY(split) FLAG(-l) ARGUMENT(Quantity)<Quantity> ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(rev) UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number> UTILITY(rev)
ROOT(root) T(finger) T(|) T(colrm) T(34) T(39)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(python) T(-u) T(client.py) T(|) T(tee) T(logfile)
ROOT() UTILITY(file) COMMANDSUBSTITUTION() UTILITY(which) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(ifconfig) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-o) FLAG(-E) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::+) UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> UTILITY(wc) FLAG(-l)
ROOT() UTILITY(find) ARGUMENT(Path)<Path>
ROOT() PIPELINE() UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> UTILITY(sort) FLAG(-u) UTILITY(wc) FLAG(-l)
ROOT() UTILITY(tail) FLAG(-f) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(ls) FLAG(-l) ARGUMENT({})<File>
ROOT(root) T(brew) T(outdated) T(|) T(wc) T(-l)
ROOT(root) T(find) T(.) T(-type) T(f) T(-wholename) T(*.mbox) T(-print0) T(|) T(while) T(read) T(I) T(;) T(do) T(mv) T($I) T($(echo) T($I) T(|) T(sed) T(s/\.mbox//)) T(;) T(done) T(;)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(wc) FLAG(-l) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(wc) FLAG(-l) ARGUMENT({})<File>
ROOT(root) T(git) T(ls-files) T(-z) T(|) T(xargs) T(-0) T(wc) T(-l)
ROOT() PIPELINE() UTILITY(tar) FLAG(-c) ARGUMENT(File)<File> UTILITY(md5sum)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-atime) ARGUMENT(Timespan)<Timespan>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT(root) T(export) T(user=`env|grep) T(-i) T(SSH_CLIENT|cut) T(-d) T(-f1|cut) T(-d.) T(-f4`)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(file) ARGUMENT({})<File> UTILITY(grep) FLAG(-i) ARGUMENT(Regex)<Regex> UTILITY(cut) FLAG(-f) ARGUMENT(Number)<Number> FLAG(-d) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan> FLAG(-print0)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-i) FLAG(-l) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(curl) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(grep) FLAG(-l) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::+) UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> UTILITY(wc) FLAG(-l)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-samefile) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(/var/log) T(-name) T(*.log) T(-print0) T(2>/dev/null)
ROOT(root) T(grep) T(-n) T(myfile.txt) T(|) T(sort) T(-r) T(-n) T(|) T(gawk) T(-F) T(:) T({) T(print) T($2) T(})
ROOT() UTILITY(rsync) FLAG(-a) FLAG(-v) FLAG(--copy-dirlinks) FLAG(--delete) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-newermt) ARGUMENT(Regex)<Regex> UNARYLOGICOP(!) FLAG(-newermt) ARGUMENT(Regex)<Regex> FLAG(-ls)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;)
ROOT(root) T(find) T(.) T(-type) T(f) T(-mtime) T(-14) T(|) T(cut) T(-b) T(3-) T(>) T(deploy.txt)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(read) FLAG(-p) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UTILITY(awk) FLAG(-F) ARGUMENT(Regex)<Regex> ARGUMENT(Program)<Program> UTILITY(sh)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(+Size)<Size> UNARYLOGICOP(!) FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-perm) ARGUMENT(-Permission)<Permission> UTILITY(wc) FLAG(-l)
ROOT() UTILITY(hostname) FLAG(-f)
ROOT(root) T(find) T(/tmp/test/) T(-maxdepth) T(2) T(-mindepth) T(1) T(-type) T(d) T(|) T(while) T(read) T(dir;) T(do) T(printf) T(%s) T(:) T($dir;) T(find) T($dir) T(-maxdepth) T(1) T(-type) T(f) T(|) T(wc) T(-l;) T(find) T($dir) T(-maxdepth) T(1) T(-type) T(f) T(;) T(done;)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-depth)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-printf) ARGUMENT('%p:')<Format>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-exec::;) UTILITY(rm) FLAG(-f) ARGUMENT({})<File>
ROOT() UTILITY(sort) ARGUMENT(File)<File> ARGUMENT(File)<File> FLAG(-o) ARGUMENT(File)<File>
"ROOT() UTILITY(mount) FLAG(-o) ARGUMENT(rw,remount)<Option> FLAG(-t) ARGUMENT(rootfs)<Option> ARGUMENT(Regex)<Regex>"
ROOT(root) T(yum) T(update) T(|) T(tee) T(mylogfile)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(l)<Type> FLAG(-xtype) ARGUMENT(l)<Type>
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(nl) UTILITY(sed) ARGUMENT(Program)<Program>
"ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-ctime) ARGUMENT(-Timespan)<Timespan> FLAG(-type) ARGUMENT(f)<Type> FLAG(-printf) ARGUMENT(""%P\n"")<Format> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rsync) FLAG(-a) FLAG(-v) FLAG(-R) ARGUMENT(File)<File> ARGUMENT(File)<File>"
"ROOT(root) T(ssh) T($(vagrant) T(ssh-config) T(HOST) T(|) T(sed) T(/^[[:space:]]*$/d) T(|) T(awk) T(NR>1) T({print) T("") T(-o) T(""$1""=""$2})) T(localhost)"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(cp) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> UTILITY(paste) FLAG(-s) FLAG(-d) ARGUMENT(File)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(cp) ARGUMENT({})<File> ARGUMENT(File)<File>
"ROOT() UTILITY(date) FLAG(--date) ARGUMENT(Regex)<Regex> ARGUMENT(""+%a %d/%m/%Y"")<Format>"
ROOT() PIPELINE() UTILITY(finger) UTILITY(sed) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(grep) FLAG(-w) FLAG(-v) FLAG(-f) ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type> UTILITY(wc) FLAG(-l)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mmin) ARGUMENT(-Quantity)<Quantity> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(ls) FLAG(-l) ARGUMENT({})<File>
ROOT() UTILITY(find) FLAG(-L) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-type) ARGUMENT(d)<Type>
ROOT() UTILITY(wc) FLAG(-l) COMMANDSUBSTITUTION() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() UTILITY(rsync) FLAG(-a) FLAG(-v) FLAG(-l) FLAG(-z) FLAG(-p) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT(root) T(exec) T(1) T(|) T(tee) T(${LOG_FILE})
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(tee) ARGUMENT(File)<File> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(readlink) ARGUMENT(File)<File>
ROOT(root) T(export) T(FOO_BACKWARDS=$(echo) T(foo) T(|) T(rev))
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-P) FLAG(-L) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-P) FLAG(-l) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(Path) T(-type) T(d) T(|) T(ssh) T(Regex) T(xargs) T(-I) T({}) T(mkdir) T(-p) T(Directory)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-printf) ARGUMENT('\n')<Format> UTILITY(wc) FLAG(-l)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-user) ARGUMENT(Regex)<Regex>
ROOT(root) T(pv) T(file1) T(|) T(wc) T(-l)
ROOT() UTILITY(chgrp) FLAG(-R) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-regex) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(gzip) ARGUMENT({})<Regex>
ROOT(root) T(alias) T(m=mplayer) T(-novideo) T(-loop) T(0)
ROOT() UTILITY(which) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(ln) FLAG(-s) ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(file) ARGUMENT({})<File> UTILITY(awk) FLAG(-F) ARGUMENT(Regex)<Regex> ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-newer) ARGUMENT(File)<File> BINARYLOGICOP(-and) UNARYLOGICOP(!) FLAG(-newer) ARGUMENT(File)<File> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rename) FLAG(-v) ARGUMENT(Regex)<Regex> ARGUMENT({})<Regex>
ROOT() PIPELINE() UTILITY(diff) ARGUMENT(File)<File> ARGUMENT(File)<File> ARGUMENT(File)<File> UTILITY(tail) FLAG(-n) ARGUMENT(+Quantity)<Quantity> UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(cut) FLAG(-c) ARGUMENT(Number)<Number>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(ls) FLAG(-l) ARGUMENT({})<File>
ROOT(root) T(IFS=;) T(read) T(-a) T(myArray) T(<<<) T($myArray)
ROOT(root) T({) T(time) T(find) T(/) T(2>/dev/null;) T(}) T(2>time.txt)
ROOT() UTILITY(shopt) FLAG(-s) ARGUMENT(failglob)<Option>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-daystart) FLAG(-mtime) ARGUMENT(-Timespan)<Timespan> FLAG(-type) ARGUMENT(f)<Type> UNARYLOGICOP(!) FLAG(-mtime) ARGUMENT(-Timespan)<Timespan> FLAG(-printf) ARGUMENT('%Tm %p\n')<Format>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) FLAG(-r) FLAG(-f) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(Path) T($() T(pwd)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(curl) ARGUMENT(Regex)<Regex> UTILITY(sh)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) FLAG(-r) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-ok::;) UTILITY(rm) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(ln) FLAG(-s) ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-delete)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-group) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-nogroup) FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(chown) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT($sourcePath)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(*.log)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<ReservedWord> UTILITY(zip) ARGUMENT($zipFile)<File> FLAG(-@) ARGUMENT({})<ReservedWord>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(mv) FLAG(--target-directory) ARGUMENT(Directory)<Directory> ARGUMENT({})<File>
ROOT(root) T(paste) T(-d) T(-) T(-) T(<) T(file) T(|) T(column) T(-t)
"ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-printf) ARGUMENT(""%C@ %p\n"")<Format> UTILITY(sort) FLAG(-r) FLAG(-n) UTILITY(head) FLAG(-n) ARGUMENT(Quantity)<Quantity>"
ROOT(root) T(ps) T(-u) T($() T(whoami)
ROOT() UTILITY(ssh) FLAG(-p) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(!) FLAG(-newer) ARGUMENT(File)<File>
ROOT() UTILITY(basename) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(grep) FLAG(-m) ARGUMENT(Quantity)<Quantity> FLAG(-i) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UTILITY(env) FLAG(-i) ARGUMENT(Program)<Program> ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> FLAG(-0) UTILITY(bzip2) FLAG(-d) FLAG(-c) ARGUMENT({})<File> UTILITY(cut) FLAG(-f) ARGUMENT(Number)<Number> FLAG(-d) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-print) ARGUMENT(Path)<Path>
ROOT() PIPELINE() UTILITY(stat) FLAG(-c) ARGUMENT(File:)<Regex> ARGUMENT(%n)<File> ARGUMENT(Modified:)<File> ARGUMENT(%y)<File> ARGUMENT(t*)<File> UTILITY(column) FLAG(-t)
"ROOT(root) T(find) T(.) NT(<n>) T(-name) T(*.pdf) T(-or) T(-name) T(*.PDF) T(-execdir) T(sh) T(-c) T(mv) T(-v) T(""$1"") T(""$(echo) T(""$1"") T(|) T(tr) T("") T("") T(""_"") T(|) T(tr) T(-d) T(""{()},\!'"") T(|) T(tr) T(""A-Z"") T(""a-z"") T(|) T(sed) T(""s/_-_/_/g"")"") T(_) T({}) T(;)"
ROOT() PIPELINE() UTILITY(ping) FLAG(-c) ARGUMENT(Quantity)<Quantity> ARGUMENT(Regex)<Regex> UTILITY(tail) FLAG(-) ARGUMENT(Quantity)<Quantity> UTILITY(awk) ARGUMENT(Program)<Program> UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number>
ROOT(root)
ROOT() UTILITY(fg) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-f) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(Path) T(-name) T(Regex) T(|) T(xargs) T(-I) T({}) T(mv) T({}) T($() T(basename) T({}) T(Regex)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(tr) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> UTILITY(tail) FLAG(-) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> BRACKET() FLAG(-type) ARGUMENT(f)<Type> BINARYLOGICOP(-or) FLAG(-type) ARGUMENT(d)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-ls)
ROOT() PIPELINE() UTILITY(cal) ARGUMENT(DateTime)<DateTime> ARGUMENT(DateTime)<DateTime> UTILITY(sed) FLAG(-n) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(grep) FLAG(-l) FLAG(-i) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(echo) FLAG(-e) ARGUMENT(Regex)<Regex> UTILITY(awk) ARGUMENT(Program)<Program> UTILITY(od) FLAG(-a)
ROOT(root) T(perl) T(-ne) T(print) T(($l) T(=) T($_)) T(if) T((length) T(>) T(length($l));) T(filename) T(|) T(tail) T(-1)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(grep) FLAG(-E) FLAG(-l) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(grep) FLAG(-F) FLAG(-v) FLAG(-f) ARGUMENT(Regex)<File> UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(awk) ARGUMENT(Program)<Program> ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(bzip2) FLAG(-c) ARGUMENT(File)<File> UTILITY(tee) FLAG(-a) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(printf) ARGUMENT(a\0b)<Format> UTILITY(od) FLAG(-t) ARGUMENT(x1)<Type>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> FLAG(-print)
ROOT() UTILITY(touch) COMMANDSUBSTITUTION() UTILITY(cat) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(echo) FLAG(-n) ARGUMENT(Regex)<Regex> UTILITY(md5sum)
ROOT(root) T(find) T(.) T(-type) T(f) T(-iname) T(*.un~) T(|) T(while) T(read) T(UNDOFILE) T(;) T(do) T(FILE=$() T(echo) T($UNDOFILE) T(|) T(sed) T(-r) T(-e) T(s/.un~$//) T(-e) T(s&/\.([^/]*)&/\1&)
ROOT(root) T(find) T(.) T(-name) T(*.foo) T(-print0) T(|) T(xargs) T(-0) T(-n) T(1) T(somecommand)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::+) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT(root) T(/bin/sh) T(-c) T(/bin/true) T($(seq) T(1) T(100000))
ROOT(root) T(tar) T(-c) T(-C) T(/path/on/local/machine) T(.) T(|) T(docker) T(cp) T(-) T(dvc:/path/on/container)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-newer) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-iname) ARGUMENT(Regex)<Regex> UNARYLOGICOP(!) FLAG(-path) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-iname) ARGUMENT(Regex)<Regex> UNARYLOGICOP(!) FLAG(-path) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(mv) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan> FLAG(-print)
"ROOT(root) T(ipcs) T(-a) T(|) T(nawk) T(-v) T(u=`whoami`) T($5==u) T(&&(($1==""m"") T(&&) T($9==0)||($1==""s"")){print) T(""ipcrm) T(-""$1,$2,"";""}) T(|) T(/bin/sh)"
ROOT(root) T(find) T(-name) T(*.undo) T(-exec) T(stat) T(-c%s) T({}) T(;) T(|) T(awk) T({total) T(+=) T($1}) T(END) T({print) T(total})
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print) UTILITY(grep) FLAG(-v) ARGUMENT(Regex)<Regex>
"ROOT(root) T(find) T(.) T(-type) T(d) T(-execdir) T(sh) T(-c) T(printf) T(""%s/%s\n"") T(""$PWD"") T(""$0"") T({}) T(;)"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-newer) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-ipath) ARGUMENT(Regex)<Regex> UTILITY(head) FLAG(-n) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex>
"ROOT() COMMANDSUBSTITUTION() UTILITY(date) ARGUMENT(""+%s.%N"")<Format>"
ROOT(root) T(if) T(find) T(/some/dir/) T(-maxdepth) T(0) T(-empty) T(|) T(read) T(v;) T(then) T(echo) T(Empty) T(dir;) T(fi)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-regextype) ARGUMENT(posix-egrep)<Type> FLAG(-regex) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(/directory/whatever) T(-name) T(*.tar.gz) T(-mtime) T(+$DAYS) T(|) T(grep) T(tar.gz) T(||) T(echo) T(You) T(don't) T(have) T(files) T(older) T(than) T($DAYS) T(days)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-exec::;) UTILITY(grep) FLAG(-H) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(echo) COMMANDSUBSTITUTION() UTILITY(date) ARGUMENT(-v-1d)<Format> ARGUMENT(+%F)<Format>
ROOT() PIPELINE() UTILITY(w) UTILITY(tr) FLAG(-s) ARGUMENT(Regex)<Regex> UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number> UTILITY(tail) FLAG(-n) ARGUMENT(+Quantity)<Quantity>
ROOT() UTILITY(basename) ARGUMENT(Regex)<Regex>
ROOT(root) T(git) T(log) T(--pretty=format:) T(--name-only) T(|) T(grep) T(.cs$) T(|) T(sort) T(|) T(uniq) T(-c) T(|) T(sort) T(-rg) T(|) T(head) T(-20)
ROOT() UTILITY(basename) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-n) ARGUMENT(Quantity)<Quantity> FLAG(-I) ARGUMENT({})<Regex> UTILITY(cp) ARGUMENT(File)<File> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(pwd) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(basename) ARGUMENT({})<Regex>
ROOT() UTILITY(diff) FLAG(-x) ARGUMENT(Regex)<Regex> FLAG(-x) ARGUMENT(Regex)<Regex> FLAG(-x) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> ARGUMENT(File)<File>
"ROOT() PIPELINE() UTILITY(date) FLAG(--date) ARGUMENT(Regex)<Regex> ARGUMENT(""+%a %d/%m/%Y"")<Format> UTILITY(read) ARGUMENT(Regex)<Regex>"
ROOT() UTILITY(rsync) FLAG(-n) FLAG(-v) FLAG(-r) FLAG(-a) FLAG(-L) ARGUMENT(File)<File> ARGUMENT(File)<File> FLAG(--exclude) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(-prune) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-cmin) ARGUMENT(+Quantity)<Quantity> UTILITY(xargs) FLAG(-i) FLAG(-I) ARGUMENT({})<Regex> UTILITY(basename) ARGUMENT({})<Regex> ARGUMENT(Regex)<Regex> ARGUMENT({})<Regex>
ROOT() UTILITY(diff) FLAG(-y) FLAG(-W) ARGUMENT(Quantity)<Quantity> ARGUMENT(File)<File> ARGUMENT(File)<File>
"ROOT(root) T(find) T(./) T(-name) T(*.php) T(-type) T(f) T(|) T(xargs) T(sed) T(-i) T(/./,$!d) T(2>&1)"
ROOT(root) T(less) T(-f) T(<(php) T(-i))
ROOT() PIPELINE() UTILITY(w) UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(Size)<Size>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-atime) ARGUMENT(+Timespan)<Timespan>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(sed) FLAG(-i) ARGUMENT(Regex)<Program> FLAG(-e) ARGUMENT(Program)<Program> ARGUMENT({})<File>
ROOT() UTILITY(ls) FLAG(-l) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-E) ARGUMENT(Regex)<Regex>
ROOT(root) T(sshpass) T(-p) T(YOUR_PASSWORD) T(ssh) T(-o) T(StrictHostKeyChecking=no) T(YOUR_USERNAME@SOME_SITE.COM:2400)
ROOT(root) T(find) T(.) T(-name) T(*.bak) T(-type) T(f) T(-atime) T(+30) T(-exec) T(csh) T(-c) T(test) T(-s) T($1:r) T(&&) T(rm) T($1) T({}) T(;)
ROOT(root) T(find) T(.) T(-type) T(f) T(-path) T(*/.svn*) T(-prune) T(-o) T(-print) T(|) T(perl) T(-ne) T(print) T($1) T(if) T(m/\.([^.\/]+)$/) T(|) T(sort) T(-u)
"ROOT(root) T(cat) T(blah) T(|) T(perl) T(-en) T(/\xCA\xFE\xBA\xBE/) T(&&) T(print) T(""found"")"
ROOT() UTILITY(mktemp) FLAG(-d)
ROOT(root) T(find) T(.) T(-name) T(*.fq) T(|) T(xargs) T(-n) T(1) T(fastqc)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type>
ROOT() PIPELINE() UTILITY(tac) ARGUMENT(File)<File> UTILITY(rev)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-regex) ARGUMENT(Regex)<Regex>
"ROOT(root) T(find) T(-maxdepth) T(1) T(-name) T(*.sql) T(-exec) T(sed) T(-e) T(s/) T(,) T();/1,1);/g) T({}) T(|) T(mysql) T(-D) T(ootp)"
ROOT() PIPELINE() UTILITY(find) ARGUMENT(.)<Path> FLAG(-name) ARGUMENT(*.html)<Regex> FLAG(-print) UTILITY(zip) ARGUMENT(all-html-files.zip)<File> FLAG(-@)
ROOT() UTILITY(read) FLAG(-r) FLAG(-s) FLAG(-p) ARGUMENT(Regex)<Regex> FLAG(-d) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(bunzip2) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print) FLAG(-exec::;) UTILITY(grep) FLAG(--color) ARGUMENT(auto)<Option> FLAG(--no-messages) FLAG(-n) FLAG(-H) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(ifconfig) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-E) FLAG(-o) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-E) FLAG(-o) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-v) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mmin) ARGUMENT(-Quantity)<Quantity> FLAG(-mmin) ARGUMENT(+Quantity)<Quantity>
ROOT(root) T(find) T(-iname) T(*weservice*|xargs) T(-I) T({}) T(service) T({}) T(restart)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-print)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-newermt) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-not) FLAG(-newermt) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(gunzip) FLAG(-c) ARGUMENT({})<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT() UTILITY(grep) ARGUMENT(Regex)<Regex> COMMANDSUBSTITUTION() UTILITY(find) ARGUMENT(Path)<Path>
ROOT() PIPELINE() UTILITY(crontab) FLAG(-l) UTILITY(sed) ARGUMENT(Program)<Program> UTILITY(crontab) ARGUMENT(File)<File>
ROOT() UTILITY(which) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(ln) FLAG(-s) FLAG(-f) ARGUMENT(File)<File> COMMANDSUBSTITUTION() UTILITY(which) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(-prune) FLAG(-type) ARGUMENT(f)<Type> FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-print)
ROOT() PIPELINE() UTILITY(dig) FLAG(-x) ARGUMENT(Regex)<Regex> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UTILITY(wc) FLAG(-l)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-execdir::;) UTILITY(tar) FLAG(-c) FLAG(-v) FLAG(-f) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(basename) ARGUMENT({})<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-user) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(chgrp) FLAG(-R) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT(root) T(unset) T(DISPLAY)
ROOT(root) T(find) T(.) T(-name) T(*.PNG) T(-exec) T(bash) T(-c) T(git) T(mv) T({}) T($(dirname) T({})/$(basename) T({}) T(.PNG)48.png) T(;)
ROOT() UTILITY(find) FLAG(-L) ARGUMENT(Path)<Path>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-ls)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> BINARYLOGICOP(-and) UNARYLOGICOP(!) FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-and) UNARYLOGICOP(!) UNARYLOGICOP(-prune)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-regextype) ARGUMENT(posix-extended)<Type> FLAG(-regex) COMMANDSUBSTITUTION() UTILITY(hostname)
ROOT(root) T(find) T(-name) T(*spaces*) T(|) T(while) T(read) T(text;) T(do) T(cat) T($text;) T(done)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-exec::+) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(fold) FLAG(-w) ARGUMENT(Quantity)<Quantity> UTILITY(sort) FLAG(-u)
ROOT() UTILITY(ln) FLAG(-s) FLAG(-T) FLAG(-f) FLAG(-v) ARGUMENT(File)<File> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(ls) FLAG(-l) ARGUMENT({})<File>
ROOT() UTILITY(read) FLAG(-u) ARGUMENT(Regex)<Regex> FLAG(-N) ARGUMENT(Quantity)<Quantity> FLAG(-r) FLAG(-s) ARGUMENT(Regex)<Regex>
ROOT(root) T(watch) T(--interval) T(0.1) T(nc) T(remote.machine) T(CLOSED_PORT)
ROOT(root) T(find) T(/home) T(-type) T(f) T(-name) T(*.ext) T(-print0) T(|) T(while) T(read) T(-r) T(-d) T($(printf) T(000)) T(-r) T(path;) T(do) T(dos2unix) T($path) T($path_new;) T(done)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-user) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(rsync) FLAG(-a) FLAG(-v) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(rm) FLAG(-r) FLAG(-f) COMMANDSUBSTITUTION() UTILITY(pwd) FLAG(-P)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> ARGUMENT(Path)<Path>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan>
ROOT() UTILITY(find) FLAG(-L) ARGUMENT(Path)<Path> FLAG(-samefile) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(tr) FLAG(-d) FLAG(-c) ARGUMENT(Regex)<Regex> UTILITY(wc) FLAG(-c)
ROOT() UTILITY(apropos) ARGUMENT(Regex)<Regex>
ROOT(root) T(/usr/sbin/host) T(`hostname`)
ROOT() UTILITY(kill) COMMANDSUBSTITUTION() UTILITY(cat) ARGUMENT(File)<File>
ROOT() UTILITY(mktemp) COMMANDSUBSTITUTION() UTILITY(dirname) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(rsync) FLAG(-v) FLAG(-u) FLAG(-a) FLAG(-r) FLAG(--delete-after) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-printf) ARGUMENT('%l\n')<Format>
ROOT(root) T(find) T(/opt/chromium/src) T(-wholename) T(*/.svn) T(-prune) T(-o) T(-type) T(f) T(-regex) T(.*\.\(c\|cc\|h\|js\)) T(-print) T(>) T(CSRC.LST)
ROOT() UTILITY(env) ARGUMENT(Program)<Program> ARGUMENT(Program)<Program>
ROOT() UTILITY(grep) FLAG(-r) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(grep) FLAG(--with-filename) FLAG(-c) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(zcat) ARGUMENT(Regex)<Regex> UTILITY(tail) FLAG(-n) ARGUMENT(+Quantity)<Quantity> UTILITY(head) FLAG(-) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(-Permission)<Permission> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-regextype) ARGUMENT(posix-extended)<Type> FLAG(-regex) ARGUMENT(Regex)<Regex>
ROOT(root) T(seq) T(Number) T(Number) T(|) T(sort) T(-R) T(|) T(tee) T(File) T(|) T(cat) T(<() T(cat) T(File)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(-not) FLAG(-path) ARGUMENT(Regex)<Regex> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(/usr/ports/)<Path> FLAG(-name) ARGUMENT(*patch-*)<Regex> FLAG(-exec::+) UTILITY(grep) COMMANDSUBSTITUTION() UTILITY(printf) ARGUMENT(\15)<Format> FLAG(-l) ARGUMENT({})<File> UTILITY(wc) FLAG(-l)
ROOT(root) T(git) T(branch) T(--no-color) T(|) T(grep) T(-E) T(^\*) T(|) T(cut) T(-d) T(-f) T(2)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-n) ARGUMENT(Quantity)<Quantity> FLAG(-I) ARGUMENT({})<Regex> UTILITY(basename) ARGUMENT({})<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-inum) ARGUMENT(Quantity)<Quantity> FLAG(-delete)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(Permission)<Permission>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-mindepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(f)<Type> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-exec::+) UTILITY(rename) FLAG(-n) ARGUMENT(Regex)<Regex> ARGUMENT({})<Regex>
ROOT() UTILITY(find) ARGUMENT({})<Path> FLAG(-name) ARGUMENT(Regex)<Regex> BRACKET() FLAG(-type) ARGUMENT(f)<Type> BINARYLOGICOP(-or) FLAG(-type) ARGUMENT(l)<Type> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-perm) ARGUMENT(+Permission)<Permission>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(awk) ARGUMENT(Program)<Program> ARGUMENT({})<Program>
ROOT(root) T(pgrep) T(-u) T(`whoami`) T(mpirun)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(-Permission)<Permission> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-iwholename) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(grep) FLAG(-H) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(mkdir) ARGUMENT(Directory)<Directory>
ROOT(root) T(find) T(${S}) T(-name) T(*.so*) T(-exec) T(doexe) T({}) T(+)
ROOT(root) T(inotifywait) T(-e) T(attrib) T(target-directory)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(echo) FLAG(-n) FLAG(-e) COMMANDSUBSTITUTION() UTILITY(whoami)
ROOT(root) T(find) T(.) T(-path) T(./vendor) T(-prune) T(-o) NT(<n>) T(-name) T(*.java) T(-o) T(-name) T(*.xml) T(-o) T(-name) T(*.css) T(-exec) T(gsed) T(-i) T(-E) T(s/\t/) T(/) T({}) T(;) T(-exec) T(gsed) T(-i) T(-E) T(s/[[:space:]]*$//) T({}) T(;) T(-exec) T(gsed) T(-i) T(-E) T(s/\r\n/\n/) T({}) T(;)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(sed) FLAG(-e) ARGUMENT(Program)<Program> UTILITY(xargs) FLAG(-n) ARGUMENT(Quantity)<Quantity> FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-l) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> UTILITY(sed) FLAG(-e) ARGUMENT(Program)<Program> UTILITY(xargs) FLAG(-n) ARGUMENT(Quantity)<Quantity> FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) FLAG(-f) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(ls) FLAG(-l) ARGUMENT({})<File> UTILITY(less)
ROOT() PIPELINE() UTILITY(cat) ARGUMENT(File)<File> UTILITY(grep) FLAG(-i) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(sed) FLAG(-i) ARGUMENT(Program)<Program> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(who) FLAG(-m) UTILITY(awk) ARGUMENT(Program)<Program> UTILITY(sed) ARGUMENT(Program)<Program>
ROOT(root) T(find) T(my) T(key) T(phrase) T(>) T(mylist.txt)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(bzip2) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT(root) T(FOO=$(echo) T(Hello) T(world) T(|) T(gzip) T(|) T(base64))
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(f)<Type> FLAG(-perm) ARGUMENT(-Permission)<Permission>
ROOT(root) T(source) T($() T(dirname) T($() T(which) T(Regex)
ROOT() UTILITY(shopt) FLAG(-s) ARGUMENT(expand_aliases)<Option>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-path) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-type) ARGUMENT(f)<Type> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT(root) T(yes) T(|) T(ruby) T(-e) T($(curl) T(-fsSL) T(https://raw.github.com/Homebrew/homebrew/go/install))
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print) UTILITY(grep) FLAG(-E) FLAG(-i) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(df) FLAG(--total) FLAG(-B) ARGUMENT(Size)<Size> UTILITY(tail) FLAG(-n) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(ls) FLAG(-F) FLAG(-l) FLAG(-t) FLAG(-r) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UNARYLOGICOP(!) FLAG(-perm) ARGUMENT(Permission)<Permission>
ROOT() PIPELINE() UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> UTILITY(grep) FLAG(-o) ARGUMENT(Regex)<Regex> UTILITY(tr) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(md5sum)
ROOT() UTILITY(tree) FLAG(-s)
ROOT() PIPELINE() UTILITY(curl) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> UTILITY(gunzip) ARGUMENT(Regex)<Regex> UTILITY(less)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-ls)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) FLAG(-v) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-daystart) FLAG(-mtime) ARGUMENT(-Timespan)<Timespan>
ROOT() UTILITY(scp) FLAG(-q) FLAG(-v) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(crontab) FLAG(-l) UTILITY(grep) FLAG(-v) ARGUMENT(Regex)<Regex> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(sed) FLAG(-i) ARGUMENT(Program)<Program> ARGUMENT({})<File>
ROOT(root) T(find) T(/usr/share/man/) T(-type) T(f) T(-exec) T(ls) T(-S) T({}) T(+) T(2>/dev/null) T(|) T(head)
ROOT() UTILITY(echo) COMMANDSUBSTITUTION() PIPELINE() UTILITY(uname) FLAG(-a) UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> BRACKET() FLAG(-iname) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-and) BRACKET() FLAG(-iname) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-print0)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-exec::;) UTILITY(ls) FLAG(-d) FLAG(-l) FLAG(-r) FLAG(-t) ARGUMENT({})<File> UTILITY(wc) FLAG(--lines)
ROOT(root) T(alias) T(-s) T(ps=screen) T(-d) T(-m) T(okular)
ROOT(root) T(find) T(.) T(-name) T(*.jar) T(-exec) T(unzip) T(-l) T({}) T(;|grep) T(-E) T(Archive:|message_track.properties)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(echo) ARGUMENT({})<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-l) FLAG(-i) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(scp) FLAG(-v) FLAG(-p) ARGUMENT(File)<File>
ROOT() UTILITY(dig) FLAG(-x) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(du) FLAG(-B) ARGUMENT(Size)<Size> FLAG(--apparent-size) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(!) FLAG(-size) ARGUMENT(Size)<Size>
ROOT() UTILITY(od) FLAG(-x) FLAG(-c) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-n) ARGUMENT(Quantity)<Quantity> FLAG(-I) ARGUMENT({})<Regex> UTILITY(cp) FLAG(-f) ARGUMENT(File)<File> ARGUMENT({})<File>
"ROOT(root) T(cat) T(numbers.txt) T(|) T(php) T(-r) T(echo) T(array_sum(explode(PHP_EOL,) T(stream_get_contents(STDIN)));)"
ROOT(root) T(find) T(.) T(-type) T(f) T(-exec) T(curl) T(--user) T(user:pass) T(--ftp-create-dirs) T(-T) T({}) T(https://PATH_TO_NEXUS/{}) T(;)
ROOT(root) T(find) T(data/) T(-print0) T(|) T(tar) T(-T) T(-) T(--null) T(--create) T(-f) T(archive.tar)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() PIPELINE() UTILITY(grep) FLAG(-F) FLAG(-f) ARGUMENT(Regex)<File> ARGUMENT(File)<Regex> UTILITY(sort) UTILITY(uniq) FLAG(-c) UTILITY(sort) FLAG(-n)
"ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-printf) ARGUMENT(""%T@ %p\n"")<Format> UTILITY(sort) UTILITY(tail) FLAG(-) ARGUMENT(Quantity)<Quantity>"
ROOT() UTILITY(chown) ARGUMENT(Regex)<Regex> FLAG(-R) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(sort) ARGUMENT(File)<File> ARGUMENT(File)<File> ARGUMENT(File)<File> UTILITY(uniq) FLAG(-u)
ROOT(root) T(kill) T(-15) T($() T(lsof) T(-i:6000) T(-t)
ROOT() UTILITY(dirname) COMMANDSUBSTITUTION() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(sed) FLAG(-e) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-printf) ARGUMENT('Name: %16f Size: %6s\n')<Format>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-path) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-path) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-path) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-depth) FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT(root) T(yes) T(|) T(sudo) T(rpm) T(-Uvh) T(https://mirror.webtatic.com/yum/el6/latest.rpm)
ROOT() UTILITY(chown) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type> FLAG(-exec::+) UTILITY(basename) FLAG(-a) ARGUMENT({})<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-type) ARGUMENT(f)<Type> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-perm) ARGUMENT(Permission)<Permission> FLAG(-print)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UNARYLOGICOP(-not) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(sed) FLAG(-i) ARGUMENT(Program)<Program> ARGUMENT({})<File>
ROOT(root) T(find) T(.) T(-type) T(d) T(-exec) T(./script.sh) T({}) T(;)
ROOT() UTILITY(mkdir) FLAG(-p) ARGUMENT(Directory)<Directory>
ROOT() UTILITY(mkdir) ARGUMENT(Directory)<Directory> ARGUMENT(Directory)<Directory>
ROOT(root) T(find) T(.) T(-maxdepth) T(1) T(-type) T(d) NT(<n>) T(!) T(-name) T(.) T(-exec) T(bash) T(-c) T(cd) T('{}') T(&&) T(pwd) T(;)
ROOT() PIPELINE() UTILITY(ping) FLAG(-c) ARGUMENT(Quantity)<Quantity> ARGUMENT(Regex)<Regex> UTILITY(head) FLAG(-n) ARGUMENT(Quantity)<Quantity> UTILITY(grep) FLAG(-E) FLAG(-o) FLAG(-w) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> UTILITY(grep) FLAG(-v) FLAG(-f) ARGUMENT(Regex)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> UTILITY(paste) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-s)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(ls) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(gunzip) T(-c) T(-d) T($ip) T(|) T(pax) T(-r)
ROOT(root) T(tar) T(-c) T(foo.sh) T(|) T(docker) T(exec) T(-i) T(theDockerContainer) T(/bin/tar) T(-C) T(/tmp) T(-x)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(echo) T($() T(dirname) T($() T(readlink) T(-f) T(File)
ROOT(root) T(find) T(.) T(-name) T(*.zip) T(-exec) T(unzip) T({}) T(;)
ROOT(root) T(find) T(.) T(-name) T(file*) T(-print0) T(|) T(xargs) T(-0) T(perl) T(-ple)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan> FLAG(-exec::;) UTILITY(rm) FLAG(-r) FLAG(-f) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(grep) FLAG(-r) FLAG(-n) FLAG(-w) ARGUMENT(Regex)<Regex> FLAG(-e) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(tar) FLAG(-z) FLAG(-c) FLAG(-v) FLAG(-f) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT(root) T(find) T(.) NT(<n>) T(-name) T(*.bak) T(-o) T(-name) T(*.backup) T(-type) T(f) T(-atime) T(+30) T(-exec) T(csh) T(-c) T(if) NT(<n>) T(-f) T($1:r) T(rm) T($1) T({}) T(;)
ROOT() UTILITY(rsync) FLAG(-R) ARGUMENT(File)<File> ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mmin) ARGUMENT(-Quantity)<Quantity> FLAG(-exec::;) UTILITY(ls) FLAG(-l) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT(root) T(git) T(ls-files) T(|) T(xargs) T(cat) T(|) T(wc) T(-l)
ROOT(root) T(find) T(Path) T(-type) T(f) T(-print) T(|) T(xargs) T(-l) T(Quantity) T(-I) T({}) T(mv) T(-f) T({}) T(File)
"ROOT(root) T(find) T(.) T(-name) T(*.py) T(-type) T(f) T(-exec) T(sh) T(-c) T(grep) T(""something"") T(<""$0"") T(>""$0.txt"") T({}) T(;)"
ROOT() UTILITY(rsync) FLAG(-a) FLAG(-v) FLAG(-R) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT(root) T(script) T(-c) T(./a) T(/dev/null) T(|) T(tee) T(output.txt)
"ROOT(root) T(find) T(.) T(-name) T(*.txt) T(|) T(xargs) T(bash) T(-c) T(</dev/tty) T(vim) T(""$@"") T(ignoreme)"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::+) UTILITY(sed) FLAG(--in-place) ARGUMENT(Regex)<Regex> ARGUMENT({})<Program>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UTILITY(cpio) FLAG(-p) FLAG(-v) FLAG(-d) FLAG(-m) FLAG(-B) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> UTILITY(sed) ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(mv) ARGUMENT({})<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(ls) FLAG(-d) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-exec::;) UTILITY(ls) FLAG(-l) FLAG(-d) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-printf) ARGUMENT('%p %s\n')<Format> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(df)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(screen) T(-r) T(name)
ROOT() PIPELINE() UTILITY(dig) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(File)<File> UTILITY(uniq)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-exec::+) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(diff) FLAG(-r) FLAG(-q) ARGUMENT(File)<File> ARGUMENT(File)<File> UTILITY(grep) FLAG(-E) ARGUMENT(Regex)<Regex> UTILITY(sed) FLAG(-n) ARGUMENT(Program)<Program> UTILITY(awk) ARGUMENT(Program)<Program> ARGUMENT(Program)<Program> ARGUMENT(Program)<Program> ARGUMENT({})<Program> ARGUMENT(Program)<Program> ARGUMENT(Program)<Program> ARGUMENT({})<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(d)<Type> FLAG(-exec::;) UTILITY(rm) FLAG(-r) FLAG(-f) ARGUMENT({})<File>
ROOT(root) T(while) T(read) T(line) T(;) T(do) T(cp) T($line) T(~/bar) T(;) T(done) T(<) T(<(find) T(.) T(|) T(grep) T(foo))
ROOT() UTILITY(mv) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(paste) FLAG(-s) FLAG(-d) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT() UTILITY(dig) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT(a)<Type>
ROOT(root) T(su) T(-c) T(dnf) T(install) T(glibc.i686)
ROOT() UTILITY(mv) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mmin) ARGUMENT(-Quantity)<Quantity> FLAG(-ls)
ROOT(root) T(zcat) T(input.txt.gz) T(|) T(command) T(-)
ROOT() PIPELINE() UTILITY(ls) FLAG(-d) FLAG(-1) ARGUMENT(File)<File> UTILITY(nl)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(grep) FLAG(--exclude) ARGUMENT(Regex)<Regex> FLAG(-r) FLAG(-n) FLAG(-w) ARGUMENT(Regex)<Regex> FLAG(-e) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(rev) UTILITY(cut) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(Number)<Number> UTILITY(rev)
ROOT() PIPELINE() UTILITY(grep) FLAG(-R) FLAG(-i) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-exec::+) UTILITY(cp) FLAG(-t) ARGUMENT(Directory)<Directory> OPERATOR(--) ARGUMENT({})<File>
ROOT(root) T(find) T(temp/images/) T(-type) T(f) T(-iname) T(Thumbs.db) T(|) T(while) T(read) T(FILE) T(;) T(do) T(rm) T(${FILE}) T(;) T(done)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(tar) ARGUMENT(-File)<File> ARGUMENT(File)<File> FLAG(-j) FLAG(-c) FLAG(-v) FLAG(-f) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(sed) FLAG(-i) ARGUMENT(Program)<Program> ARGUMENT(File)<File> ARGUMENT({})<File>
ROOT() UTILITY(diff) FLAG(-r) FLAG(-q) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT(root) T(cat) T($() T(find) T(Path) T(-name) T(Regex)
ROOT(root) T(echo) T(ee) T(|) T(tee) T(>(foo))
ROOT(root) T(echo) T(`hostname) T(-i`) T(file.txt) T(|) T(xargs) T(myscript.rb)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type> FLAG(-exec::;) UTILITY(tar) FLAG(-z) FLAG(-c) FLAG(-p) FLAG(-v) FLAG(-f) ARGUMENT(File)<File> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-print) UTILITY(sed) ARGUMENT(Program)<Program> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(mkdir) ARGUMENT({})<Directory>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(-Permission)<Permission>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File> UNARYLOGICOP(-prune)
ROOT() UTILITY(mkdir) ARGUMENT(Directory)<Directory>
ROOT() PIPELINE() UTILITY(yes) UTILITY(cat) UTILITY(more)
ROOT(root) T(find) T(`pwd`) T(-iname) T(.*) T(-type) T(f) T(>) T(all-hidden-files.txt)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-size) ARGUMENT(-Size)<Size>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-type) ARGUMENT(f)<Type> FLAG(-ls)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(file) ARGUMENT({})<File> UTILITY(grep) FLAG(-o) FLAG(-P) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-regex) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(du) FLAG(--files0-from) ARGUMENT(File)<File> FLAG(-c) FLAG(-s) UTILITY(tail) FLAG(-) ARGUMENT(Quantity)<Quantity>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mmin) ARGUMENT(Quantity)<Quantity> FLAG(-print)
ROOT() PIPELINE() UTILITY(echo) FLAG(-e) ARGUMENT(Regex)<Regex> UTILITY(paste) ARGUMENT(File)<File> ARGUMENT(File)<File> UTILITY(column) FLAG(-t)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(Permission)<Permission> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-ls)
ROOT(root) T(alias) T(mkdir=¨mkdir) T(-p¨)
ROOT() PIPELINE() UTILITY(ping) ARGUMENT(Regex)<Regex> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(seq) ARGUMENT(Number)<Number> UTILITY(sed) ARGUMENT(Program)<Program>
ROOT(root) T(rsync) T(--partial) T(--progress) T(--rsh=ssh) T(local_file) T(user@host:remote_file)
ROOT() UTILITY(echo) COMMANDSUBSTITUTION() UTILITY(basename) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(-Size)<Size>
"ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-printf) ARGUMENT(""%h\n"")<Format>"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-mtime) ARGUMENT(Timespan)<Timespan> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(ls) FLAG(-l) ARGUMENT({})<File>
"ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-fprintf) ARGUMENT(File)<File> ARGUMENT(""%i,%b,%M,%n,%u,%g,%s,%CY-%Cm-%Cd %CT,%p\n"")<Format>"
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-type) ARGUMENT(d)<Type> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print) UTILITY(xargs) FLAG(-i) FLAG(-I) ARGUMENT({})<Regex> UTILITY(mv) ARGUMENT({})<File> ARGUMENT(File)<File> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(set) UTILITY(grep) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(ssh) FLAG(-x) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(dig) ARGUMENT(Regex)<Regex> FLAG(-f) ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(mkdir) ARGUMENT(Directory)<Directory>
ROOT() UTILITY(cd) COMMANDSUBSTITUTION() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-printf) ARGUMENT('%h\n')<Format>
ROOT(root) T(find) T(/) T(-type) T(d) T(-name) T(httpdocs) T(2>) T(/dev/null)
ROOT() PIPELINE() UTILITY(join) FLAG(-t) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File> ARGUMENT(File)<File> UTILITY(awk) FLAG(-F) ARGUMENT(Regex)<Regex> ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-execdir::;) UTILITY(pwd)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(uniq) FLAG(-u)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-regextype) ARGUMENT(posix-egrep)<Type> FLAG(-regex) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(tree) UTILITY(md5sum)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(+Timespan)<Timespan> FLAG(-delete)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mmin) ARGUMENT(-Quantity)<Quantity>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> UTILITY(grep) FLAG(-P) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) FLAG(-r) FLAG(-f) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(tar) FLAG(-z) FLAG(-c) FLAG(-f) ARGUMENT(File)<File> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> ARGUMENT(Path)<Path>
"ROOT() UTILITY(date) ARGUMENT(-j)<Format> FLAG(-f) ARGUMENT(File)<File> ARGUMENT(""Sat Aug 09 13:37:14 2014 +1100"")<Format>"
ROOT() UTILITY(wc) FLAG(-l) COMMANDSUBSTITUTION() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-amin) ARGUMENT(-Quantity)<Quantity>
ROOT() UTILITY(read) FLAG(-r) FLAG(-d) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(.) T(-name) T(m?) T(-type) T(d) T(-exec) T(./fixmbox) T({}) T(+)
ROOT(root) T(find) T(.) T(-type) T(f) T(-name) T(*.java) T(|) T(xargs>) T(tar) T(cvf) T(myfile.tar)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> BRACKET() FLAG(-name) ARGUMENT(Regex)<Regex> UNARYLOGICOP(-prune) BINARYLOGICOP(-or) UNARYLOGICOP(!) FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-d) ARGUMENT(Regex)<Regex> FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-H) FLAG(-d) ARGUMENT(Regex)<Option> ARGUMENT(File)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(chgrp) ARGUMENT(Regex)<Regex> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print) FLAG(-exec::;) UTILITY(sed) FLAG(-n) ARGUMENT(Program)<Program> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(yum) T(info) T(zsh)
ROOT() UTILITY(rm) COMMANDSUBSTITUTION() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
"ROOT(root) T(find) T(.) T(-type) T(f) T(-exec) T(bash) T(-c) T(myfile) T(""{}"") T(;)"
ROOT(root) T(git) T(whatchanged) T(--all) T(|) T(grep) T(\.\.\.) T(|) T(cut) T(-d) T(-f5-) T(|) T(cut) T(-f2-) T(|) T(sort) T(|) T(uniq) T(-c) T(|) T(sort)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(grep) FLAG(-H) FLAG(-n) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
"ROOT(root) T(find) T(.) T(-type) T(f) T(-exec) T(sh) T(-c) T(printf) T(""%s) T(%s) T(\n"") T(""$(ls) T(-l) T($1)"") T(""$(md5sum) T($1)"") T({}) T({}) T(;) T(|) T(awk) T({$8="""";) T(print) T($0})"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) FLAG(-f) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-regextype) ARGUMENT(posix-ergep)<Type> FLAG(-regex) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(grep) FLAG(-l) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(awk) FLAG(-F) ARGUMENT(Regex)<Regex> ARGUMENT(Program)<Program>
ROOT() PIPELINE() UTILITY(echo) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-o) ARGUMENT(Regex)<Regex> UTILITY(tr) FLAG(-d) ARGUMENT(Regex)<Regex>
ROOT(root) T(comm) T(-2) T(-3) T(<() T(sort) T(File)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-delete)
ROOT() PIPELINE() UTILITY(ls) UTILITY(read) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-H) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> UTILITY(sed) FLAG(-e) ARGUMENT(Program)<Program> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(mkdir) FLAG(-p) ARGUMENT({})<Directory>
ROOT(root) T(find) T(FFF) T(-name) T(*.txt) T(-exec) T(md5sum) T({}) T(;) T(>) T($TMP_ORI)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-daystart) FLAG(-type) ARGUMENT(f)<Type> FLAG(-mtime) ARGUMENT(Timespan)<Timespan>
ROOT(root) T(cd) T($() T(dirname) T($() T(which) T(Regex)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-ls) UTILITY(sort) FLAG(-k) ARGUMENT(+Number)<Number> FLAG(-r)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-perm) ARGUMENT(Permission)<Permission> FLAG(-print) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print)
ROOT(root) T(yourcommand) T(|) T(tee) T(output.txt)
"ROOT(root) T(zcat) T(/var/log/fail2ban.log*) T(|) T(gawk) T(/.*Ban.*/) T({print) T($7};) T(|) T(sort) T(|) T(uniq) T(-c) T(|) T(sort) T(|) T(gawk) T({) T(""geoiplookup) T("") T($2) T(""|) T(cut) T(-f2) T(-d:) T("") T(|) T(getline) T(geoip;) T(print) T($2) T(""\t\t"") T($1) T("") T("") T(geoip})"
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) ARGUMENT({})<File>
ROOT(root) T(head) T(-$(gcalctool) T(-s) T($(cat) T(file) T(|) T(wc) T(-l)-N)) T(file.txt)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-empty)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-atime) ARGUMENT(+Timespan)<Timespan> FLAG(-size) ARGUMENT(Size)<Size>
ROOT(root) T(git) T(status) T(|) T(head) T(-1) T(|) T(cut) T(-d) T(-f) T(3)
ROOT(root) T(unset) T($(echo) T($a) T(|) T(/usr/bin/cut) T(-d) T(=) T(-f) T(1))
"ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-printf) ARGUMENT('""%h/%f"" ')<Format>"
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> BINARYLOGICOP(-or) FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(wc) FLAG(-l) ARGUMENT({})<File> UTILITY(grep) ARGUMENT(Regex)<Regex> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT(root) T(./hw) T(|) T(sleep) T(1000)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::+) UTILITY(ls) FLAG(-l) FLAG(-a) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(!) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(d)<Type>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-ctime) ARGUMENT(+Timespan)<Timespan> FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::;) UTILITY(rm) ARGUMENT({})<File>
ROOT(root) T(curl) T(yahoo.com) T(--silent) T(|) T(wc) T(-l)
ROOT() UTILITY(echo) COMMANDSUBSTITUTION() UTILITY(basename) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex>
"ROOT(root) T(find) T(/tmp/) T(-ctime) T(-1) T(-name) T(x*) T(-exec) T(sh) T(-c) T(exec) T(mv) T(""$@"") T(~/play/) T(sh) T({}) T(+)"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rename) ARGUMENT(Regex)<Regex> ARGUMENT({})<Regex>
ROOT(root) T(find) T(.) T(-name) T(*.txt) T(-print) T(2>/dev/null)
ROOT() UTILITY(find) FLAG(-L) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> BRACKET() FLAG(-perm) ARGUMENT(-Permission)<Permission> BINARYLOGICOP(-or) FLAG(-perm) ARGUMENT(-Permission)<Permission> BINARYLOGICOP(-or) FLAG(-perm) ARGUMENT(-Permission)<Permission>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-xdev) FLAG(-type) ARGUMENT(f)<Type> FLAG(-exec::+) UTILITY(grep) FLAG(-Z) FLAG(-l) FLAG(-i) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(kill) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-user) ARGUMENT(Regex)<Regex> UTILITY(more)
ROOT(root) T(cd) T($() T(dirname) T($() T(which) T(Regex)
ROOT(root) T(progam.sh) T(2>&1) T(|) T(tee) T(-a) T(log)
ROOT() UTILITY(gunzip) FLAG(-l) ARGUMENT(Regex)<Regex>
ROOT(root) T(find) T(.) T(-name) T(*.php) T(|) T(pv) T(--line-mode) T(|) T(xargs) T(chmod) T(755)
ROOT(root) T(find) T(.) T(-print0) T(|) T(xargs) T(-0) T(COMMAND)
"ROOT() UTILITY(kill) COMMANDSUBSTITUTION() PIPELINE() UTILITY(ps) FLAG(-A) FLAG(-o) ARGUMENT(stat,ppid)<Format> UTILITY(awk) ARGUMENT(Program)<Program>"
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(grep) FLAG(-H) FLAG(-n) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) FLAG(-i) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT(root) T(screen) T(-Rd)
ROOT() UTILITY(w)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-type) ARGUMENT(d)<Type> BRACKET() UNARYLOGICOP(!) FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-printf) ARGUMENT('%s %p\n')<Format>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-maxdepth) ARGUMENT(Quantity)<Quantity> FLAG(-size) ARGUMENT(+Size)<Size> FLAG(-exec::;) UTILITY(bzip2) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT(root) T(find) T(/) T(-name) T(*.py) T(-exec) T(cat) T({}) T(;) T(|) T(tqdm) T(--unit) T(loc) T(--unit_scale) T(True) T(|) T(wc) T(-l)
ROOT(root) T(find) T(/) T(-maxdepth) T(1) T(-xdev) T(-type) T(f) T(-exec) T(grep) T(-Zli) T(stringtofind) T({}) T(+) T(|) T(while) T(IFS=) T(read) T(-r) T(-d) T($\0) T(file;) T(do) T(sed) T(/./d) T($file;) T(done)
ROOT() UTILITY(grep) ARGUMENT(Regex)<Regex> COMMANDSUBSTITUTION() UTILITY(uname) FLAG(-r)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(rm) FLAG(-r) FLAG(-f) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-xtype) ARGUMENT(l)<Type>
ROOT(root) T(find) T($1) T(-type) T(f) T(-exec) T(md5sum) T({}) T(;) T(>) T($1__checksums.md5)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-exec::;) UTILITY(cp) ARGUMENT(File)<File> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(bg) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(Permission)<Permission> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT(root) T(mv) T($() T(readlink) T(-f) T(File)
ROOT(root) T(ssh) T(user@remote) T(bash) T(-s) T(<) T(/path/to/commands-inc.sh)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-regextype) ARGUMENT(posix-egrep)<Type> FLAG(-regex) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(awk) ARGUMENT(Program)<Program> UTILITY(sort) FLAG(-n) UTILITY(cut) FLAG(-c) ARGUMENT(Number)<Number>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-n) ARGUMENT(Quantity)<Quantity> FLAG(-I) ARGUMENT({})<Regex> UTILITY(echo) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex> ARGUMENT({})<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(awk) ARGUMENT(Program)<Program> ARGUMENT({})<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-perm) ARGUMENT(Permission)<Permission> FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
"ROOT(root) T(perl) T(-pi) T(-e) T(BEGIN) T({) T(print) T(""A) T(new) T(line"") T(}) T($(find) T(.) T(-name) T(*.py))"
ROOT() UTILITY(shred) ARGUMENT(File)<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(tar) FLAG(-c) FLAG(-v) FLAG(-f) ARGUMENT(File)<File> ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex> FLAG(-print0) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> FLAG(-0) UTILITY(grep) FLAG(-i) ARGUMENT(Regex)<Regex> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mtime) ARGUMENT(-Timespan)<Timespan> FLAG(-print)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print0) UTILITY(grep) FLAG(-E) FLAG(-i) FLAG(-a) FLAG(-z) FLAG(-Z) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-v) FLAG(-a) FLAG(-z) FLAG(-Z) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-n) ARGUMENT(Quantity)<Quantity> FLAG(-0) FLAG(-I) ARGUMENT({})<Regex> UTILITY(grep) FLAG(-c) FLAG(-H) FLAG(-i) ARGUMENT(Regex)<Regex> ARGUMENT({})<File> UTILITY(grep) FLAG(-E) FLAG(-v) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT({})<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-depth) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(+Permission)<Permission> UTILITY(sort) FLAG(-r)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(rsync) FLAG(--sparse) ARGUMENT(File)<File> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-daystart) FLAG(-mtime) ARGUMENT(Timespan)<Timespan>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-iname) ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(df) ARGUMENT(File)<File> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT(root) T(su) T(-) T(jenkins)
ROOT(root) T(find) T(//path/to/source/Directory) T(-type) T(f) T(-exec) T(md5sum) T({}) T(+) T(|) T(awk) T({print) T($0}) T(>) T(Output.txt)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-user) ARGUMENT(Regex)<Regex> FLAG(-perm) ARGUMENT(-Permission)<Permission> FLAG(-print)
ROOT(root) T(find) T(/) T(-type) T(d) T(-perm) T(-1000) T(-exec) T(ls) T(-ld) T({}) T(;) T(2>) T(/dev/null)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-regex) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(mkdir) ARGUMENT(Directory)<Directory>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-perm) ARGUMENT(-Permission)<Permission> FLAG(-print) UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(sed) FLAG(-i) FLAG(-e) ARGUMENT(Program)<Program> ARGUMENT({})<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-atime) ARGUMENT(+Timespan)<Timespan>
ROOT() PIPELINE() UTILITY(echo) FLAG(-e) FLAG(-n) ARGUMENT(Regex)<Regex> UTILITY(tr) ARGUMENT(Regex)<Regex> ARGUMENT(Regex)<Regex>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-print) UTILITY(sed) FLAG(-e) ARGUMENT(Program)<Program> FLAG(-e) ARGUMENT(Program)<Program> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(l)<Type> FLAG(-xtype) ARGUMENT(l)<Type>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(rm) FLAG(-f) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(f)<Type> FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(wc) FLAG(-c) ARGUMENT({})<File> UTILITY(awk) ARGUMENT(Program)<Program>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-mmin) ARGUMENT(-Quantity)<Quantity> FLAG(-name) ARGUMENT(Regex)<Regex>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(!) FLAG(-name) ARGUMENT(Regex)<Regex> FLAG(-exec::;) UTILITY(compress) FLAG(-f) ARGUMENT({})<File>
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-name) ARGUMENT(Regex)<Regex> UTILITY(grep) FLAG(-f) PROCESSSUBSTITUTION(<) UTILITY(sed) ARGUMENT(Program)<Program> ARGUMENT(File)<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-nouser) FLAG(-print)
ROOT() PIPELINE() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-xdev) FLAG(-samefile) ARGUMENT(Regex)<Regex> UTILITY(xargs) FLAG(-I) ARGUMENT({})<Regex> UTILITY(ls) FLAG(-l) ARGUMENT({})<File>
ROOT() UTILITY(find) ARGUMENT(Path)<Path> UNARYLOGICOP(!) FLAG(-path) ARGUMENT(Regex)<Regex> FLAG(-type) ARGUMENT(f)<Type> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-newer) ARGUMENT(File)<File> FLAG(-print)
ROOT() UTILITY(find) ARGUMENT(Path)<Path> FLAG(-type) ARGUMENT(d)<Type> FLAG(-exec::;) UTILITY(chmod) ARGUMENT(Permission)<Permission> ARGUMENT({})<File>
